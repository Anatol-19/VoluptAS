"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ —é–∑–µ—Ä–æ–≤ –∏–∑ Zoho

–ó–∞–ø—É—Å–∫: python test_zoho_users.py
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from src.integrations.zoho.Zoho_api_client import ZohoAPI
import json


def test_zoho_users():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Zoho"""
    print("=" * 80)
    print("üß™ –¢–ï–°–¢: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Zoho")
    print("=" * 80)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        print("\n1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Zoho API –∫–ª–∏–µ–Ω—Ç–∞...")
        client = ZohoAPI()
        print(f"   ‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
        print(f"   Portal: {client.portal_name}")
        print(f"   Project ID: {client.project_id}")
        print(f"   Base URL: {client.base_url}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("\n2Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ API...")
        users_data = client.get_users()
        
        if not users_data:
            print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("      - –ù–µ–≤–µ—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã")
            print("      - –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ–µ–∫—Ç—É")
            print("      - –ù–µ–≤–µ—Ä–Ω—ã–π project_id")
            return False
        
        print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}")
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        print("\n3Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö...")
        if users_data:
            first_user = users_data[0]
            print(f"   –ü—Ä–∏–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ):")
            print(f"   {json.dumps(first_user, indent=4, ensure_ascii=False)}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            required_fields = ['id', 'name', 'email']
            print(f"\n   –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π: {required_fields}")
            for field in required_fields:
                exists = field in first_user
                status = "‚úÖ" if exists else "‚ùå"
                value = first_user.get(field, 'N/A')
                print(f"      {status} {field}: {value}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            optional_fields = ['role', 'position', 'profile']
            print(f"\n   –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π: {optional_fields}")
            for field in optional_fields:
                exists = field in first_user
                status = "‚úÖ" if exists else "‚ö†Ô∏è"
                value = first_user.get(field, 'N/A')
                print(f"      {status} {field}: {value}")
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print(f"\n4Ô∏è‚É£ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(users_data)}):")
        for idx, user in enumerate(users_data, 1):
            user_id = user.get('id', 'N/A')
            name = user.get('name', 'Unknown')
            email = user.get('email', 'N/A')
            role = user.get('role', user.get('profile', {}).get('role', 'N/A'))
            print(f"   {idx:2d}. ID: {user_id:12s} | {name:30s} | {email:35s} | {role}")
        
        print("\n" + "=" * 80)
        print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
        print("=" * 80)
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        print("\n" + "=" * 80)
        print("‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù")
        print("=" * 80)
        return False


if __name__ == "__main__":
    success = test_zoho_users()
    sys.exit(0 if success else 1)
