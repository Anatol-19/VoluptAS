"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è parent-child –∏–µ—Ä–∞—Ä—Ö–∏–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö

–ü—Ä–æ–±–ª–µ–º–∞: –≤—Å–µ parent_id = None
–†–µ—à–µ–Ω–∏–µ: –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—é –∏–∑ –ø–æ–ª–µ–π module/epic/feature

–õ–æ–≥–∏–∫–∞:
1. Module ‚Üí parent_id = None (–∫–æ—Ä–Ω–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å)
2. Epic ‚Üí parent_id = ID –º–æ–¥—É–ª—è —Å —Ç–∞–∫–∏–º –∂–µ module
3. Feature ‚Üí parent_id = ID —ç–ø–∏–∫–∞ —Å —Ç–∞–∫–∏–º –∂–µ epic
4. Story ‚Üí parent_id = ID —Ñ–∏—á–∏ —Å —Ç–∞–∫–∏–º –∂–µ feature
"""

import sys
from pathlib import Path
project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

from src.db import SessionLocal
from src.models import FunctionalItem


def build_hierarchy():
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å parent-child –∏–µ—Ä–∞—Ä—Ö–∏—é"""
    session = SessionLocal()
    
    try:
        print("üîÑ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏–∏ parent-child...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        all_items = session.query(FunctionalItem).all()
        print(f"   –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(all_items)}")
        
        # –°–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        by_type = {}
        by_functional_id = {}
        
        for item in all_items:
            if item.type not in by_type:
                by_type[item.type] = []
            by_type[item.type].append(item)
            by_functional_id[item.functional_id] = item
        
        updated = 0
        
        # 1. Module ‚Üí parent_id = None (—É–∂–µ —Ç–∞–∫)
        modules = by_type.get('Module', [])
        print(f"   –ú–æ–¥—É–ª–µ–π: {len(modules)} (parent_id = None)")
        
        # 2. Epic ‚Üí parent_id = ID –º–æ–¥—É–ª—è
        epics = by_type.get('Epic', [])
        for epic in epics:
            if not epic.module:
                continue
            
            # –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–æ–¥—É–ª—å
            parent_module = None
            for mod in modules:
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–æ–¥—É–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä)
                if mod.module and mod.module.strip().upper() == epic.module.strip().upper():
                    parent_module = mod
                    break
            
            if parent_module and epic.parent_id != parent_module.id:
                epic.parent_id = parent_module.id
                updated += 1
                print(f"   Epic '{epic.functional_id}' ‚Üí parent = Module '{parent_module.functional_id}'")
        
        # 3. Feature ‚Üí parent_id = ID —ç–ø–∏–∫–∞
        features = by_type.get('Feature', [])
        for feature in features:
            if not feature.epic:
                continue
            
            # –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ø–∏–∫
            parent_epic = None
            for ep in epics:
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —ç–ø–∏–∫–∞
                if ep.epic and ep.epic.strip().upper() == feature.epic.strip().upper():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –º–æ–¥—É–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if feature.module and ep.module:
                        if ep.module.strip().upper() == feature.module.strip().upper():
                            parent_epic = ep
                            break
                    else:
                        parent_epic = ep
                        break
            
            if parent_epic and feature.parent_id != parent_epic.id:
                feature.parent_id = parent_epic.id
                updated += 1
                print(f"   Feature '{feature.functional_id}' ‚Üí parent = Epic '{parent_epic.functional_id}'")
        
        # 4. Story ‚Üí parent_id = ID —Ñ–∏—á–∏
        stories = by_type.get('Story', [])
        for story in stories:
            if not story.feature:
                continue
            
            # –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é —Ñ–∏—á—É
            parent_feature = None
            for feat in features:
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∏—á–∏
                if feat.feature and feat.feature.strip().upper() == story.feature.strip().upper():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —ç–ø–∏–∫–∞ –∏ –º–æ–¥—É–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    match = True
                    if story.epic and feat.epic:
                        if feat.epic.strip().upper() != story.epic.strip().upper():
                            match = False
                    if story.module and feat.module:
                        if feat.module.strip().upper() != story.module.strip().upper():
                            match = False
                    
                    if match:
                        parent_feature = feat
                        break
            
            if parent_feature and story.parent_id != parent_feature.id:
                story.parent_id = parent_feature.id
                updated += 1
                print(f"   Story '{story.functional_id}' ‚Üí parent = Feature '{parent_feature.functional_id}'")
        
        # 5. Page/Element/Service ‚Üí –ø–æ–∫–∞ –±–µ–∑ parent (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã)
        # –ú–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ N:M —Å–≤—è–∑–∏
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        session.commit()
        
        print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–≤—è–∑–µ–π: {updated}")
        print(f"   Epic ‚Üí Module: {sum(1 for e in epics if e.parent_id)}")
        print(f"   Feature ‚Üí Epic: {sum(1 for f in features if f.parent_id)}")
        print(f"   Story ‚Üí Feature: {sum(1 for s in stories if s.parent_id)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   Modules: {len(modules)}")
        print(f"   Epics: {len(epics)}")
        print(f"   Features: {len(features)}")
        print(f"   Stories: {len(stories)}")
        print(f"   Pages: {len(by_type.get('Page', []))}")
        print(f"   Elements: {len(by_type.get('Element', []))}")
        print(f"   Services: {len(by_type.get('Service', []))}")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        session.rollback()
        raise
    finally:
        session.close()


if __name__ == "__main__":
    build_hierarchy()
