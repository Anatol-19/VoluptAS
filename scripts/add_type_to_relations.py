"""
–ú–∏–≥—Ä–∞—Ü–∏—è: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è type –≤ —Ç–∞–±–ª–∏—Ü—É functional_item_relations

–í—ã–ø–æ–ª–Ω—è–µ—Ç:
1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ type
2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ type (–µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è 'hierarchy' –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–≤—è–∑–µ–π
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
PROJECT_ROOT = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(PROJECT_ROOT))

from sqlalchemy import text, inspect
from src.db.database import engine, SessionLocal
from src.models.relation import Relation


def check_column_exists(engine, table_name, column_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    inspector = inspect(engine)
    columns = [col['name'] for col in inspector.get_columns(table_name)]
    return column_name in columns


def add_type_column():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–æ–ª–±–µ—Ü type –≤ functional_item_relations"""
    
    print("=" * 60)
    print("–ú–ò–ì–†–ê–¶–ò–Ø: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è 'type' –≤ functional_item_relations")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞
    if check_column_exists(engine, 'functional_item_relations', 'type'):
        print("‚úÖ –°—Ç–æ–ª–±–µ—Ü 'type' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π —Å type = NULL
        with engine.connect() as conn:
            result = conn.execute(
                text("SELECT COUNT(*) FROM functional_item_relations WHERE type IS NULL")
            )
            null_count = result.scalar()
            
            if null_count > 0:
                print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {null_count} –∑–∞–ø–∏—Å–µ–π —Å type = NULL")
                print("   –û–±–Ω–æ–≤–ª—è–µ–º –∏—Ö –Ω–∞ 'hierarchy'...")
                
                conn.execute(
                    text("UPDATE functional_item_relations SET type = 'hierarchy' WHERE type IS NULL")
                )
                conn.commit()
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {null_count} –∑–∞–ø–∏—Å–µ–π")
            else:
                print("‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ —É–∂–µ –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ type")
        
        return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞
    print("üìù –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü 'type' –≤ —Ç–∞–±–ª–∏—Ü—É...")
    
    try:
        with engine.connect() as conn:
            # –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü
            conn.execute(
                text("ALTER TABLE functional_item_relations ADD COLUMN type TEXT DEFAULT 'hierarchy'")
            )
            
            # –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
            result = conn.execute(
                text("UPDATE functional_item_relations SET type = 'hierarchy' WHERE type IS NULL")
            )
            
            # –°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å
            conn.execute(
                text("CREATE INDEX IF NOT EXISTS idx_relation_type ON functional_item_relations(type)")
            )
            
            conn.commit()
            
            print("‚úÖ –°—Ç–æ–ª–±–µ—Ü 'type' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
            print("‚úÖ –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–≤—è–∑–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–∞–∫ 'hierarchy'")
            print("‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            result = conn.execute(text("SELECT COUNT(*) FROM functional_item_relations"))
            total_count = result.scalar()
            print(f"\nüìä –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π –≤ –ë–î: {total_count}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        raise


if __name__ == "__main__":
    try:
        add_type_column()
        print("\n" + "=" * 60)
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        print("=" * 60)
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)
