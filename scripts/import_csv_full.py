"""
–ü–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç—ë—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–ª—è –∏ —Å–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import sys
from pathlib import Path
project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

import csv
from src.db import SessionLocal
from src.models import FunctionalItem, User

def import_from_csv(csv_path, session=None):
    """
    –ò–º–ø–æ—Ä—Ç –∏–∑ –ª—é–±–æ–≥–æ CSV —Ñ–∞–π–ª–∞
    
    Args:
        csv_path: –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
        session: –°–µ—Å—Å–∏—è SQLAlchemy (–µ—Å–ª–∏ None, —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤–∞—è)
    
    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    """
    close_session = False
    if session is None:
        session = SessionLocal()
        close_session = True
    
    print(f'üìÇ –ß–∏—Ç–∞–µ–º: {csv_path}')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        'total': 0,
        'imported': 0,
        'skipped_empty': 0,
        'skipped_duplicate': 0,
        'users_created': 0,
        'errors': 0
    }
    
    # –ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_cache = {}
    
    def get_or_create_user(name):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not name or name.strip() == '':
            return None
        
        name = name.strip()
        
        if name in users_cache:
            return users_cache[name]
        
        # –ò—â–µ–º –≤ –ë–î
        user = session.query(User).filter_by(name=name).first()
        if user:
            users_cache[name] = user
            return user
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ
        user = User(name=name, is_active=1)
        session.add(user)
        session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
        users_cache[name] = user
        stats['users_created'] += 1
        print(f'  ‚ûï –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name}')
        return user
    
    try:
        with open(csv_path, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            
            for row in reader:
                stats['total'] += 1
                
                functional_id = row.get('Functional ID', '').strip()
                title = row.get('Title', '').strip()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if not functional_id or not title:
                    stats['skipped_empty'] += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                existing = session.query(FunctionalItem).filter_by(functional_id=functional_id).first()
                if existing:
                    stats['skipped_duplicate'] += 1
                    continue
                
                try:
                    # –°–æ–∑–¥–∞—ë–º —ç–ª–µ–º–µ–Ω—Ç —Å–æ –í–°–ï–ú–ò –ø–æ–ª—è–º–∏
                    item = FunctionalItem(
                        functional_id=functional_id,
                        alias_tag=row.get('Alias', '').strip() or row.get('Alias Tag', '').strip() or None,
                        title=title,
                        type=row.get('Type', '').strip() or None,
                        module=row.get('Module', '').strip() or None,
                        epic=row.get('Epic', '').strip() or None,
                        feature=row.get('Feature', '').strip() or None,
                        stories=row.get('Stories', '').strip() or None,
                        segment=row.get('Segment', '').strip() or row.get('Segment ', '').strip() or None,
                        description=row.get('Description', '').strip() or None,
                        tags=row.get('Tags and Aliases', '').strip() or row.get('Tags', '').strip() or None,
                        roles=row.get('Roles', '').strip() or None,
                        is_focus=1 if row.get('isFocus', '').strip().upper() == 'TRUE' else 0,
                        is_crit=1 if row.get('isCrit', '').strip().upper() == 'TRUE' else 0,
                        # –ü–æ–∫—Ä—ã—Ç–∏–µ
                        test_cases_linked=row.get('Test Cases', '').strip() or row.get('Test Cases Linked', '').strip() or None,
                        automation_status=row.get('Automation Status', '').strip() or None,
                        documentation_links=row.get('Documentation', '').strip() or row.get('Documentation Links', '').strip() or None,
                        # INFRA
                        maturity=row.get('Maturity', '').strip() or None,
                        container=row.get('Container', '').strip() or None,
                        database=row.get('Database', '').strip() or None,
                        subsystems_involved=row.get('Subsystems involved', '').strip() or row.get('Subsystems Involved', '').strip() or None,
                        external_services=row.get('External Services', '').strip() or None,
                    )
                    
                    # –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ
                    qa_name = row.get('Responsible (QA)', '').strip()
                    dev_name = row.get('Responsible (Dev)', '').strip()
                    accountable_name = row.get('Accountable', '').strip()
                    
                    if qa_name:
                        qa_user = get_or_create_user(qa_name)
                        if qa_user:
                            item.responsible_qa_id = qa_user.id
                    
                    if dev_name:
                        dev_user = get_or_create_user(dev_name)
                        if dev_user:
                            item.responsible_dev_id = dev_user.id
                    
                    if accountable_name:
                        accountable_user = get_or_create_user(accountable_name)
                        if accountable_user:
                            item.accountable_id = accountable_user.id
                    
                    session.add(item)
                    session.commit()
                    stats['imported'] += 1
                    
                    if stats['imported'] % 10 == 0:
                        print(f'  ‚úì –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {stats["imported"]}')
                
                except Exception as e:
                    session.rollback()
                    stats['errors'] += 1
                    print(f'  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ {functional_id}: {e}')
                    continue
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print('\n' + '='*60)
        print('üìä –ò–¢–û–ì–ò –ò–ú–ü–û–†–¢–ê:')
        print(f'  üìÅ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ CSV: {stats["total"]}')
        print(f'  ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {stats["imported"]}')
        print(f'  üë• –°–æ–∑–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats["users_created"]}')
        print(f'  ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–ø—É—Å—Ç—ã–µ): {stats["skipped_empty"]}')
        print(f'  ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏): {stats["skipped_duplicate"]}')
        print(f'  ‚ùå –û—à–∏–±–æ–∫: {stats["errors"]}')
        print('='*60)
        
        return stats['imported']
        
    except Exception as e:
        print(f'‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}')
        session.rollback()
        return 0
    finally:
        if close_session:
            session.close()


def import_csv():
    """–ò–º–ø–æ—Ä—Ç –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–µ—Å—Ç–∞ (data/import/voluptas_data.csv)"""
    csv_path = project_root / 'data' / 'import' / 'voluptas_data.csv'
    print(f'üìÇ –ß–∏—Ç–∞–µ–º: {csv_path}')
    import_from_csv(str(csv_path))


if __name__ == '__main__':
    import_csv()
