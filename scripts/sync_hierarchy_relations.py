"""
–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è parent_id —Å —Ç–∞–±–ª–∏—Ü–µ–π functional_item_relations

–°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å–∏ —Ç–∏–ø–∞ 'hierarchy' –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö parent_id != None
"""

import sys
from pathlib import Path

PROJECT_ROOT = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(PROJECT_ROOT))

from src.db.database import SessionLocal
from src.models.functional_item import FunctionalItem
from src.models.relation import Relation


def sync_hierarchy():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏"""
    
    session = SessionLocal()
    
    try:
        print("=" * 60)
        print("–°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø: parent_id ‚Üí functional_item_relations")
        print("=" * 60)
        
        # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å parent_id
        items_with_parent = session.query(FunctionalItem).filter(
            FunctionalItem.parent_id.isnot(None)
        ).all()
        
        print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å parent_id: {len(items_with_parent)}")
        
        created = 0
        skipped = 0
        
        for item in items_with_parent:
            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —Å–≤—è–∑—å
            existing = session.query(Relation).filter_by(
                source_id=item.parent_id,
                target_id=item.id,
                type='hierarchy'
            ).first()
            
            if existing:
                skipped += 1
                continue
            
            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–≤—è–∑—å
            relation = Relation(
                source_id=item.parent_id,
                target_id=item.id,
                type='hierarchy',
                directed=True,
                weight=1.0,
                active=True
            )
            
            session.add(relation)
            created += 1
            
            # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
            parent = session.query(FunctionalItem).get(item.parent_id)
            if parent:
                print(f"   ‚úÖ {parent.functional_id} ‚Üí {item.functional_id}")
        
        session.commit()
        
        print(f"\n{'=' * 60}")
        print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
        print(f"   –°–æ–∑–¥–∞–Ω–æ —Å–≤—è–∑–µ–π: {created}")
        print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç): {skipped}")
        print(f"{'=' * 60}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–≤—è–∑–µ–π —Ç–∏–ø–∞ 'hierarchy':")
        hierarchy_relations = session.query(Relation).filter_by(
            type='hierarchy', active=True
        ).all()
        
        by_level = {}
        for rel in hierarchy_relations:
            source = session.query(FunctionalItem).get(rel.source_id)
            target = session.query(FunctionalItem).get(rel.target_id)
            
            if source and target:
                key = f"{source.type} ‚Üí {target.type}"
                by_level[key] = by_level.get(key, 0) + 1
        
        for key, count in sorted(by_level.items()):
            print(f"   {key}: {count}")
        
        print(f"\n   –í—Å–µ–≥–æ hierarchy-—Å–≤—è–∑–µ–π: {len(hierarchy_relations)}")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        session.rollback()
        raise
    finally:
        session.close()


if __name__ == "__main__":
    sync_hierarchy()
