"""
–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç—ë—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV ‚Üí SQLite

–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ voluptas_data.csv –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
–ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ - –≤—Å—è —Ä–∞–±–æ—Ç–∞ —á–µ—Ä–µ–∑ UI!
"""

import sys
import csv
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(project_root))

from src.db import SessionLocal, init_db
from src.models import FunctionalItem


def parse_boolean(value: str) -> bool:
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤ boolean"""
    if not value:
        return False
    return value.strip().upper() in ['TRUE', '1', 'YES', 'Y']


def import_csv_data(csv_path: Path):
    """
    –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV –≤ –ë–î
    
    Args:
        csv_path: –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
    """
    print(f"üìÇ –ß—Ç–µ–Ω–∏–µ CSV: {csv_path}")
    
    session = SessionLocal()
    imported_count = 0
    skipped_count = 0
    
    try:
        with open(csv_path, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            
            for row in reader:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                functional_id = row.get('Functional ID', '').strip()
                if not functional_id:
                    skipped_count += 1
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
                existing = session.query(FunctionalItem).filter_by(functional_id=functional_id).first()
                if existing:
                    print(f"  ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç): {functional_id}")
                    skipped_count += 1
                    continue
                
                # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                item = FunctionalItem(
                    functional_id=functional_id,
                    title=title,
                    type=row.get('Type', '').strip() or None,
                    module=row.get('Module', '').strip() or None,
                    epic=row.get('Epic', '').strip() or None,
                    feature=row.get('Feature', '').strip() or None,
                    stories=row.get('Stories', '').strip() or None,
                    segment=row.get('Segment ', '').strip() or None,  # Note: –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª –≤ CSV!
                    description=row.get('Description', '').strip() or None,
                    tags=row.get('Tags and Aliases', '').strip() or None,
                    roles=row.get('Roles', '').strip() or None,
                    is_focus=parse_boolean(row.get('isFocus', 'FALSE')),
                    is_crit=parse_boolean(row.get('isCrit', 'FALSE')),
                    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ User –º–æ–¥–µ–ª—å
                    # responsible_qa_id=...,
                    # responsible_dev_id=...,
                    automation_status=row.get('Automation Status', '').strip() or None,
                    maturity=row.get('Maturity', '').strip() or None,
                    container=row.get('Container', '').strip() or None,
                    database=row.get('Database', '').strip() or None,
                    subsystems_involved=row.get('Subsystems involved', '').strip() or None,
                    external_services=row.get('External Services', '').strip() or None,
                )
                
                session.add(item)
                session.commit()  # –ö–æ–º–º–∏—Ç–∏–º –ø–æ –æ–¥–Ω–æ–º—É —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—Ç–∫–∞—Ç–æ–≤ –ø—Ä–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö
                imported_count += 1
                
                if imported_count % 10 == 0:
                    print(f"  ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {imported_count}")
        print(f"\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!")
        print(f"  ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {imported_count}")
        print(f"  ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
        
    except Exception as e:
        session.rollback()
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        raise
    finally:
        session.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞"""
    print("üöÄ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV ‚Üí SQLite\n")
    
    csv_path = project_root / "data" / "import" / "voluptas_data.csv"
    
    if not csv_path.exists():
        print(f"‚ùå CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_path}")
        sys.exit(1)
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î...")
    init_db()
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    import_csv_data(csv_path)
    
    print("\n‚ú® –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å UI.")


if __name__ == "__main__":
    main()
