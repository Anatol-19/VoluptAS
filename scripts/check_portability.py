"""
Portability Check Script

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –∫ –ø–µ—Ä–µ–Ω–æ—Å—É –Ω–∞ –¥—Ä—É–≥–∏–µ –º–∞—à–∏–Ω—ã:
- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—É—Ç–µ–π –≤ –∫–æ–¥–µ
- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å .gitignore
- Credentials –Ω–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
- –ù–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥—É–±–ª–µ–π –∏ —Ä—É–¥–∏–º–µ–Ω—Ç–æ–≤
"""

import os
import re
from pathlib import Path
from typing import List, Tuple


class PortabilityChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.issues = []
        self.warnings = []
        self.ok = []
        
    def check_all(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞...\n")
        
        self.check_absolute_paths()
        self.check_gitignore()
        self.check_credentials_in_git()
        self.check_documentation()
        self.check_duplicates()
        self.check_required_files()
        
        self.print_report()
        
        return len(self.issues) == 0
    
    def check_absolute_paths(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –≤ –∫–æ–¥–µ"""
        print("üìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—É—Ç–µ–π...")
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –ø—É—Ç–µ–π
        windows_path = re.compile(r'["\']([A-Z]:\\\\[^"\']+)["\']')
        unix_path = re.compile(r'["\'](/home/[^"\']+|/Users/[^"\']+)["\']')
        
        python_files = list(self.project_root.rglob('*.py'))
        found_paths = []
        
        for file in python_files:
            if '.venv' in str(file) or '__pycache__' in str(file):
                continue
                
            try:
                content = file.read_text(encoding='utf-8')
                
                for match in windows_path.finditer(content):
                    path = match.group(1)
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∏ docstrings
                    if 'example' not in path.lower() and 'C:\\\\Auto_Tests' not in path and 'C:\\\\ITS_QA' not in path:
                        found_paths.append((file, path))
                
                for match in unix_path.finditer(content):
                    path = match.group(1)
                    if 'example' not in path.lower():
                        found_paths.append((file, path))
                        
            except Exception as e:
                self.warnings.append(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {file}: {e}")
        
        if found_paths:
            self.issues.append("‚ùå –ù–∞–π–¥–µ–Ω—ã –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏:")
            for file, path in found_paths[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                rel_path = file.relative_to(self.project_root)
                self.issues.append(f"   {rel_path}: {path}")
            if len(found_paths) > 5:
                self.issues.append(f"   ... –∏ –µ—â—ë {len(found_paths) - 5}")
        else:
            self.ok.append("‚úÖ –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    def check_gitignore(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore"""
        print("üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore...")
        
        gitignore = self.project_root / '.gitignore'
        
        if not gitignore.exists():
            self.issues.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç .gitignore")
            return
        
        content = gitignore.read_text(encoding='utf-8')
        
        required_patterns = [
            ('*.db', '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö'),
            ('*.env', 'env —Ñ–∞–π–ª—ã'),
            ('.venv', '–≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ'),
            ('__pycache__', '–∫–µ—à Python'),
            ('credentials/', '–ø–∞–ø–∫–∞ credentials'),
        ]
        
        missing = []
        for pattern, desc in required_patterns:
            if pattern not in content:
                missing.append(f"{pattern} ({desc})")
        
        if missing:
            self.warnings.append(f"‚ö†Ô∏è  –í .gitignore –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã:")
            for item in missing:
                self.warnings.append(f"   {item}")
        else:
            self.ok.append("‚úÖ .gitignore –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    
    def check_credentials_in_git(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ credentials –Ω–µ –≤ git"""
        print("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ credentials...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º tracked files
        import subprocess
        try:
            result = subprocess.run(
                ['git', 'ls-files'],
                cwd=self.project_root,
                capture_output=True,
                text=True,
                check=True
            )
            
            tracked = result.stdout.split('\n')
            credential_files = [
                f for f in tracked 
                if any(x in f.lower() for x in ['.env', 'credentials', 'secret', 'token'])
                and 'example' not in f.lower()
                and 'readme' not in f.lower()
            ]
            
            if credential_files:
                self.issues.append("‚ùå –§–∞–π–ª—ã credentials –≤ git:")
                for f in credential_files:
                    self.issues.append(f"   {f}")
            else:
                self.ok.append("‚úÖ Credentials –Ω–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏")
                
        except Exception as e:
            self.warnings.append(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å git: {e}")
    
    def check_documentation(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        print("üìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
        
        required_docs = [
            ('README.md', '–æ—Å–Ω–æ–≤–Ω–æ–π README'),
            ('CHANGELOG.md', '–∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π'),
            ('TODO.md', '—Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á'),
        ]
        
        missing = []
        for filename, desc in required_docs:
            if not (self.project_root / filename).exists():
                missing.append(f"{filename} ({desc})")
        
        if missing:
            self.warnings.append("‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
            for item in missing:
                self.warnings.append(f"   {item}")
        else:
            self.ok.append("‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ –º–µ—Å—Ç–µ")
    
    def check_duplicates(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π –∏ —Ä—É–¥–∏–º–µ–Ω—Ç–æ–≤"""
        print("üóëÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º backup —Ñ–∞–π–ª—ã
        backup_files = list(self.project_root.rglob('*.backup'))
        backup_files += list(self.project_root.rglob('*.bak'))
        backup_files += list(self.project_root.rglob('*.old'))
        
        if backup_files:
            self.warnings.append("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã backup —Ñ–∞–π–ª—ã:")
            for f in backup_files[:5]:
                rel = f.relative_to(self.project_root)
                self.warnings.append(f"   {rel}")
        else:
            self.ok.append("‚úÖ Backup —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    def check_required_files(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
        
        required = [
            'requirements.txt',
            'main.py',
            'setup.bat',
            'start_voluptas.bat',
            '.cursorrules',
        ]
        
        missing = [f for f in required if not (self.project_root / f).exists()]
        
        if missing:
            self.issues.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã:")
            for f in missing:
                self.issues.append(f"   {f}")
        else:
            self.ok.append("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")
    
    def print_report(self):
        """–ü–µ—á–∞—Ç—å –æ—Ç—á—ë—Ç–∞"""
        print("\n" + "="*60)
        print("üìä –û–¢–ß–Å–¢ –û –ü–û–†–¢–ê–ë–ï–õ–¨–ù–û–°–¢–ò")
        print("="*60 + "\n")
        
        if self.ok:
            print("‚úÖ –£–°–ü–ï–®–ù–û:")
            for item in self.ok:
                print(f"  {item}")
            print()
        
        if self.warnings:
            print("‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:")
            for item in self.warnings:
                print(f"  {item}")
            print()
        
        if self.issues:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–´:")
            for item in self.issues:
                print(f"  {item}")
            print()
        
        print("="*60)
        if not self.issues:
            print("‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–Ω–æ—Å—É!")
        else:
            print("‚ùå –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–Ω–æ—Å–æ–º")
        print("="*60)


def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    project_root = Path(__file__).parent.parent
    
    checker = PortabilityChecker(project_root)
    success = checker.check_all()
    
    return 0 if success else 1


if __name__ == '__main__':
    exit(main())
