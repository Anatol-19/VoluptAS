<#
.SYNOPSIS
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è VoluptAS

.DESCRIPTION
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –Ω–æ–≤–æ–º –ü–ö:
    - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç Python
    - –°–æ–∑–¥–∞–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    - –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç credentials –∏–∑ .backup
    - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ë–î

.EXAMPLE
    .\setup.ps1
#>

param(
    [switch]$Force,  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å
    [switch]$SkipCredentials  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ credentials
)

$ErrorActionPreference = "Stop"

Write-Host "`n========================================" -ForegroundColor Cyan
Write-Host "   VoluptAS Setup Script" -ForegroundColor Cyan
Write-Host "========================================`n" -ForegroundColor Cyan

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
$PROJECT_ROOT = $PSScriptRoot
Set-Location $PROJECT_ROOT

Write-Host "[1/6] –ü—Ä–æ–≤–µ—Ä–∫–∞ Python..." -ForegroundColor Yellow

# –ò—â–µ–º Python
$python = $null
foreach ($cmd in @("py -3.12", "py -3.11", "py -3", "python")) {
    try {
        $version = & $cmd.Split() --version 2>&1
        if ($LASTEXITCODE -eq 0) {
            $python = $cmd
            Write-Host "  ‚úÖ –ù–∞–π–¥–µ–Ω: $version" -ForegroundColor Green
            break
        }
    } catch {}
}

if (-not $python) {
    Write-Host "  ‚ùå Python 3.11+ –Ω–µ –Ω–∞–π–¥–µ–Ω!" -ForegroundColor Red
    Write-Host "  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python: https://www.python.org/downloads/" -ForegroundColor Yellow
    exit 1
}

Write-Host "`n[2/6] –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..." -ForegroundColor Yellow

if (Test-Path ".venv") {
    if ($Force) {
        Write-Host "  ‚ö†Ô∏è  –£–¥–∞–ª—è—é —Å—Ç–∞—Ä–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ..." -ForegroundColor Yellow
        Remove-Item -Recurse -Force ".venv"
    } else {
        Write-Host "  ‚ÑπÔ∏è  –û–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ -Force –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è)" -ForegroundColor Cyan
    }
}

if (-not (Test-Path ".venv")) {
    Write-Host "  üîß –°–æ–∑–¥–∞—é .venv..." -ForegroundColor Cyan
    & $python.Split() -m venv .venv
    if ($LASTEXITCODE -ne 0) {
        Write-Host "  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ!" -ForegroundColor Red
        exit 1
    }
    Write-Host "  ‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ" -ForegroundColor Green
}

# –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
$venvPython = ".\.venv\Scripts\python.exe"
$venvPip = ".\.venv\Scripts\pip.exe"

Write-Host "`n[3/6] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..." -ForegroundColor Yellow
Write-Host "  üîß –û–±–Ω–æ–≤–ª—è—é pip, setuptools, wheel..." -ForegroundColor Cyan
& $venvPip install --upgrade pip setuptools wheel --quiet

Write-Host "  üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ requirements.txt..." -ForegroundColor Cyan
& $venvPip install -r requirements.txt --quiet

if ($LASTEXITCODE -ne 0) {
    Write-Host "  ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π!" -ForegroundColor Red
    exit 1
}
Write-Host "  ‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã" -ForegroundColor Green

Write-Host "`n[4/6] –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..." -ForegroundColor Yellow
if (-not (Test-Path "data")) {
    New-Item -ItemType Directory -Path "data" | Out-Null
    Write-Host "  ‚úÖ data/ —Å–æ–∑–¥–∞–Ω–∞" -ForegroundColor Green
}
if (-not (Test-Path "credentials")) {
    New-Item -ItemType Directory -Path "credentials" | Out-Null
    Write-Host "  ‚úÖ credentials/ —Å–æ–∑–¥–∞–Ω–∞" -ForegroundColor Green
}

Write-Host "`n[5/6] –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ credentials..." -ForegroundColor Yellow

if ($SkipCredentials) {
    Write-Host "  ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—Ñ–ª–∞–≥ -SkipCredentials)" -ForegroundColor Cyan
} else {
    $restored = 0
    
    # Zoho
    if (Test-Path "credentials\zoho.env.backup") {
        if (-not (Test-Path "credentials\zoho.env") -or $Force) {
            Copy-Item "credentials\zoho.env.backup" "credentials\zoho.env" -Force
            Write-Host "  ‚úÖ zoho.env –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" -ForegroundColor Green
            $restored++
        } else {
            Write-Host "  ‚ö†Ô∏è  zoho.env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø—Ä–æ–ø—É—â–µ–Ω–æ)" -ForegroundColor Yellow
        }
    }
    
    # Google
    if (Test-Path "credentials\google_credentials.json.backup") {
        if (-not (Test-Path "credentials\google_credentials.json") -or $Force) {
            Copy-Item "credentials\google_credentials.json.backup" "credentials\google_credentials.json" -Force
            Write-Host "  ‚úÖ google_credentials.json –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" -ForegroundColor Green
            $restored++
        } else {
            Write-Host "  ‚ö†Ô∏è  google_credentials.json —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø—Ä–æ–ø—É—â–µ–Ω–æ)" -ForegroundColor Yellow
        }
    }
    
    # Qase (–Ω–µ –∏–∑ backup - —É–∂–µ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω)
    if (-not (Test-Path "credentials\qase.env")) {
        Write-Host "  ‚ö†Ô∏è  qase.env –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —á–µ—Ä–µ–∑ UI)" -ForegroundColor Yellow
    } else {
        Write-Host "  ‚úÖ qase.env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" -ForegroundColor Green
    }
    
    if ($restored -eq 0 -and -not (Test-Path "credentials\*.backup")) {
        Write-Host "  ‚ÑπÔ∏è  –ù–µ—Ç .backup —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è" -ForegroundColor Cyan
        Write-Host "  üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ credentials —á–µ—Ä–µ–∑: –§–∞–π–ª ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏" -ForegroundColor Yellow
    }
}

Write-Host "`n[6/6] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..." -ForegroundColor Yellow

if (-not (Test-Path "data\voluptas.db")) {
    Write-Host "  üîß –ë–î –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ" -ForegroundColor Cyan
} else {
    Write-Host "  ‚úÖ –ë–î —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: data\voluptas.db" -ForegroundColor Green
}

Write-Host "`n========================================" -ForegroundColor Green
Write-Host "   ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" -ForegroundColor Green
Write-Host "========================================`n" -ForegroundColor Green

Write-Host "üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" -ForegroundColor Yellow
Write-Host ""
Write-Host "  1. –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:" -ForegroundColor Cyan
Write-Host "     .\start_voluptas.bat" -ForegroundColor White
Write-Host ""
Write-Host "  2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π:" -ForegroundColor Cyan
Write-Host "     –§–∞–π–ª ‚Üí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí Zoho/Google/Qase" -ForegroundColor White
Write-Host ""
Write-Host "  3. –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö:" -ForegroundColor Cyan
Write-Host "     –§–∞–π–ª ‚Üí –ò–º–ø–æ—Ä—Ç ‚Üí CSV/Excel" -ForegroundColor White
Write-Host ""

if (-not $SkipCredentials -and (Test-Path "credentials\*.backup")) {
    Write-Host "‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω—ã –≤ credentials/*.env" -ForegroundColor Yellow
    Write-Host "   –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã –º–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏" -ForegroundColor Gray
    Write-Host ""
}

Write-Host "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README.md" -ForegroundColor Cyan
Write-Host "üêõ –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: README.md (—Ä–∞–∑–¥–µ–ª '–ß—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ')" -ForegroundColor Cyan
Write-Host ""
