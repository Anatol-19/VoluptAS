"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ functional_id –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏ –ø—Ä–∞–≤–∏–ª–∞–º
"""
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from src.models.functional_item import FunctionalItem

engine = create_engine('sqlite:///data/voluptas.db')
SessionLocal = sessionmaker(bind=engine)
session = SessionLocal()

items = session.query(FunctionalItem).all()

print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(items)}\n")
print("–ü—Ä–æ–≤–µ—Ä–∫–∞ functional_id –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:\n")
print("="*80)

issues = []

for item in items:
    funcid = item.functional_id
    parts = funcid.split('.')
    item_type = item.type
    
    # –ü—Ä–∞–≤–∏–ª–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã functional_id
    problems = []
    
    # Module: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–∞ "Module_Name"
    if item_type == 'Module':
        if len(parts) != 1:
            problems.append(f"Module –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º, –Ω–∞–π–¥–µ–Ω–æ {len(parts)} —á–∞—Å—Ç–µ–π")
    
    # Epic: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–∞ "Module.Epic_Name"
    elif item_type == 'Epic':
        if len(parts) != 2:
            problems.append(f"Epic –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Module.Epic, –Ω–∞–π–¥–µ–Ω–æ {len(parts)} —á–∞—Å—Ç–µ–π")
        if not item.module:
            problems.append("–£ Epic –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω Module")
    
    # Feature: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–∞ "Module.Epic.Feature_Name"
    elif item_type == 'Feature':
        if len(parts) < 3:
            problems.append(f"Feature –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Module.Epic.Feature, –Ω–∞–π–¥–µ–Ω–æ {len(parts)} —á–∞—Å—Ç–µ–π")
        if not item.module:
            problems.append("–£ Feature –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω Module")
        if not item.epic:
            problems.append("–£ Feature –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω Epic")
    
    # Story: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–∞ "Module.Epic.Feature.Story_Name"
    elif item_type == 'Story':
        if len(parts) < 4:
            problems.append(f"Story –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Module.Epic.Feature.Story, –Ω–∞–π–¥–µ–Ω–æ {len(parts)} —á–∞—Å—Ç–µ–π")
        if not item.module:
            problems.append("–£ Story –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω Module")
        if not item.epic:
            problems.append("–£ Story –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω Epic")
        if not item.feature:
            problems.append("–£ Story –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω Feature")
    
    # Page: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–∞ "Module.Epic.Page_Name" –∏–ª–∏ "Module.Epic.Feature.Page_Name"
    elif item_type == 'Page':
        if len(parts) < 3:
            problems.append(f"Page –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Module.Epic.Page –∏–ª–∏ Module.Epic.Feature.Page, –Ω–∞–π–¥–µ–Ω–æ {len(parts)} —á–∞—Å—Ç–µ–π")
        if not item.module:
            problems.append("–£ Page –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω Module")
        if not item.epic:
            problems.append("–£ Page –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω Epic")
    
    # Element: –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∏–¥–∞ "Element_Name" –∏–ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    elif item_type == 'Element':
        # –≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –∫–∞–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–º–∏, —Ç–∞–∫ –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        pass
    
    # Service: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–∞ "Module.Service_Name"
    elif item_type == 'Service':
        if len(parts) < 2:
            problems.append(f"Service –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Module.Service, –Ω–∞–π–¥–µ–Ω–æ {len(parts)} —á–∞—Å—Ç–µ–π")
        if not item.module:
            problems.append("–£ Service –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω Module")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ segment –¥–ª—è —Ç–∏–ø–æ–≤
    if item.segment:
        if item_type in ['Module', 'Epic']:
            problems.append(f"{item_type} –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å segment, –Ω–æ —É–∫–∞–∑–∞–Ω: {item.segment}")
    
    if problems:
        issues.append({
            'id': item.id,
            'funcid': funcid,
            'type': item_type,
            'problems': problems
        })
        print(f"‚ùå ID: {item.id}")
        print(f"   FuncID: {funcid}")
        print(f"   Type: {item_type}")
        print(f"   Module: {item.module or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
        print(f"   Epic: {item.epic or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
        print(f"   Feature: {item.feature or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
        print(f"   Segment: {item.segment or '–Ω–µ —É–∫–∞–∑–∞–Ω'}")
        for prob in problems:
            print(f"   ‚ö†Ô∏è  {prob}")
        print()

print("="*80)
print(f"\nüìä –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(issues)}")

if not issues:
    print("‚úÖ –í—Å–µ functional_id —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º!")

session.close()
