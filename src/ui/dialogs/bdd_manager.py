"""
BDD Feature Manager - –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ feature —Ñ–∞–π–ª–∞–º–∏
"""
from PyQt6.QtWidgets import *
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QAction
from pathlib import Path

from src.db import SessionLocal
from src.models import FunctionalItem
from src.bdd.feature_generator import FeatureGenerator


class BDDFeatureManager(QMainWindow):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä BDD Feature —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.session = SessionLocal()
        self.current_items = []
        self.init_ui()
        self.load_data()
    
    def init_ui(self):
        self.setWindowTitle('BDD Feature Manager')
        self.setGeometry(150, 150, 1200, 700)
        
        # –ú–µ–Ω—é
        menubar = self.menuBar()
        
        file_menu = menubar.addMenu('–§–∞–π–ª')
        
        export_all_action = QAction('üíæ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö', self)
        export_all_action.triggered.connect(self.export_all)
        file_menu.addAction(export_all_action)
        
        file_menu.addSeparator()
        
        close_action = QAction('–ó–∞–∫—Ä—ã—Ç—å', self)
        close_action.triggered.connect(self.close)
        file_menu.addAction(close_action)
        
        # Toolbar
        toolbar = QToolBar('–î–µ–π—Å—Ç–≤–∏—è')
        toolbar.setMovable(False)
        self.addToolBar(toolbar)
        
        refresh_action = QAction('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', self)
        refresh_action.triggered.connect(self.load_data)
        toolbar.addAction(refresh_action)
        
        generate_action = QAction('üõ†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è', self)
        generate_action.triggered.connect(self.generate_selected)
        toolbar.addAction(generate_action)
        
        export_selected_action = QAction('üíæ –≠–∫—Å–ø–æ—Ä—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö', self)
        export_selected_action.triggered.connect(self.export_selected)
        toolbar.addAction(export_selected_action)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)
        
        # –§–∏–ª—å—Ç—Ä—ã
        filter_layout = QHBoxLayout()
        
        filter_layout.addWidget(QLabel('üîç –ü–æ–∏—Å–∫:'))
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText('Functional ID, Title...')
        self.search_input.textChanged.connect(self.apply_filters)
        filter_layout.addWidget(self.search_input)
        
        filter_layout.addWidget(QLabel('Type:'))
        self.type_filter = QComboBox()
        self.type_filter.currentTextChanged.connect(self.apply_filters)
        filter_layout.addWidget(self.type_filter)
        
        filter_layout.addWidget(QLabel('Segment:'))
        self.segment_filter = QComboBox()
        self.segment_filter.currentTextChanged.connect(self.apply_filters)
        filter_layout.addWidget(self.segment_filter)
        
        # –ß–µ–∫–±–æ–∫—Å—ã
        self.crit_check = QCheckBox('–¢–æ–ª—å–∫–æ Critical')
        self.crit_check.stateChanged.connect(self.apply_filters)
        filter_layout.addWidget(self.crit_check)
        
        self.focus_check = QCheckBox('–¢–æ–ª—å–∫–æ Focus')
        self.focus_check.stateChanged.connect(self.apply_filters)
        filter_layout.addWidget(self.focus_check)
        
        filter_layout.addStretch()
        
        main_layout.addLayout(filter_layout)
        
        # Splitter: —Ç–∞–±–ª–∏—Ü–∞ + –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        splitter = QSplitter(Qt.Orientation.Horizontal)
        
        # –¢–∞–±–ª–∏—Ü–∞
        self.table = QTableWidget()
        self.table.setColumnCount(6)
        self.table.setHorizontalHeaderLabels([
            'Functional ID', 'Title', 'Type', 'Segment', 'Crit', 'Focus'
        ])
        self.table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)
        self.table.setEditTriggers(QTableWidget.EditTrigger.NoEditTriggers)
        self.table.itemSelectionChanged.connect(self.on_selection_changed)
        splitter.addWidget(self.table)
        
        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
        preview_widget = QWidget()
        preview_layout = QVBoxLayout(preview_widget)
        
        preview_layout.addWidget(QLabel('–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä Feature:'))
        
        self.preview_text = QTextEdit()
        self.preview_text.setReadOnly(True)
        self.preview_text.setStyleSheet('font-family: Consolas, monospace; font-size: 9pt;')
        preview_layout.addWidget(self.preview_text)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        preview_buttons = QHBoxLayout()
        
        generate_preview_btn = QPushButton('üõ†Ô∏è –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å')
        generate_preview_btn.clicked.connect(self.generate_preview)
        preview_buttons.addWidget(generate_preview_btn)
        
        export_preview_btn = QPushButton('üíæ –≠–∫—Å–ø–æ—Ä—Ç')
        export_preview_btn.clicked.connect(self.export_preview)
        preview_buttons.addWidget(export_preview_btn)
        
        preview_buttons.addStretch()
        preview_layout.addLayout(preview_buttons)
        
        splitter.addWidget(preview_widget)
        splitter.setSizes([600, 600])
        
        main_layout.addWidget(splitter)
        
        self.statusBar().showMessage('–ì–æ—Ç–æ–≤')
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã"""
        self.current_items = self.session.query(FunctionalItem).order_by(FunctionalItem.functional_id).all()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        types = sorted(set(item.type for item in self.current_items if item.type))
        segments = sorted(set(item.segment for item in self.current_items if item.segment))
        
        self.type_filter.clear()
        self.type_filter.addItems([''] + types)
        
        self.segment_filter.clear()
        self.segment_filter.addItems([''] + segments)
        
        self.populate_table(self.current_items)
        self.statusBar().showMessage(f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(self.current_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤')
    
    def populate_table(self, items):
        """–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É"""
        self.table.setRowCount(len(items))
        
        for row_idx, item in enumerate(items):
            self.table.setItem(row_idx, 0, QTableWidgetItem(item.functional_id))
            self.table.setItem(row_idx, 1, QTableWidgetItem(item.title or ''))
            self.table.setItem(row_idx, 2, QTableWidgetItem(item.type or ''))
            self.table.setItem(row_idx, 3, QTableWidgetItem(item.segment or ''))
            self.table.setItem(row_idx, 4, QTableWidgetItem('‚úì' if item.is_crit else ''))
            self.table.setItem(row_idx, 5, QTableWidgetItem('‚úì' if item.is_focus else ''))
        
        self.table.resizeColumnsToContents()
    
    def apply_filters(self):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"""
        search_text = self.search_input.text().lower()
        type_filter = self.type_filter.currentText()
        segment_filter = self.segment_filter.currentText()
        only_crit = self.crit_check.isChecked()
        only_focus = self.focus_check.isChecked()
        
        for row in range(self.table.rowCount()):
            show = True
            
            # –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
            if search_text:
                match = any(
                    self.table.item(row, col) and search_text in self.table.item(row, col).text().lower()
                    for col in range(self.table.columnCount())
                )
                show = show and match
            
            # Type —Ñ–∏–ª—å—Ç—Ä
            if type_filter and show:
                type_cell = self.table.item(row, 2)
                show = show and (type_cell and type_cell.text() == type_filter)
            
            # Segment —Ñ–∏–ª—å—Ç—Ä
            if segment_filter and show:
                segment_cell = self.table.item(row, 3)
                show = show and (segment_cell and segment_cell.text() == segment_filter)
            
            # Crit —Ñ–∏–ª—å—Ç—Ä
            if only_crit and show:
                crit_cell = self.table.item(row, 4)
                show = show and (crit_cell and crit_cell.text() == '‚úì')
            
            # Focus —Ñ–∏–ª—å—Ç—Ä
            if only_focus and show:
                focus_cell = self.table.item(row, 5)
                show = show and (focus_cell and focus_cell.text() == '‚úì')
            
            self.table.setRowHidden(row, not show)
    
    def on_selection_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏"""
        selected = self.table.currentRow()
        if selected >= 0:
            functional_id = self.table.item(selected, 0).text()
            item = self.session.query(FunctionalItem).filter_by(functional_id=functional_id).first()
            if item:
                self.generate_preview()
        else:
            self.preview_text.clear()
    
    def generate_preview(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        selected = self.table.currentRow()
        if selected < 0:
            return
        
        functional_id = self.table.item(selected, 0).text()
        item = self.session.query(FunctionalItem).filter_by(functional_id=functional_id).first()
        
        if item:
            feature_content = FeatureGenerator.generate_feature(item)
            self.preview_text.setPlainText(feature_content)
    
    def export_preview(self):
        """–≠–∫—Å–ø–æ—Ä—Ç feature –∏–∑ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        content = self.preview_text.toPlainText().strip()
        
        if not content:
            QMessageBox.warning(self, '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—É—Å—Ç.\n–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ feature.')
            return
        
        selected = self.table.currentRow()
        if selected < 0:
            return
        
        functional_id = self.table.item(selected, 0).text()
        filename = f"{functional_id.replace('.', '_')}.feature"
        
        filepath, _ = QFileDialog.getSaveFileName(
            self, '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å feature —Ñ–∞–π–ª', filename, 'Feature Files (*.feature)'
        )
        
        if filepath:
            try:
                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(content)
                QMessageBox.information(self, '–£—Å–ø–µ—Ö', f'‚úÖ Feature —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{filepath}')
            except Exception as e:
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:\n{e}')
    
    def generate_selected(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è feature –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        selected_rows = set(item.row() for item in self.table.selectedItems())
        
        if not selected_rows:
            QMessageBox.warning(self, '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ')
            return
        
        output_dir = QFileDialog.getExistingDirectory(
            self, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', ''
        )
        
        if not output_dir:
            return
        
        items_to_generate = []
        for row in selected_rows:
            functional_id = self.table.item(row, 0).text()
            item = self.session.query(FunctionalItem).filter_by(functional_id=functional_id).first()
            if item:
                items_to_generate.append(item)
        
        try:
            saved_files = FeatureGenerator.batch_generate(items_to_generate, Path(output_dir))
            QMessageBox.information(
                self, '–£—Å–ø–µ—Ö',
                f'‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(saved_files)} feature —Ñ–∞–π–ª–æ–≤\n\n–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_dir}'
            )
        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:\n{e}')
    
    def export_selected(self):
        """–ê–ª–∏–∞—Å –¥–ª—è generate_selected"""
        self.generate_selected()
    
    def export_all(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        reply = QMessageBox.question(
            self, '–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö',
            f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å feature —Ñ–∞–π–ª—ã –¥–ª—è –≤—Å–µ—Ö {len(self.current_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤?',
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.No:
            return
        
        output_dir = QFileDialog.getExistingDirectory(
            self, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', ''
        )
        
        if not output_dir:
            return
        
        try:
            saved_files = FeatureGenerator.batch_generate(self.current_items, Path(output_dir))
            QMessageBox.information(
                self, '–£—Å–ø–µ—Ö',
                f'‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(saved_files)} feature —Ñ–∞–π–ª–æ–≤\n\n–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_dir}'
            )
        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:\n{e}')
    
    def closeEvent(self, event):
        self.session.close()
        event.accept()
