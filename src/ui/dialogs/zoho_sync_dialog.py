"""
Zoho Sync Dialog

–î–∏–∞–ª–æ–≥ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á –∏–∑ Zoho Projects –≤ VoluptAS
"""

from PyQt6.QtWidgets import *
from PyQt6.QtCore import Qt, QThread, pyqtSignal
from pathlib import Path
import logging

logger = logging.getLogger(__name__)


class SyncThread(QThread):
    """–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    finished = pyqtSignal(dict, str)  # stats, error_message
    progress = pyqtSignal(str)  # status message
    
    def __init__(self, sync_service, sync_type, params):
        super().__init__()
        self.sync_service = sync_service
        self.sync_type = sync_type
        self.params = params
    
    def run(self):
        try:
            if self.sync_type == 'milestone':
                self.progress.emit(f"üìã –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ milestone: {self.params['milestone_name']}")
                stats = self.sync_service.sync_tasks_by_milestone(self.params['milestone_name'])
                
            elif self.sync_type == 'tasklist':
                self.progress.emit(f"üìã –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ tasklist: {self.params['tasklist_name']}")
                stats = self.sync_service.sync_tasks_by_tasklist(self.params['tasklist_name'])
                
            elif self.sync_type == 'filter':
                self.progress.emit("üìã –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º")
                stats = self.sync_service.sync_tasks_by_filter(**self.params)
            
            else:
                stats = {'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏'}
            
            if 'error' in stats:
                self.finished.emit({}, stats['error'])
            else:
                self.finished.emit(stats, "")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            self.finished.emit({}, str(e))


class ZohoSyncDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á Zoho Projects"""
    
    def __init__(self, session, parent=None):
        super().__init__(parent)
        self.session = session
        self.sync_thread = None
        
        self.setWindowTitle('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Zoho Projects')
        self.setMinimumWidth(600)
        self.setMinimumHeight(500)
        
        self.init_ui()
    
    def init_ui(self):
        layout = QVBoxLayout(self)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_label = QLabel(
            'üîÑ <b>–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –∏–∑ Zoho Projects</b><br><br>'
            '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∑–∞–¥–∞—á–∏ –∏–∑ Zoho –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∏—Ö –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î VoluptAS.'
        )
        info_label.setWordWrap(True)
        layout.addWidget(info_label)
        
        # === –°–µ–∫—Ü–∏—è 1: –¢–∏–ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ===
        sync_type_group = QGroupBox('–¢–∏–ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏')
        sync_type_layout = QVBoxLayout(sync_type_group)
        
        self.sync_type_combo = QComboBox()
        self.sync_type_combo.addItems([
            '–ü–æ Milestone (—Å–ø—Ä–∏–Ω—Ç)',
            '–ü–æ Tasklist',
            '–ü–æ —Ñ–∏–ª—å—Ç—Ä–∞–º (–¥–∞—Ç—ã, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ)'
        ])
        self.sync_type_combo.currentTextChanged.connect(self.on_sync_type_changed)
        sync_type_layout.addWidget(self.sync_type_combo)
        
        layout.addWidget(sync_type_group)
        
        # === –°–µ–∫—Ü–∏—è 2: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ) ===
        self.params_group = QGroupBox('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã')
        self.params_layout = QFormLayout(self.params_group)
        
        # Milestone
        self.milestone_edit = QLineEdit()
        self.milestone_edit.setPlaceholderText('–ù–∞–ø—Ä–∏–º–µ—Ä: Sprint 24, v2.5')
        self.params_layout.addRow('* –ù–∞–∑–≤–∞–Ω–∏–µ Milestone:', self.milestone_edit)
        
        # Tasklist
        self.tasklist_edit = QLineEdit()
        self.tasklist_edit.setPlaceholderText('–ù–∞–ø—Ä–∏–º–µ—Ä: QA Testing, Development')
        self.params_layout.addRow('* –ù–∞–∑–≤–∞–Ω–∏–µ Tasklist:', self.tasklist_edit)
        
        # –§–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–∞–º
        self.date_start_edit = QLineEdit()
        self.date_start_edit.setPlaceholderText('YYYY-MM-DD')
        self.params_layout.addRow('–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:', self.date_start_edit)
        
        self.date_end_edit = QLineEdit()
        self.date_end_edit.setPlaceholderText('YYYY-MM-DD')
        self.params_layout.addRow('–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:', self.date_end_edit)
        
        # Owner ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        self.owner_id_edit = QLineEdit()
        self.owner_id_edit.setPlaceholderText('ID –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤ Zoho')
        self.params_layout.addRow('Owner ID:', self.owner_id_edit)
        
        layout.addWidget(self.params_group)
        
        # –°–∫—Ä—ã–≤–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.on_sync_type_changed(self.sync_type_combo.currentText())
        
        # === –ü—Ä–æ–≥—Ä–µ—Å—Å ===
        self.progress_label = QLabel('')
        self.progress_label.setStyleSheet('color: blue;')
        layout.addWidget(self.progress_label)
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.progress_bar.setRange(0, 0)  # –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        layout.addWidget(self.progress_bar)
        
        # === –ö–Ω–æ–ø–∫–∏ ===
        buttons = QDialogButtonBox()
        self.sync_btn = buttons.addButton('üöÄ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å', QDialogButtonBox.ButtonRole.AcceptRole)
        cancel_btn = buttons.addButton('–û—Ç–º–µ–Ω–∞', QDialogButtonBox.ButtonRole.RejectRole)
        
        self.sync_btn.clicked.connect(self.start_sync)
        cancel_btn.clicked.connect(self.reject)
        
        layout.addWidget(buttons)
    
    def on_sync_type_changed(self, sync_type):
        """–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã –∏–∑ FormLayout
        milestone_label = self.params_layout.labelForField(self.milestone_edit)
        tasklist_label = self.params_layout.labelForField(self.tasklist_edit)
        date_start_label = self.params_layout.labelForField(self.date_start_edit)
        date_end_label = self.params_layout.labelForField(self.date_end_edit)
        owner_label = self.params_layout.labelForField(self.owner_id_edit)
        
        if sync_type == '–ü–æ Milestone (—Å–ø—Ä–∏–Ω—Ç)':
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ milestone
            milestone_label.setVisible(True)
            self.milestone_edit.setVisible(True)
            
            tasklist_label.setVisible(False)
            self.tasklist_edit.setVisible(False)
            
            date_start_label.setVisible(False)
            self.date_start_edit.setVisible(False)
            
            date_end_label.setVisible(False)
            self.date_end_edit.setVisible(False)
            
            owner_label.setVisible(False)
            self.owner_id_edit.setVisible(False)
            
        elif sync_type == '–ü–æ Tasklist':
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ tasklist
            milestone_label.setVisible(False)
            self.milestone_edit.setVisible(False)
            
            tasklist_label.setVisible(True)
            self.tasklist_edit.setVisible(True)
            
            date_start_label.setVisible(False)
            self.date_start_edit.setVisible(False)
            
            date_end_label.setVisible(False)
            self.date_end_edit.setVisible(False)
            
            owner_label.setVisible(False)
            self.owner_id_edit.setVisible(False)
            
        elif sync_type == '–ü–æ —Ñ–∏–ª—å—Ç—Ä–∞–º (–¥–∞—Ç—ã, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ)':
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            milestone_label.setVisible(False)
            self.milestone_edit.setVisible(False)
            
            tasklist_label.setVisible(False)
            self.tasklist_edit.setVisible(False)
            
            date_start_label.setVisible(True)
            self.date_start_edit.setVisible(True)
            
            date_end_label.setVisible(True)
            self.date_end_edit.setVisible(True)
            
            owner_label.setVisible(True)
            self.owner_id_edit.setVisible(True)
    
    def start_sync(self):
        """–ù–∞—á–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
        sync_type_map = {
            '–ü–æ Milestone (—Å–ø—Ä–∏–Ω—Ç)': 'milestone',
            '–ü–æ Tasklist': 'tasklist',
            '–ü–æ —Ñ–∏–ª—å—Ç—Ä–∞–º (–¥–∞—Ç—ã, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ)': 'filter'
        }
        
        sync_type = sync_type_map[self.sync_type_combo.currentText()]
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params = {}
        
        if sync_type == 'milestone':
            milestone_name = self.milestone_edit.text().strip()
            if not milestone_name:
                QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ Milestone')
                return
            params['milestone_name'] = milestone_name
            
        elif sync_type == 'tasklist':
            tasklist_name = self.tasklist_edit.text().strip()
            if not tasklist_name:
                QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ Tasklist')
                return
            params['tasklist_name'] = tasklist_name
            
        elif sync_type == 'filter':
            params['created_after'] = self.date_start_edit.text().strip() or None
            params['created_before'] = self.date_end_edit.text().strip() or None
            params['owner_id'] = self.owner_id_edit.text().strip() or None
            
            if not any([params['created_after'], params['created_before'], params['owner_id']]):
                QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä')
                return
        
        # –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å
        try:
            from src.services.ZohoSyncService import ZohoSyncService
            sync_service = ZohoSyncService(self.session)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Zoho
            if not sync_service.init_zoho_client():
                QMessageBox.critical(
                    self, 
                    '–û—à–∏–±–∫–∞', 
                    '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Zoho API.\n\n'
                    '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ credentials/zoho.env'
                )
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
            self.sync_btn.setEnabled(False)
            self.progress_bar.setVisible(True)
            self.progress_label.setText('üöÄ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞...')
            
            self.sync_thread = SyncThread(sync_service, sync_type, params)
            self.sync_thread.progress.connect(self.on_progress)
            self.sync_thread.finished.connect(self.on_sync_finished)
            self.sync_thread.start()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é:\n{e}')
            self.sync_btn.setEnabled(True)
            self.progress_bar.setVisible(False)
    
    def on_progress(self, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_label.setText(message)
        logger.info(message)
    
    def on_sync_finished(self, stats, error):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        self.sync_btn.setEnabled(True)
        self.progress_bar.setVisible(False)
        
        if error:
            self.progress_label.setText(f'‚ùå –û—à–∏–±–∫–∞: {error}')
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å:\n\n{error}')
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            msg = f"""‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!

‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞–¥–∞—á: {stats.get('new', 0)}
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {stats.get('updated', 0)}
‚Ä¢ –û—à–∏–±–æ–∫: {stats.get('errors', 0)}

–ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î VoluptAS."""
            
            self.progress_label.setText('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
            QMessageBox.information(self, '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', msg)
            self.accept()
