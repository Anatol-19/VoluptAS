"""
Google Sheets Export Dialog

–î–∏–∞–ª–æ–≥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö VoluptAS –≤ Google Sheets
"""

from PyQt6.QtWidgets import *
from PyQt6.QtCore import Qt, QThread, pyqtSignal
from pathlib import Path
import logging

logger = logging.getLogger(__name__)


class ExportThread(QThread):
    """–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    finished = pyqtSignal(dict, str)  # stats, error_message
    progress = pyqtSignal(str)  # status message
    
    def __init__(self, exporter, spreadsheet_id, export_type, filters=None):
        super().__init__()
        self.exporter = exporter
        self.spreadsheet_id = spreadsheet_id
        self.export_type = export_type
        self.filters = filters or {}
    
    def run(self):
        try:
            if self.export_type == 'all_tables':
                self.progress.emit("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...")
                stats = self.exporter.export_all_tables(self.spreadsheet_id, self.filters)
                self.finished.emit(stats, "")
                
            elif self.export_type == 'coverage_matrix':
                self.progress.emit("üìã –≠–∫—Å–ø–æ—Ä—Ç –º–∞—Ç—Ä–∏—Ü—ã –ø–æ–∫—Ä—ã—Ç–∏—è...")
                count = self.exporter.export_coverage_matrix(self.spreadsheet_id)
                self.finished.emit({'coverage': count}, "")
                
            elif self.export_type == 'raci_matrix':
                self.progress.emit("üë• –≠–∫—Å–ø–æ—Ä—Ç RACI –º–∞—Ç—Ä–∏—Ü—ã...")
                count = self.exporter.export_raci_matrix(self.spreadsheet_id)
                self.finished.emit({'raci': count}, "")
                
            elif self.export_type == 'test_plan':
                self.progress.emit("üìù –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ—Å—Ç-–ø–ª–∞–Ω–∞...")
                count = self.exporter.export_test_plan(
                    self.spreadsheet_id, 
                    "Test Plan", 
                    self.filters
                )
                self.finished.emit({'test_plan': count}, "")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            self.finished.emit({}, str(e))


class GoogleExportDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Google Sheets"""
    
    def __init__(self, session, parent=None):
        super().__init__(parent)
        self.session = session
        self.export_thread = None
        
        self.setWindowTitle('–≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets')
        self.setMinimumWidth(600)
        self.setMinimumHeight(700)
        
        self.init_ui()
    
    def init_ui(self):
        layout = QVBoxLayout(self)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_label = QLabel(
            'üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö VoluptAS –≤ Google Sheets</b><br><br>'
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.'
        )
        info_label.setWordWrap(True)
        layout.addWidget(info_label)
        
        # === –°–µ–∫—Ü–∏—è 1: Google Sheets –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
        gs_group = QGroupBox('Google Sheets')
        gs_layout = QFormLayout(gs_group)
        
        # Service Account JSON
        self.credentials_path_edit = QLineEdit()
        project_root = Path(__file__).resolve().parent.parent.parent.parent
        default_creds = project_root / 'credentials' / 'service_account.json'
        self.credentials_path_edit.setText(str(default_creds))
        
        creds_btn = QPushButton('üìÇ –í—ã–±—Ä–∞—Ç—å')
        creds_btn.clicked.connect(self.select_credentials)
        creds_layout = QHBoxLayout()
        creds_layout.addWidget(self.credentials_path_edit)
        creds_layout.addWidget(creds_btn)
        gs_layout.addRow('Service Account:', creds_layout)
        
        # Spreadsheet ID
        self.spreadsheet_id_edit = QLineEdit()
        self.spreadsheet_id_edit.setPlaceholderText('1Abc...XYZ (ID –∏–∑ URL —Ç–∞–±–ª–∏—Ü—ã)')
        gs_layout.addRow('* Spreadsheet ID:', self.spreadsheet_id_edit)
        
        hint = QLabel('<i>ID –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ URL: docs.google.com/spreadsheets/d/<b>ID</b>/edit</i>')
        hint.setWordWrap(True)
        hint.setStyleSheet('color: gray; font-size: 9pt;')
        gs_layout.addRow('', hint)
        
        layout.addWidget(gs_group)
        
        # === –°–µ–∫—Ü–∏—è 2: –¢–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞ ===
        export_group = QGroupBox('–¢–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞')
        export_layout = QVBoxLayout(export_group)
        
        self.export_type_combo = QComboBox()
        self.export_type_combo.addItems([
            '–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ë–î',
            '–ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ–∫—Ä—ã—Ç–∏—è',
            'RACI –º–∞—Ç—Ä–∏—Ü–∞',
            '–¢–µ—Å—Ç-–ø–ª–∞–Ω (—Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏)'
        ])
        self.export_type_combo.currentTextChanged.connect(self.on_export_type_changed)
        export_layout.addWidget(self.export_type_combo)
        
        layout.addWidget(export_group)
        
        # === –°–µ–∫—Ü–∏—è 3: –§–∏–ª—å—Ç—Ä—ã ===
        self.filters_group = QGroupBox('–§–∏–ª—å—Ç—Ä—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')
        filters_layout = QFormLayout(self.filters_group)
        
        # –¢–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.types_list = QListWidget()
        self.types_list.setSelectionMode(QListWidget.SelectionMode.MultiSelection)
        self.types_list.setMaximumHeight(120)
        for t in ['Module', 'Epic', 'Feature', 'Story', 'Page', 'Element', 'Service']:
            self.types_list.addItem(t)
        filters_layout.addRow('–¢–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', self.types_list)
        
        # –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ
        self.crit_check = QCheckBox('–¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª (isCrit)')
        filters_layout.addRow('', self.crit_check)
        
        # –¢–æ–ª—å–∫–æ —Ñ–æ–∫—É—Å–Ω—ã–µ
        self.focus_check = QCheckBox('–¢–æ–ª—å–∫–æ —Ñ–æ–∫—É—Å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª (isFocus)')
        filters_layout.addRow('', self.focus_check)
        
        # –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ QA
        self.qa_list = QListWidget()
        self.qa_list.setSelectionMode(QListWidget.SelectionMode.MultiSelection)
        self.qa_list.setMaximumHeight(100)
        self.load_qa_users()
        filters_layout.addRow('–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ QA:', self.qa_list)
        
        layout.addWidget(self.filters_group)
        
        # === –ü—Ä–æ–≥—Ä–µ—Å—Å ===
        self.progress_label = QLabel('')
        self.progress_label.setStyleSheet('color: blue;')
        layout.addWidget(self.progress_label)
        
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        self.progress_bar.setRange(0, 0)  # –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        layout.addWidget(self.progress_bar)
        
        # === –ö–Ω–æ–ø–∫–∏ ===
        buttons = QDialogButtonBox()
        self.export_btn = buttons.addButton('üöÄ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å', QDialogButtonBox.ButtonRole.AcceptRole)
        cancel_btn = buttons.addButton('–û—Ç–º–µ–Ω–∞', QDialogButtonBox.ButtonRole.RejectRole)
        
        self.export_btn.clicked.connect(self.start_export)
        cancel_btn.clicked.connect(self.reject)
        
        layout.addWidget(buttons)
        
        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.on_export_type_changed(self.export_type_combo.currentText())
    
    def select_credentials(self):
        """–í—ã–±–æ—Ä service_account.json"""
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            '–í—ã–±–µ—Ä–∏—Ç–µ service_account.json',
            '',
            'JSON Files (*.json);;All Files (*)'
        )
        if file_path:
            self.credentials_path_edit.setText(file_path)
    
    def load_qa_users(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ QA –∏–∑ –ë–î"""
        from src.models import User
        
        try:
            qa_users = self.session.query(User).filter(
                User.is_active == True,
                User.role.like('%QA%')
            ).all()
            
            for user in qa_users:
                item = QListWidgetItem(user.name)
                item.setData(Qt.ItemDataRole.UserRole, user.id)
                self.qa_list.addItem(item)
                
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å QA: {e}")
    
    def on_export_type_changed(self, export_type):
        """–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        # –§–∏–ª—å—Ç—Ä—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã –¥–ª—è "–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã" –∏ "–¢–µ—Å—Ç-–ø–ª–∞–Ω"
        show_filters = export_type in ['–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ë–î', '–¢–µ—Å—Ç-–ø–ª–∞–Ω (—Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏)']
        self.filters_group.setVisible(show_filters)
    
    def get_filters(self):
        """–°–æ–±—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ UI"""
        filters = {}
        
        # –¢–∏–ø—ã
        selected_types = [item.text() for item in self.types_list.selectedItems()]
        if selected_types:
            filters['type'] = selected_types
        
        # isCrit / isFocus
        if self.crit_check.isChecked():
            filters['is_crit'] = True
        if self.focus_check.isChecked():
            filters['is_focus'] = True
        
        # QA
        selected_qa = [item.data(Qt.ItemDataRole.UserRole) for item in self.qa_list.selectedItems()]
        if selected_qa:
            filters['responsible_qa_id'] = selected_qa
        
        return filters
    
    def start_export(self):
        """–ù–∞—á–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç"""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        credentials_path = self.credentials_path_edit.text().strip()
        spreadsheet_id = self.spreadsheet_id_edit.text().strip()
        
        if not credentials_path or not Path(credentials_path).exists():
            QMessageBox.warning(
                self, 
                '–û—à–∏–±–∫–∞', 
                '–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å –∫ service_account.json'
            )
            return
        
        if not spreadsheet_id:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–£–∫–∞–∂–∏—Ç–µ Spreadsheet ID')
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_type_map = {
            '–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ë–î': 'all_tables',
            '–ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ–∫—Ä—ã—Ç–∏—è': 'coverage_matrix',
            'RACI –º–∞—Ç—Ä–∏—Ü–∞': 'raci_matrix',
            '–¢–µ—Å—Ç-–ø–ª–∞–Ω (—Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏)': 'test_plan'
        }
        export_type = export_type_map[self.export_type_combo.currentText()]
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filters = self.get_filters()
        
        # –°–æ–∑–¥–∞—ë–º —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
        try:
            from src.services.GoogleSheetsExporter import GoogleSheetsExporter
            exporter = GoogleSheetsExporter(credentials_path, self.session)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
            self.export_btn.setEnabled(False)
            self.progress_bar.setVisible(True)
            self.progress_label.setText('üöÄ –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—á–∞—Ç...')
            
            self.export_thread = ExportThread(exporter, spreadsheet_id, export_type, filters)
            self.export_thread.progress.connect(self.on_progress)
            self.export_thread.finished.connect(self.on_export_finished)
            self.export_thread.start()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç:\n{e}')
            self.export_btn.setEnabled(True)
            self.progress_bar.setVisible(False)
    
    def on_progress(self, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_label.setText(message)
        logger.info(message)
    
    def on_export_finished(self, stats, error):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        self.export_btn.setEnabled(True)
        self.progress_bar.setVisible(False)
        
        if error:
            self.progress_label.setText(f'‚ùå –û—à–∏–±–∫–∞: {error}')
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:\n\n{error}')
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            msg_parts = ['‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!\n']
            for key, value in stats.items():
                if key != 'errors':
                    msg_parts.append(f'‚Ä¢ {key}: {value}')
            
            msg = '\n'.join(msg_parts)
            self.progress_label.setText('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!')
            
            # –î–∏–∞–ª–æ–≥ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
            result = QMessageBox.information(
                self,
                '–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω',
                msg + '\n\n–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ?',
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )
            
            if result == QMessageBox.StandardButton.Yes:
                import webbrowser
                spreadsheet_id = self.spreadsheet_id_edit.text().strip()
                url = f'https://docs.google.com/spreadsheets/d/{spreadsheet_id}/edit'
                webbrowser.open(url)
            
            self.accept()
