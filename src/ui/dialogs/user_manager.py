"""
User Manager - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

–û–∫–Ω–æ –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Zoho
"""

from PyQt6.QtWidgets import *
from PyQt6.QtCore import Qt, QThread, pyqtSignal
from PyQt6.QtGui import QAction
from src.db import SessionLocal
from src.models import User
from src.integrations.zoho.Zoho_api_client import ZohoAPI
from src.utils.smart_merge import MergeStrategy


class ZohoSyncThread(QThread):
    """–ü–æ—Ç–æ–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Zoho –≤ —Ñ–æ–Ω–µ"""
    finished = pyqtSignal(list, str)  # users, error_message
    
    def run(self):
        try:
            client = ZohoAPI()
            users_data = client.get_users()
            self.finished.emit(users_data, "")
        except Exception as e:
            self.finished.emit([], str(e))


class UserEditDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    POSITIONS = [
        '',
        'QA Engineer',
        'QA Team Lead',
        'QA Tech Lead',
        'Frontend Developer',
        'Frontend Lead',
        'Backend Tech Developer',
        'Backend Tech Lead',
        'DevOps Engineer',
        'Project Manager',
        'Product Owner',
        'Business Analyst',
        'Designer',
        'Content Manager',
        'Other'
    ]
    
    def __init__(self, user=None, parent=None):
        super().__init__(parent)
        self.user = user if user else User()
        self.is_new = user is None
        self.setWindowTitle('–ù–æ–≤—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫' if self.is_new else f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {user.name}')
        self.setMinimumWidth(500)
        self.init_ui()
    
    def init_ui(self):
        layout = QFormLayout(self)
        
        # –ü–æ–ª—è
        self.name_edit = QLineEdit(self.user.name or '')
        
        # –î–æ–ª–∂–Ω–æ—Å—Ç—å - –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.position_combo = QComboBox()
        self.position_combo.setEditable(True)
        self.position_combo.addItems(self.POSITIONS)
        if self.user.position:
            self.position_combo.setCurrentText(self.user.position)
        self.email_edit = QLineEdit(self.user.email or '')
        self.zoho_id_edit = QLineEdit(self.user.zoho_id or '')
        self.github_edit = QLineEdit(self.user.github_username or '')
        self.is_active_check = QCheckBox()
        self.is_active_check.setChecked(bool(self.user.is_active if hasattr(self.user, 'is_active') else 1))
        self.notes_edit = QTextEdit(self.user.notes or '')
        self.notes_edit.setMaximumHeight(80)
        
        layout.addRow('* –ò–º—è:', self.name_edit)
        layout.addRow('–î–æ–ª–∂–Ω–æ—Å—Ç—å:', self.position_combo)
        layout.addRow('Email:', self.email_edit)
        layout.addRow('Zoho ID:', self.zoho_id_edit)
        layout.addRow('GitHub:', self.github_edit)
        layout.addRow('–ê–∫—Ç–∏–≤–µ–Ω:', self.is_active_check)
        layout.addRow('–ó–∞–º–µ—Ç–∫–∏:', self.notes_edit)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons = QDialogButtonBox(QDialogButtonBox.StandardButton.Save | QDialogButtonBox.StandardButton.Cancel)
        buttons.accepted.connect(self.save)
        buttons.rejected.connect(self.reject)
        layout.addRow(buttons)
    
    def save(self):
        name = self.name_edit.text().strip()
        if not name:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è')
            return
        
        self.user.name = name
        self.user.position = self.position_combo.currentText().strip() or None
        self.user.email = self.email_edit.text().strip() or None
        self.user.zoho_id = self.zoho_id_edit.text().strip() or None
        self.user.github_username = self.github_edit.text().strip() or None
        self.user.is_active = 1 if self.is_active_check.isChecked() else 0
        self.user.notes = self.notes_edit.toPlainText().strip() or None
        
        self.accept()


class UserManagerWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.session = SessionLocal()
        self.current_users = []
        self.sync_thread = None
        self.init_ui()
        self.load_users()
    
    def init_ui(self):
        self.setWindowTitle('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏')
        self.setGeometry(200, 200, 1000, 600)
        
        # –ú–µ–Ω—é
        menubar = self.menuBar()
        file_menu = menubar.addMenu('–§–∞–π–ª')
        close_action = QAction('–ó–∞–∫—Ä—ã—Ç—å', self)
        close_action.triggered.connect(self.close)
        file_menu.addAction(close_action)
        
        # –¢—É–ª–±–∞—Ä
        toolbar = QToolBar('–ì–ª–∞–≤–Ω–∞—è')
        toolbar.setMovable(False)
        self.addToolBar(toolbar)
        
        refresh_action = QAction('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', self)
        refresh_action.triggered.connect(self.load_users)
        toolbar.addAction(refresh_action)
        
        add_action = QAction('‚ûï –î–æ–±–∞–≤–∏—Ç—å', self)
        add_action.triggered.connect(self.add_user)
        toolbar.addAction(add_action)
        
        edit_action = QAction('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', self)
        edit_action.triggered.connect(self.edit_user)
        toolbar.addAction(edit_action)
        
        delete_action = QAction('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', self)
        delete_action.triggered.connect(self.delete_user)
        toolbar.addAction(delete_action)
        
        toolbar.addSeparator()
        
        export_action = QAction('üì• –≠–∫—Å–ø–æ—Ä—Ç –∏–∑ Zoho', self)
        export_action.triggered.connect(self.export_from_zoho)
        toolbar.addAction(export_action)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        
        # –ü–æ–∏—Å–∫
        search_layout = QHBoxLayout()
        search_layout.addWidget(QLabel('üîç –ü–æ–∏—Å–∫:'))
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText('–ò–º—è, –¥–æ–ª–∂–Ω–æ—Å—Ç—å, email...')
        self.search_input.textChanged.connect(self.filter_table)
        search_layout.addWidget(self.search_input)
        layout.addLayout(search_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞
        self.table = QTableWidget()
        self.table.setColumnCount(7)
        self.table.setHorizontalHeaderLabels(['ID', '–ò–º—è', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', 'Email', 'Zoho ID', 'GitHub', '–ê–∫—Ç–∏–≤–µ–Ω'])
        self.table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)
        self.table.setEditTriggers(QTableWidget.EditTrigger.NoEditTriggers)
        self.table.doubleClicked.connect(self.edit_user)
        self.table.hideColumn(0)  # –°–∫—Ä—ã—Ç—å ID
        layout.addWidget(self.table)
        
        # –°—Ç–∞—Ç—É—Å-–±–∞—Ä
        self.statusBar().showMessage('–ì–æ—Ç–æ–≤')
    
    def load_users(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î"""
        self.current_users = self.session.query(User).order_by(User.name).all()
        self.populate_table(self.current_users)
        self.statusBar().showMessage(f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(self.current_users)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤')
    
    def populate_table(self, users):
        """–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–∞–Ω–Ω—ã–º–∏"""
        self.table.setRowCount(len(users))
        for row_idx, user in enumerate(users):
            self.table.setItem(row_idx, 0, QTableWidgetItem(str(user.id)))
            self.table.setItem(row_idx, 1, QTableWidgetItem(user.name or ''))
            self.table.setItem(row_idx, 2, QTableWidgetItem(user.position or ''))
            self.table.setItem(row_idx, 3, QTableWidgetItem(user.email or ''))
            self.table.setItem(row_idx, 4, QTableWidgetItem(user.zoho_id or ''))
            self.table.setItem(row_idx, 5, QTableWidgetItem(user.github_username or ''))
            self.table.setItem(row_idx, 6, QTableWidgetItem('‚úì' if user.is_active else ''))
        self.table.resizeColumnsToContents()
    
    def filter_table(self):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–æ –ø–æ–∏—Å–∫—É"""
        search_text = self.search_input.text().lower()
        for row in range(self.table.rowCount()):
            match = any(
                self.table.item(row, col) and search_text in self.table.item(row, col).text().lower()
                for col in range(self.table.columnCount())
            )
            self.table.setRowHidden(row, not match)
    
    def add_user(self):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        dialog = UserEditDialog(parent=self)
        if dialog.exec():
            try:
                self.session.add(dialog.user)
                self.session.commit()
                self.load_users()
                self.statusBar().showMessage(f'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {dialog.user.name}')
            except Exception as e:
                self.session.rollback()
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å:\n{e}')
    
    def edit_user(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        selected = self.table.currentRow()
        if selected < 0:
            QMessageBox.warning(self, '–í–Ω–∏–º–∞–Ω–∏–µ', '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
            return
        
        user = self.current_users[selected]
        dialog = UserEditDialog(user, self)
        if dialog.exec():
            try:
                self.session.commit()
                self.load_users()
                self.statusBar().showMessage(f'‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {user.name}')
            except Exception as e:
                self.session.rollback()
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:\n{e}')
    
    def delete_user(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        selected = self.table.currentRow()
        if selected < 0:
            QMessageBox.warning(self, '–í–Ω–∏–º–∞–Ω–∏–µ', '–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')
            return
        
        user = self.current_users[selected]
        reply = QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            f'–£–¥–∞–ª–∏—Ç—å:\n{user.name}?',
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        if reply == QMessageBox.StandardButton.Yes:
            try:
                self.session.delete(user)
                self.session.commit()
                self.load_users()
                self.statusBar().showMessage(f'‚úÖ –£–¥–∞–ª—ë–Ω: {user.name}')
            except Exception as e:
                self.session.rollback()
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å:\n{e}')
    
    def export_from_zoho(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Zoho"""
        reply = QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Zoho?\n\n'
            '–£–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã.\n'
            '–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.',
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        if reply != QMessageBox.StandardButton.Yes:
            return
        
        self.statusBar().showMessage('üì• –≠–∫—Å–ø–æ—Ä—Ç –∏–∑ Zoho...')
        self.sync_thread = ZohoSyncThread()
        self.sync_thread.finished.connect(self.on_sync_finished)
        self.sync_thread.start()
    
    def on_sync_finished(self, users_data, error):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        if error:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ Zoho:\n{error}')
            self.statusBar().showMessage('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞')
            return
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        added_count = 0
        updated_count = 0
        
        for user_data in users_data:
            try:
                # –ò—â–µ–º –ø–æ zoho_id
                existing = self.session.query(User).filter_by(zoho_id=user_data.get('id')).first()
                
                if existing:
                    # –£–º–Ω–æ–µ —Å–ª–∏—è–Ω–∏–µ
                    merge_fields = MergeStrategy.merge_user(existing, user_data)
                    for field, value in merge_fields.items():
                        setattr(existing, field, value)
                    updated_count += 1
                else:
                    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ
                    new_user = User(
                        name=user_data.get('name', f'User {user_data.get("id")}'),
                        email=user_data.get('email'),
                        position=user_data.get('position'),
                        zoho_id=user_data.get('id'),
                        is_active=1
                    )
                    self.session.add(new_user)
                    added_count += 1
                
                self.session.commit()
            except Exception as e:
                self.session.rollback()
                print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data}: {e}')
        
        self.load_users()
        message = f'‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_count}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count}'
        self.statusBar().showMessage(message)
        QMessageBox.information(self, '–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω', message)
    
    def closeEvent(self, event):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞"""
        if self.sync_thread and self.sync_thread.isRunning():
            reply = QMessageBox.question(
                self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
                '–≠–∫—Å–ø–æ—Ä—Ç –µ—â—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –í—Å—ë —Ä–∞–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç—å?',
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )
            if reply != QMessageBox.StandardButton.Yes:
                event.ignore()
                return
            self.sync_thread.terminate()
        
        self.session.close()
        event.accept()
