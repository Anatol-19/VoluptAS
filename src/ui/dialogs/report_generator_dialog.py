"""
Report Generator Dialog

–î–∏–∞–ª–æ–≥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤ —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö
"""

from PyQt6.QtWidgets import *
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QFont
from pathlib import Path
import logging

logger = logging.getLogger(__name__)


class ReportGeneratorDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞"""
    
    def __init__(self, session, parent=None):
        super().__init__(parent)
        self.session = session
        self.generated_content = None
        
        self.setWindowTitle('–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á—ë—Ç–æ–≤')
        self.setMinimumWidth(1000)
        self.setMinimumHeight(700)
        
        self.init_ui()
        self.load_templates()
    
    def init_ui(self):
        layout = QVBoxLayout(self)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_label = QLabel(
            'üìä <b>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á—ë—Ç–æ–≤ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤</b><br>'
            '–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω, —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –æ—Ç—á—ë—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î.'
        )
        info_label.setWordWrap(True)
        layout.addWidget(info_label)
        
        # === –°–µ–∫—Ü–∏—è 1: –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ ===
        template_group = QGroupBox('–®–∞–±–ª–æ–Ω –æ—Ç—á—ë—Ç–∞')
        template_layout = QFormLayout(template_group)
        
        self.template_combo = QComboBox()
        self.template_combo.currentIndexChanged.connect(self.on_template_changed)
        template_layout.addRow('* –®–∞–±–ª–æ–Ω:', self.template_combo)
        
        self.template_desc_label = QLabel()
        self.template_desc_label.setStyleSheet('color: gray; font-style: italic;')
        self.template_desc_label.setWordWrap(True)
        template_layout.addRow('', self.template_desc_label)
        
        layout.addWidget(template_group)
        
        # === –°–µ–∫—Ü–∏—è 2: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ===
        params_group = QGroupBox('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
        params_layout = QFormLayout(params_group)
        
        # Milestone (–¥–ª—è Zoho –∑–∞–¥–∞—á)
        self.milestone_edit = QLineEdit()
        self.milestone_edit.setPlaceholderText('–ù–∞–ø—Ä–∏–º–µ—Ä: Sprint 24, v2.5')
        params_layout.addRow('Milestone (Zoho):', self.milestone_edit)
        
        # –¢–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.types_list = QListWidget()
        self.types_list.setSelectionMode(QListWidget.SelectionMode.MultiSelection)
        self.types_list.setMaximumHeight(100)
        for t in ['Module', 'Epic', 'Feature', 'Story', 'Page', 'Element', 'Service']:
            self.types_list.addItem(t)
        params_layout.addRow('–¢–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', self.types_list)
        
        # –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ/—Ñ–æ–∫—É—Å–Ω—ã–µ
        filters_layout = QHBoxLayout()
        self.crit_check = QCheckBox('–¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ')
        self.focus_check = QCheckBox('–¢–æ–ª—å–∫–æ —Ñ–æ–∫—É—Å–Ω—ã–µ')
        filters_layout.addWidget(self.crit_check)
        filters_layout.addWidget(self.focus_check)
        filters_layout.addStretch()
        params_layout.addRow('–§–∏–ª—å—Ç—Ä—ã:', filters_layout)
        
        # QA –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π
        self.qa_combo = QComboBox()
        self.qa_combo.addItem('–í—Å–µ QA', None)
        self.load_qa_users()
        params_layout.addRow('–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π QA:', self.qa_combo)
        
        layout.addWidget(params_group)
        
        # === –°–µ–∫—Ü–∏—è 3: –†–µ–∑—É–ª—å—Ç–∞—Ç (Preview) ===
        result_label = QLabel('<b>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç:</b>')
        layout.addWidget(result_label)
        
        self.result_text = QTextEdit()
        self.result_text.setFont(QFont('Consolas', 9))
        self.result_text.setReadOnly(True)
        self.result_text.setPlaceholderText('–ù–∞–∂–º–∏—Ç–µ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞...')
        layout.addWidget(self.result_text)
        
        # === –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π ===
        buttons_layout = QHBoxLayout()
        
        generate_btn = QPushButton('üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å')
        generate_btn.clicked.connect(self.generate_report)
        buttons_layout.addWidget(generate_btn)
        
        save_btn = QPushButton('üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª')
        save_btn.clicked.connect(self.save_to_file)
        buttons_layout.addWidget(save_btn)
        
        buttons_layout.addStretch()
        
        close_btn = QPushButton('–ó–∞–∫—Ä—ã—Ç—å')
        close_btn.clicked.connect(self.accept)
        buttons_layout.addWidget(close_btn)
        
        layout.addLayout(buttons_layout)
    
    def load_templates(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
        from src.models.report_template import ReportTemplate
        
        templates = self.session.query(ReportTemplate).filter_by(is_active=True).all()
        
        self.template_combo.clear()
        for template in templates:
            self.template_combo.addItem(template.name, template.id)
        
        if not templates:
            QMessageBox.information(
                self, 
                '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 
                '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤.\n\n–°–æ–∑–¥–∞–π—Ç–µ —à–∞–±–ª–æ–Ω –≤ –º–µ–Ω—é "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ‚Üí –®–∞–±–ª–æ–Ω—ã –æ—Ç—á—ë—Ç–æ–≤"'
            )
    
    def load_qa_users(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ QA"""
        from src.models import User
        
        qa_users = self.session.query(User).filter(
            User.is_active == True,
            User.role.like('%QA%')
        ).all()
        
        for user in qa_users:
            self.qa_combo.addItem(user.name, user.id)
    
    def on_template_changed(self, index):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —à–∞–±–ª–æ–Ω–∞"""
        if index < 0:
            return
        
        from src.models.report_template import ReportTemplate
        
        template_id = self.template_combo.currentData()
        if template_id:
            template = self.session.query(ReportTemplate).get(template_id)
            if template:
                desc = template.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'
                self.template_desc_label.setText(f'üìù {desc}')
    
    def get_filters(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ UI"""
        filters = {}
        
        # Milestone
        milestone = self.milestone_edit.text().strip()
        if milestone:
            filters['milestone_name'] = milestone
        
        # –¢–∏–ø—ã
        selected_types = [item.text() for item in self.types_list.selectedItems()]
        if selected_types:
            filters['type'] = selected_types
        
        # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ/–§–æ–∫—É—Å–Ω—ã–µ
        if self.crit_check.isChecked():
            filters['is_crit'] = True
        if self.focus_check.isChecked():
            filters['is_focus'] = True
        
        # QA
        qa_id = self.qa_combo.currentData()
        if qa_id:
            filters['responsible_qa_id'] = qa_id
        
        return filters
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞"""
        template_id = self.template_combo.currentData()
        if not template_id:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω')
            return
        
        try:
            from src.services.ReportGenerator import ReportGenerator
            
            # –°–æ–∑–¥–∞—ë–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            generator = ReportGenerator(self.session)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            filters = self.get_filters()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
            self.result_text.setPlainText('‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞...')
            QApplication.processEvents()
            
            self.generated_content = generator.generate_report(template_id, filters=filters)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.result_text.setPlainText(self.generated_content)
            
            QMessageBox.information(
                self, 
                '–£—Å–ø–µ—Ö', 
                f'‚úÖ –û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!\n\n–°–∏–º–≤–æ–ª–æ–≤: {len(self.generated_content)}'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç:\n\n{e}')
    
    def save_to_file(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –≤ —Ñ–∞–π–ª"""
        if not self.generated_content:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –æ—Ç—á—ë—Ç')
            return
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        template_name = self.template_combo.currentText()
        date_str = datetime.now().strftime('%Y-%m-%d')
        default_filename = f"{template_name}_{date_str}.md"
        
        from datetime import datetime
        
        file_path, _ = QFileDialog.getSaveFileName(
            self,
            '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç',
            default_filename,
            'Markdown Files (*.md);;Text Files (*.txt);;All Files (*)'
        )
        
        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(self.generated_content)
                
                QMessageBox.information(self, '–£—Å–ø–µ—Ö', f'‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{file_path}')
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:\n{e}')
