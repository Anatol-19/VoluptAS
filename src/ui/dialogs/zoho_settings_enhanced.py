"""
Enhanced Zoho Settings Dialog - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ API

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ Authorization Code
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Access Token
- –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º
- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""
from PyQt6.QtWidgets import *
from PyQt6.QtCore import Qt, QThread, pyqtSignal
import os
import shutil
from pathlib import Path


class TokenFetchThread(QThread):
    """–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤"""
    finished = pyqtSignal(dict, str)  # result, error_message
    
    def __init__(self, client_id, client_secret, auth_code, redirect_uri):
        super().__init__()
        self.client_id = client_id
        self.client_secret = client_secret
        self.auth_code = auth_code
        self.redirect_uri = redirect_uri
    
    def run(self):
        try:
            import requests
            url = "https://accounts.zoho.com/oauth/v2/token"
            params = {
                "client_id": self.client_id,
                "client_secret": self.client_secret,
                "grant_type": "authorization_code",
                "code": self.auth_code,
                "redirect_uri": self.redirect_uri
            }
            response = requests.post(url, data=params)
            response.raise_for_status()
            self.finished.emit(response.json(), "")
        except Exception as e:
            self.finished.emit({}, str(e))


class ProjectsFetchThread(QThread):
    """–§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    finished = pyqtSignal(list, str)  # projects, error_message
    
    def __init__(self, access_token, portal_name, region):
        super().__init__()
        self.access_token = access_token
        self.portal_name = portal_name
        self.region = region
    
    def run(self):
        try:
            import requests
            domains = {
                "com": "projectsapi.zoho.com",
                "eu": "projectsapi.zoho.eu",
                "in": "projectsapi.zoho.in",
                "cn": "projectsapi.zoho.com.cn"
            }
            domain = domains.get(self.region, domains["com"])
            url = f"https://{domain}/restapi/portal/{self.portal_name}/projects/"
            headers = {"Authorization": f"Zoho-oauthtoken {self.access_token}"}
            
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            projects = response.json().get("projects", [])
            self.finished.emit(projects, "")
        except Exception as e:
            self.finished.emit([], str(e))


class ZohoSettingsDialog(QDialog):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Zoho API"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Zoho API')
        self.setMinimumWidth(700)
        self.setMinimumHeight(700)
        
        # –ü—É—Ç—å –∫ credentials
        self.project_root = Path(__file__).resolve().parent.parent.parent.parent
        self.env_path = self.project_root / 'credentials' / 'zoho.env'
        
        # –ü–æ—Ç–æ–∫–∏ –¥–ª—è —Ñ–æ–Ω–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self.token_thread = None
        self.projects_thread = None
        
        self.init_ui()
        self.load_credentials()
    
    def init_ui(self):
        layout = QVBoxLayout(self)
        
        # === TABS ===
        tabs = QTabWidget()
        
        # Tab 1: Credentials
        creds_tab = QWidget()
        creds_layout = QVBoxLayout(creds_tab)
        
        # –ò–Ω—Ñ–æ
        info_label = QLabel(
            '‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Zoho Projects</b><br><br>'
            '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Zoho Projects API.<br>'
            '<font color="red">‚ö†Ô∏è –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö!</font>'
        )
        info_label.setWordWrap(True)
        creds_layout.addWidget(info_label)
        
        # –§–æ—Ä–º–∞ credentials
        form = QFormLayout()
        
        # Client ID
        self.client_id_edit = QLineEdit()
        self.client_id_edit.setPlaceholderText('1000.XXXXXXXXXX...')
        form.addRow('* Client ID:', self.client_id_edit)
        
        # Client Secret
        self.client_secret_edit = QLineEdit()
        self.client_secret_edit.setEchoMode(QLineEdit.EchoMode.Password)
        self.client_secret_edit.setPlaceholderText('–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á...')
        secret_layout = QHBoxLayout()
        secret_layout.addWidget(self.client_secret_edit)
        show_secret_btn = QPushButton('üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å')
        show_secret_btn.clicked.connect(lambda: self.toggle_password(self.client_secret_edit, show_secret_btn))
        secret_layout.addWidget(show_secret_btn)
        form.addRow('* Client Secret:', secret_layout)
        
        # Redirect URI
        self.redirect_uri_edit = QLineEdit()
        self.redirect_uri_edit.setPlaceholderText('https://your-redirect-uri.com')
        form.addRow('Redirect URI:', self.redirect_uri_edit)
        
        # Portal Name
        self.portal_edit = QLineEdit()
        self.portal_edit.setPlaceholderText('vrbgroup')
        form.addRow('* Portal Name:', self.portal_edit)
        
        # Region
        self.region_combo = QComboBox()
        self.region_combo.addItems(['com', 'eu', 'in', 'cn'])
        form.addRow('Region:', self.region_combo)
        
        creds_layout.addLayout(form)
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        instruction = QLabel(
            '<br><b>üìã –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Client ID –∏ Client Secret:</b><br>'
            '1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <a href="https://api-console.zoho.com/">Zoho API Console</a><br>'
            '2. –°–æ–∑–¥–∞–π—Ç–µ Self Client –∏–ª–∏ Server-based Application<br>'
            '3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ Client ID –∏ Client Secret'
        )
        instruction.setWordWrap(True)
        instruction.setOpenExternalLinks(True)
        creds_layout.addWidget(instruction)
        
        tabs.addTab(creds_tab, 'üîê Credentials')
        
        # Tab 2: Tokens
        tokens_tab = QWidget()
        tokens_layout = QVBoxLayout(tokens_tab)
        
        # –ò–Ω—Ñ–æ –æ —Ç–æ–∫–µ–Ω–∞—Ö
        tokens_info = QLabel(
            '<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞</b><br><br>'
            '–ï—Å–ª–∏ —É –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤, –ø–æ–ª—É—á–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ Authorization Code.<br>'
            '–ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã —É–∂–µ –µ—Å—Ç—å, –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∏—Ö.'
        )
        tokens_info.setWordWrap(True)
        tokens_layout.addWidget(tokens_info)
        
        # === STEP 1: –ü–æ–ª—É—á–µ–Ω–∏–µ Authorization Code ===
        step1_group = QGroupBox('–®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ Authorization Code')
        step1_layout = QVBoxLayout(step1_group)
        
        step1_info = QLabel(
            '1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Authorization Code:<br>'
            '<a href="https://accounts.zoho.com/oauth/v2/auth?response_type=code&client_id=YOUR_CLIENT_ID&scope=ZohoProjects.portals.ALL,ZohoProjects.projects.ALL&redirect_uri=YOUR_REDIRECT_URI&access_type=offline">–ü–æ–ª—É—á–∏—Ç—å Authorization Code</a><br><br>'
            '2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏–∑ URL<br>'
            '3. –í—Å—Ç–∞–≤—å—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ:'
        )
        step1_info.setWordWrap(True)
        step1_info.setOpenExternalLinks(True)
        step1_layout.addWidget(step1_info)
        
        self.auth_code_edit = QLineEdit()
        self.auth_code_edit.setPlaceholderText('1000.XXXXXXXXXX...')
        step1_layout.addWidget(self.auth_code_edit)
        
        self.get_tokens_btn = QPushButton('üîë –ü–æ–ª—É—á–∏—Ç—å Access –∏ Refresh Token')
        self.get_tokens_btn.clicked.connect(self.fetch_tokens)
        step1_layout.addWidget(self.get_tokens_btn)
        
        tokens_layout.addWidget(step1_group)
        
        # === STEP 2: –¢–æ–∫–µ–Ω—ã ===
        step2_group = QGroupBox('–®–∞–≥ 2: –¢–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞')
        step2_layout = QFormLayout(step2_group)
        
        # Access Token
        self.access_token_edit = QLineEdit()
        self.access_token_edit.setEchoMode(QLineEdit.EchoMode.Password)
        self.access_token_edit.setPlaceholderText('1000.XXXXXXXXXX...')
        access_layout = QHBoxLayout()
        access_layout.addWidget(self.access_token_edit)
        show_access_btn = QPushButton('üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å')
        show_access_btn.clicked.connect(lambda: self.toggle_password(self.access_token_edit, show_access_btn))
        access_layout.addWidget(show_access_btn)
        step2_layout.addRow('Access Token:', access_layout)
        
        # Refresh Token
        self.refresh_token_edit = QLineEdit()
        self.refresh_token_edit.setEchoMode(QLineEdit.EchoMode.Password)
        self.refresh_token_edit.setPlaceholderText('1000.XXXXXXXXXX...')
        refresh_layout = QHBoxLayout()
        refresh_layout.addWidget(self.refresh_token_edit)
        show_refresh_btn = QPushButton('üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å')
        show_refresh_btn.clicked.connect(lambda: self.toggle_password(self.refresh_token_edit, show_refresh_btn))
        refresh_layout.addWidget(show_refresh_btn)
        step2_layout.addRow('Refresh Token:', refresh_layout)
        
        tokens_layout.addWidget(step2_group)
        tokens_layout.addStretch()
        
        tabs.addTab(tokens_tab, 'üîë Tokens')
        
        # Tab 3: Projects
        projects_tab = QWidget()
        projects_layout = QVBoxLayout(projects_tab)
        
        projects_info = QLabel(
            '<b>–í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞</b><br><br>'
            '–ù–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Zoho.<br>'
            '–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ID –≤—Ä—É—á–Ω—É—é.'
        )
        projects_info.setWordWrap(True)
        projects_layout.addWidget(projects_info)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
        self.load_projects_btn = QPushButton('üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ Zoho')
        self.load_projects_btn.clicked.connect(self.fetch_projects)
        projects_layout.addWidget(self.load_projects_btn)
        
        # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
        self.projects_list = QListWidget()
        self.projects_list.itemClicked.connect(self.on_project_selected)
        projects_layout.addWidget(self.projects_list)
        
        # –†—É—á–Ω–æ–π –≤–≤–æ–¥ Project ID
        manual_layout = QHBoxLayout()
        manual_layout.addWidget(QLabel('–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:'))
        self.project_id_edit = QLineEdit()
        self.project_id_edit.setPlaceholderText('1209515000001238053')
        manual_layout.addWidget(self.project_id_edit)
        projects_layout.addLayout(manual_layout)
        
        tabs.addTab(projects_tab, 'üìÅ Projects')
        
        layout.addWidget(tabs)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons = QDialogButtonBox(
            QDialogButtonBox.StandardButton.Save | 
            QDialogButtonBox.StandardButton.Cancel |
            QDialogButtonBox.StandardButton.RestoreDefaults
        )
        buttons.accepted.connect(self.save_credentials)
        buttons.rejected.connect(self.reject)
        buttons.button(QDialogButtonBox.StandardButton.RestoreDefaults).setText('üîÑ –°–±—Ä–æ—Å–∏—Ç—å')
        buttons.button(QDialogButtonBox.StandardButton.RestoreDefaults).clicked.connect(self.load_credentials)
        buttons.button(QDialogButtonBox.StandardButton.Save).setText('üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å')
        buttons.button(QDialogButtonBox.StandardButton.Cancel).setText('‚ùå –û—Ç–º–µ–Ω–∞')
        layout.addWidget(buttons)
        
        # Status bar
        self.status_label = QLabel('–ì–æ—Ç–æ–≤')
        self.status_label.setStyleSheet('color: gray; padding: 5px;')
        layout.addWidget(self.status_label)
    
    def toggle_password(self, line_edit, button):
        """–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å"""
        if line_edit.echoMode() == QLineEdit.EchoMode.Password:
            line_edit.setEchoMode(QLineEdit.EchoMode.Normal)
            button.setText('üôà –°–∫—Ä—ã—Ç—å')
        else:
            line_edit.setEchoMode(QLineEdit.EchoMode.Password)
            button.setText('üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å')
    
    def load_credentials(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å credentials –∏–∑ —Ñ–∞–π–ª–∞"""
        if not self.env_path.exists():
            self.status_label.setText(f'‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.env_path}')
            self.status_label.setStyleSheet('color: orange; padding: 5px;')
            return
        
        try:
            with open(self.env_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            creds = {}
            for line in lines:
                line = line.strip()
                if '=' in line and not line.startswith('#'):
                    key, value = line.split('=', 1)
                    creds[key.strip()] = value.strip()
            
            self.client_id_edit.setText(creds.get('ZOHO_CLIENT_ID', ''))
            self.client_secret_edit.setText(creds.get('ZOHO_CLIENT_SECRET', ''))
            self.access_token_edit.setText(creds.get('ZOHO_ACCESS_TOKEN', ''))
            self.refresh_token_edit.setText(creds.get('ZOHO_REFRESH_TOKEN', ''))
            self.auth_code_edit.setText(creds.get('ZOHO_AUTHORIZATION_CODE', ''))
            self.redirect_uri_edit.setText(creds.get('ZOHO_REDIRECT_URI', ''))
            self.portal_edit.setText(creds.get('ZOHO_PORTAL_NAME', ''))
            self.project_id_edit.setText(creds.get('ZOHO_PROJECT_ID', ''))
            
            region = creds.get('ZOHO_REGION', 'com')
            index = self.region_combo.findText(region)
            if index >= 0:
                self.region_combo.setCurrentIndex(index)
            
            self.status_label.setText('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
            self.status_label.setStyleSheet('color: green; padding: 5px;')
        
        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\\n{e}')
            self.status_label.setText(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}')
            self.status_label.setStyleSheet('color: red; padding: 5px;')
    
    def fetch_tokens(self):
        """–ü–æ–ª—É—á–∏—Ç—å Access –∏ Refresh Token —á–µ—Ä–µ–∑ Authorization Code"""
        client_id = self.client_id_edit.text().strip()
        client_secret = self.client_secret_edit.text().strip()
        auth_code = self.auth_code_edit.text().strip()
        redirect_uri = self.redirect_uri_edit.text().strip()
        
        if not all([client_id, client_secret, auth_code]):
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ Client ID, Client Secret –∏ Authorization Code!')
            return
        
        self.get_tokens_btn.setEnabled(False)
        self.status_label.setText('üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤...')
        self.status_label.setStyleSheet('color: blue; padding: 5px;')
        
        self.token_thread = TokenFetchThread(client_id, client_secret, auth_code, redirect_uri)
        self.token_thread.finished.connect(self.on_tokens_received)
        self.token_thread.start()
    
    def on_tokens_received(self, result, error):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        self.get_tokens_btn.setEnabled(True)
        
        if error:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã:\\n{error}')
            self.status_label.setText(f'‚ùå –û—à–∏–±–∫–∞: {error}')
            self.status_label.setStyleSheet('color: red; padding: 5px;')
            return
        
        access_token = result.get('access_token', '')
        refresh_token = result.get('refresh_token', '')
        
        if not access_token or not refresh_token:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', f'–ù–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\\n{result}')
            return
        
        self.access_token_edit.setText(access_token)
        self.refresh_token_edit.setText(refresh_token)
        
        QMessageBox.information(
            self, '–£—Å–ø–µ—Ö', 
            '‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!\\n\\n'
            'Access Token –∏ Refresh Token –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.\\n'
            '–¢–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.'
        )
        self.status_label.setText('‚úÖ –¢–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã')
        self.status_label.setStyleSheet('color: green; padding: 5px;')
    
    def fetch_projects(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ Zoho"""
        access_token = self.access_token_edit.text().strip()
        portal_name = self.portal_edit.text().strip()
        region = self.region_combo.currentText()
        
        if not access_token or not portal_name:
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ Access Token –∏ Portal Name!')
            return
        
        self.load_projects_btn.setEnabled(False)
        self.status_label.setText('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...')
        self.status_label.setStyleSheet('color: blue; padding: 5px;')
        
        self.projects_thread = ProjectsFetchThread(access_token, portal_name, region)
        self.projects_thread.finished.connect(self.on_projects_received)
        self.projects_thread.start()
    
    def on_projects_received(self, projects, error):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        self.load_projects_btn.setEnabled(True)
        
        if error:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã:\\n{error}')
            self.status_label.setText(f'‚ùå –û—à–∏–±–∫–∞: {error}')
            self.status_label.setStyleSheet('color: red; padding: 5px;')
            return
        
        self.projects_list.clear()
        for project in projects:
            item = QListWidgetItem(f"{project.get('name', 'Unnamed')} (ID: {project.get('id', 'N/A')})")
            item.setData(Qt.ItemDataRole.UserRole, project.get('id'))
            self.projects_list.addItem(item)
        
        self.status_label.setText(f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(projects)}')
        self.status_label.setStyleSheet('color: green; padding: 5px;')
        
        if not projects:
            QMessageBox.information(self, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ü—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.')
    
    def on_project_selected(self, item):
        """–í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        project_id = item.data(Qt.ItemDataRole.UserRole)
        if project_id:
            self.project_id_edit.setText(project_id)
            self.status_label.setText(f'‚úÖ –í—ã–±—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç: {project_id}')
            self.status_label.setStyleSheet('color: green; padding: 5px;')
    
    def save_credentials(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å credentials –≤ —Ñ–∞–π–ª"""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not self.client_id_edit.text().strip():
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', 'Client ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!')
            return
        
        if not self.portal_edit.text().strip():
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', 'Portal Name –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!')
            return
        
        reply = QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?\\n\\n'
            '‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!',
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply != QMessageBox.StandardButton.Yes:
            return
        
        try:
            # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            self.env_path.parent.mkdir(parents=True, exist_ok=True)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            content = f"""ZOHO_CLIENT_ID={self.client_id_edit.text().strip()}
ZOHO_CLIENT_SECRET={self.client_secret_edit.text().strip()}
ZOHO_AUTHORIZATION_CODE={self.auth_code_edit.text().strip()}
ZOHO_REDIRECT_URI={self.redirect_uri_edit.text().strip()}
ZOHO_REGION={self.region_combo.currentText()}
ZOHO_ACCESS_TOKEN={self.access_token_edit.text().strip()}
ZOHO_REFRESH_TOKEN={self.refresh_token_edit.text().strip()}
ZOHO_PORTAL_NAME={self.portal_edit.text().strip()}
ZOHO_PROJECT_ID={self.project_id_edit.text().strip()}
"""
            
            # Backup —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞
            if self.env_path.exists():
                backup_path = self.env_path.parent / 'zoho.env.backup'
                shutil.copy2(self.env_path, backup_path)
                backup_msg = f'\\n\\nüì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}'
            else:
                backup_msg = ''
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            with open(self.env_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            QMessageBox.information(
                self, '–£—Å–ø–µ—Ö', 
                f'‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!{backup_msg}\\n\\n'
                '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.'
            )
            self.status_label.setText('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
            self.status_label.setStyleSheet('color: green; padding: 5px;')
            self.accept()
        
        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\\n{e}')
            self.status_label.setText(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}')
            self.status_label.setStyleSheet('color: red; padding: 5px;')
