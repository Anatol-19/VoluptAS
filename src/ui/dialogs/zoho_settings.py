"""
Zoho Settings Dialog - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ API –∏ —Ç–æ–∫–µ–Ω–∞–º–∏
"""
from PyQt6.QtWidgets import *
from PyQt6.QtCore import Qt
import os
from pathlib import Path


class ZohoSettingsDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Zoho API"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Zoho API')
        self.setMinimumWidth(600)
        self.setMinimumHeight(500)
        
        # –ü—É—Ç—å –∫ credentials
        self.project_root = Path(__file__).resolve().parent.parent.parent
        self.env_path = self.project_root / 'credentials' / 'zoho.env'
        
        self.init_ui()
        self.load_credentials()
    
    def init_ui(self):
        layout = QVBoxLayout(self)
        
        # –ò–Ω—Ñ–æ
        info_label = QLabel(
            '‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Zoho Projects</b><br><br>'
            '–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –¥–æ—Å—Ç—É–ø–∞ –∏ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã API.<br>'
            '<font color="red">‚ö†Ô∏è –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö!</font>'
        )
        info_label.setWordWrap(True)
        layout.addWidget(info_label)
        
        # –§–æ—Ä–º–∞
        form = QFormLayout()
        
        # Client ID
        self.client_id_edit = QLineEdit()
        self.client_id_edit.setPlaceholderText('1000.XXXXXXXXXX...')
        form.addRow('Client ID:', self.client_id_edit)
        
        # Client Secret
        self.client_secret_edit = QLineEdit()
        self.client_secret_edit.setEchoMode(QLineEdit.EchoMode.Password)
        self.client_secret_edit.setPlaceholderText('–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á...')
        show_secret_btn = QPushButton('üëÅÔ∏è')
        show_secret_btn.setMaximumWidth(40)
        show_secret_btn.clicked.connect(lambda: self.toggle_password(self.client_secret_edit))
        secret_layout = QHBoxLayout()
        secret_layout.addWidget(self.client_secret_edit)
        secret_layout.addWidget(show_secret_btn)
        form.addRow('Client Secret:', secret_layout)
        
        # Access Token
        self.access_token_edit = QLineEdit()
        self.access_token_edit.setEchoMode(QLineEdit.EchoMode.Password)
        self.access_token_edit.setPlaceholderText('1000.XXXXXXXXXX...')
        show_access_btn = QPushButton('üëÅÔ∏è')
        show_access_btn.setMaximumWidth(40)
        show_access_btn.clicked.connect(lambda: self.toggle_password(self.access_token_edit))
        access_layout = QHBoxLayout()
        access_layout.addWidget(self.access_token_edit)
        access_layout.addWidget(show_access_btn)
        form.addRow('Access Token:', access_layout)
        
        # Refresh Token
        self.refresh_token_edit = QLineEdit()
        self.refresh_token_edit.setEchoMode(QLineEdit.EchoMode.Password)
        self.refresh_token_edit.setPlaceholderText('1000.XXXXXXXXXX...')
        show_refresh_btn = QPushButton('üëÅÔ∏è')
        show_refresh_btn.setMaximumWidth(40)
        show_refresh_btn.clicked.connect(lambda: self.toggle_password(self.refresh_token_edit))
        refresh_layout = QHBoxLayout()
        refresh_layout.addWidget(self.refresh_token_edit)
        refresh_layout.addWidget(show_refresh_btn)
        form.addRow('Refresh Token:', refresh_layout)
        
        # Authorization Code
        self.auth_code_edit = QLineEdit()
        self.auth_code_edit.setPlaceholderText('1000.XXXXXXXXXX... (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)')
        form.addRow('Authorization Code:', self.auth_code_edit)
        
        # Portal Name
        self.portal_edit = QLineEdit()
        self.portal_edit.setPlaceholderText('vrbgroup')
        form.addRow('Portal Name:', self.portal_edit)
        
        # Project ID
        self.project_id_edit = QLineEdit()
        self.project_id_edit.setPlaceholderText('1209515000001238053')
        form.addRow('Project ID:', self.project_id_edit)
        
        # Region
        self.region_combo = QComboBox()
        self.region_combo.addItems(['com', 'eu', 'in', 'cn'])
        form.addRow('Region:', self.region_combo)
        
        layout.addLayout(form)
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        instruction = QLabel(
            '<br><b>üìã –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã:</b><br>'
            '1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <a href="https://api-console.zoho.com/">Zoho API Console</a><br>'
            '2. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π Access Token<br>'
            '3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ –ø–æ–ª—è –≤—ã—à–µ<br>'
            '4. –ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"'
        )
        instruction.setWordWrap(True)
        instruction.setOpenExternalLinks(True)
        layout.addWidget(instruction)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons = QDialogButtonBox(
            QDialogButtonBox.StandardButton.Save | 
            QDialogButtonBox.StandardButton.Cancel |
            QDialogButtonBox.StandardButton.RestoreDefaults
        )
        buttons.accepted.connect(self.save_credentials)
        buttons.rejected.connect(self.reject)
        buttons.button(QDialogButtonBox.StandardButton.RestoreDefaults).setText('–°–±—Ä–æ—Å–∏—Ç—å')
        buttons.button(QDialogButtonBox.StandardButton.RestoreDefaults).clicked.connect(self.load_credentials)
        layout.addWidget(buttons)
    
    def toggle_password(self, line_edit):
        """–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å"""
        if line_edit.echoMode() == QLineEdit.EchoMode.Password:
            line_edit.setEchoMode(QLineEdit.EchoMode.Normal)
        else:
            line_edit.setEchoMode(QLineEdit.EchoMode.Password)
    
    def load_credentials(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å credentials –∏–∑ —Ñ–∞–π–ª–∞"""
        if not self.env_path.exists():
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', f'–§–∞–π–ª credentials –Ω–µ –Ω–∞–π–¥–µ–Ω:\n{self.env_path}')
            return
        
        try:
            with open(self.env_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            creds = {}
            for line in lines:
                line = line.strip()
                if '=' in line and not line.startswith('#'):
                    key, value = line.split('=', 1)
                    creds[key.strip()] = value.strip()
            
            self.client_id_edit.setText(creds.get('ZOHO_CLIENT_ID', ''))
            self.client_secret_edit.setText(creds.get('ZOHO_CLIENT_SECRET', ''))
            self.access_token_edit.setText(creds.get('ZOHO_ACCESS_TOKEN', ''))
            self.refresh_token_edit.setText(creds.get('ZOHO_REFRESH_TOKEN', ''))
            self.auth_code_edit.setText(creds.get('ZOHO_AUTHORIZATION_CODE', ''))
            self.portal_edit.setText(creds.get('ZOHO_PORTAL_NAME', ''))
            self.project_id_edit.setText(creds.get('ZOHO_PROJECT_ID', ''))
            
            region = creds.get('ZOHO_REGION', 'com')
            index = self.region_combo.findText(region)
            if index >= 0:
                self.region_combo.setCurrentIndex(index)
            
            self.statusBar().showMessage('‚úÖ Credentials –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
        
        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å credentials:\n{e}')
    
    def save_credentials(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å credentials –≤ —Ñ–∞–π–ª"""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not self.client_id_edit.text().strip():
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', 'Client ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
            return
        
        if not self.portal_edit.text().strip():
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', 'Portal Name –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
            return
        
        reply = QMessageBox.question(
            self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
            '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ credentials?\n\n'
            '‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!',
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )
        
        if reply != QMessageBox.StandardButton.Yes:
            return
        
        try:
            content = f"""ZOHO_CLIENT_ID={self.client_id_edit.text().strip()}
ZOHO_CLIENT_SECRET={self.client_secret_edit.text().strip()}
ZOHO_AUTHORIZATION_CODE={self.auth_code_edit.text().strip()}
ZOHO_REGION={self.region_combo.currentText()}
ZOHO_ACCESS_TOKEN={self.access_token_edit.text().strip()}
ZOHO_REFRESH_TOKEN={self.refresh_token_edit.text().strip()}
ZOHO_PORTAL_NAME={self.portal_edit.text().strip()}
ZOHO_PROJECT_ID={self.project_id_edit.text().strip()}
"""
            
            # Backup —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞
            if self.env_path.exists():
                backup_path = self.env_path.with_suffix('.env.backup')
                import shutil
                shutil.copy2(self.env_path, backup_path)
            
            with open(self.env_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            QMessageBox.information(self, '–£—Å–ø–µ—Ö', '‚úÖ Credentials —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.')
            self.accept()
        
        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å credentials:\n{e}')
    
    def statusBar(self):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        class FakeStatusBar:
            def showMessage(self, msg): pass
        return FakeStatusBar()
