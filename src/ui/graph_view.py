"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ —Å–≤—è–∑–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤

–í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—é Module ‚Üí Epic ‚Üí Feature ‚Üí Story
–∏ —Å–≤—è–∑–∏ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ (RACI, —Ç–µ—Å—Ç-–∫–µ–π—Å—ã, etc.)
"""
from PyQt6.QtWidgets import *
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QAction
import matplotlib
matplotlib.use('QtAgg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Qt6 backend
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qtagg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qtagg import NavigationToolbar2QT as NavigationToolbar
import networkx as nx
from src.db import SessionLocal
from src.models import FunctionalItem


class GraphViewWindow(QMainWindow):
    """–û–∫–Ω–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞ —Å–≤—è–∑–µ–π"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.session = SessionLocal()
        self.graph = nx.DiGraph()
        self.pos = None
        self.node_colors = []
        self.node_sizes = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        self.show_types = {
            'Module': True,
            'Epic': True,
            'Feature': True,
            'Story': True,
            'Page': True,
            'Element': True,
            'Service': True
        }
        self.start_from = None  # –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–æ–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.max_depth = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        self.init_ui()
        self.build_graph()
        self.draw_graph()
    
    def init_ui(self):
        self.setWindowTitle('–ì—Ä–∞—Ñ —Å–≤—è–∑–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤')
        self.setGeometry(100, 100, 1400, 900)
        
        # –ú–µ–Ω—é
        menubar = self.menuBar()
        
        file_menu = menubar.addMenu('–§–∞–π–ª')
        export_action = QAction('üíæ –≠–∫—Å–ø–æ—Ä—Ç PNG', self)
        export_action.triggered.connect(self.export_graph)
        file_menu.addAction(export_action)
        
        close_action = QAction('‚ùå –ó–∞–∫—Ä—ã—Ç—å', self)
        close_action.triggered.connect(self.close)
        file_menu.addAction(close_action)
        
        view_menu = menubar.addMenu('–í–∏–¥')
        reset_view_action = QAction('üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤–∏–¥', self)
        reset_view_action.triggered.connect(self.reset_view)
        view_menu.addAction(reset_view_action)
        
        # Central widget
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QHBoxLayout(central_widget)
        
        # === LEFT PANEL: CONTROLS ===
        left_panel = QWidget()
        left_panel.setMaximumWidth(300)
        left_layout = QVBoxLayout(left_panel)
        
        # –§–∏–ª—å—Ç—Ä—ã –ø–æ —Ç–∏–ø–∞–º
        types_group = QGroupBox('üìã –¢–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤')
        types_layout = QVBoxLayout(types_group)
        
        self.type_checkboxes = {}
        for type_name in ['Module', 'Epic', 'Feature', 'Story', 'Page', 'Element', 'Service']:
            checkbox = QCheckBox(type_name)
            checkbox.setChecked(self.show_types.get(type_name, True))
            checkbox.stateChanged.connect(self.on_filter_changed)
            types_layout.addWidget(checkbox)
            self.type_checkboxes[type_name] = checkbox
        
        left_layout.addWidget(types_group)
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–æ–¥–∞
        start_group = QGroupBox('üéØ –ù–∞—á–∞—Ç—å —Å —ç–ª–µ–º–µ–Ω—Ç–∞')
        start_layout = QVBoxLayout(start_group)
        
        self.start_combo = QComboBox()
        self.start_combo.addItem('(–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë)', None)
        self.populate_start_combo()
        self.start_combo.currentIndexChanged.connect(self.on_filter_changed)
        start_layout.addWidget(self.start_combo)
        
        clear_start_btn = QPushButton('üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å')
        clear_start_btn.clicked.connect(lambda: self.start_combo.setCurrentIndex(0))
        start_layout.addWidget(clear_start_btn)
        
        left_layout.addWidget(start_group)
        
        # –ì–ª—É–±–∏–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        depth_group = QGroupBox('üìè –ì–ª—É–±–∏–Ω–∞')
        depth_layout = QFormLayout(depth_group)
        
        self.depth_spin = QSpinBox()
        self.depth_spin.setMinimum(1)
        self.depth_spin.setMaximum(10)
        self.depth_spin.setValue(3)
        self.depth_spin.valueChanged.connect(self.on_filter_changed)
        depth_layout.addRow('–£—Ä–æ–≤–Ω–µ–π:', self.depth_spin)
        
        left_layout.addWidget(depth_group)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_group = QGroupBox('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        stats_layout = QVBoxLayout(stats_group)
        
        self.stats_label = QLabel('–ó–∞–≥—Ä—É–∑–∫–∞...')
        self.stats_label.setWordWrap(True)
        stats_layout.addWidget(self.stats_label)
        
        left_layout.addWidget(stats_group)
        
        # –ö–Ω–æ–ø–∫–∏
        refresh_btn = QPushButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ')
        refresh_btn.clicked.connect(self.refresh_graph)
        left_layout.addWidget(refresh_btn)
        
        left_layout.addStretch()
        
        main_layout.addWidget(left_panel)
        
        # === RIGHT PANEL: GRAPH ===
        right_panel = QWidget()
        right_layout = QVBoxLayout(right_panel)
        
        # Matplotlib canvas
        self.figure = plt.Figure(figsize=(12, 8), facecolor='#f0f0f0')
        self.canvas = FigureCanvas(self.figure)
        self.ax = self.figure.add_subplot(111)
        
        # Navigation toolbar
        self.toolbar = NavigationToolbar(self.canvas, self)
        
        right_layout.addWidget(self.toolbar)
        right_layout.addWidget(self.canvas)
        
        main_layout.addWidget(right_panel)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–ª–∏–∫ –ø–æ –Ω–æ–¥–µ
        self.canvas.mpl_connect('button_press_event', self.on_node_click)
        
        self.statusBar().showMessage('–ì–æ—Ç–æ–≤')
    
    def populate_start_combo(self):
        """–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–±–æ–±–æ–∫—Å –Ω–∞—á–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        items = self.session.query(FunctionalItem).order_by(FunctionalItem.functional_id).all()
        for item in items:
            self.start_combo.addItem(f'{item.functional_id} ({item.type})', item.functional_id)
    
    def build_graph(self):
        """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ –∏–∑ –ë–î"""
        self.graph.clear()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        items = self.session.query(FunctionalItem).all()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        filtered_items = [
            item for item in items 
            if self.show_types.get(item.type, True)
        ]
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–æ–¥–∞, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≥–ª—É–±–∏–Ω–µ
        if self.start_from:
            filtered_items = self.filter_by_start_node(filtered_items, self.start_from, self.max_depth)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–¥—ã
        for item in filtered_items:
            self.graph.add_node(
                item.functional_id,
                label=item.title or item.functional_id,
                type=item.type,
                is_crit=item.is_crit,
                is_focus=item.is_focus,
                item=item
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä—ë–±—Ä–∞ (–∏–µ—Ä–∞—Ä—Ö–∏—è)
        for item in filtered_items:
            # Module ‚Üí Epic
            if item.type == 'Epic' and item.module:
                parent = self.find_item_by_name(filtered_items, item.module, 'Module')
                if parent and parent.functional_id in self.graph:
                    self.graph.add_edge(parent.functional_id, item.functional_id, relation='hierarchy')
            
            # Epic ‚Üí Feature
            if item.type == 'Feature' and item.epic:
                parent = self.find_item_by_name(filtered_items, item.epic, 'Epic')
                if parent and parent.functional_id in self.graph:
                    self.graph.add_edge(parent.functional_id, item.functional_id, relation='hierarchy')
            
            # Feature ‚Üí Story
            if item.type == 'Story' and item.feature:
                parent = self.find_item_by_name(filtered_items, item.feature, 'Feature')
                if parent and parent.functional_id in self.graph:
                    self.graph.add_edge(parent.functional_id, item.functional_id, relation='hierarchy')
        
        self.update_stats()
    
    def find_item_by_name(self, items, name, type_filter=None):
        """–ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–æ –∏–º–µ–Ω–∏"""
        for item in items:
            if type_filter and item.type != type_filter:
                continue
            if item.title == name or item.functional_id == name:
                return item
        return None
    
    def filter_by_start_node(self, items, start_id, max_depth):
        """–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–æ–¥–µ –∏ –≥–ª—É–±–∏–Ω–µ"""
        # –°—Ç—Ä–æ–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ –¥–ª—è –ø–æ–∏—Å–∫–∞
        temp_graph = nx.DiGraph()
        
        for item in items:
            temp_graph.add_node(item.functional_id, item=item)
        
        for item in items:
            if item.type == 'Epic' and item.module:
                parent = self.find_item_by_name(items, item.module, 'Module')
                if parent:
                    temp_graph.add_edge(parent.functional_id, item.functional_id)
            
            if item.type == 'Feature' and item.epic:
                parent = self.find_item_by_name(items, item.epic, 'Epic')
                if parent:
                    temp_graph.add_edge(parent.functional_id, item.functional_id)
            
            if item.type == 'Story' and item.feature:
                parent = self.find_item_by_name(items, item.feature, 'Feature')
                if parent:
                    temp_graph.add_edge(parent.functional_id, item.functional_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ—Ç–æ–º–∫–æ–≤ –Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–æ–¥—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≥–ª—É–±–∏–Ω—ã
        if start_id not in temp_graph:
            return items
        
        result_ids = {start_id}
        current_level = {start_id}
        
        for _ in range(max_depth):
            next_level = set()
            for node in current_level:
                successors = list(temp_graph.successors(node))
                next_level.update(successors)
                result_ids.update(successors)
            current_level = next_level
            if not current_level:
                break
        
        # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–∫–æ–≤ –Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–æ–¥—ã
        try:
            ancestors = nx.ancestors(temp_graph, start_id)
            result_ids.update(ancestors)
        except:
            pass
        
        return [item for item in items if item.functional_id in result_ids]
    
    def draw_graph(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ"""
        self.ax.clear()
        
        if self.graph.number_of_nodes() == 0:
            self.ax.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã',
                        ha='center', va='center', fontsize=14, color='gray')
            self.canvas.draw()
            return
        
        # Layout (–∏—Å–ø–æ–ª—å–∑—É–µ–º spring_layout –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–º–µ—Ä–æ–≤)
        try:
            # –î–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –≥—Ä–∞—Ñ–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–µ –∏—Ç–µ—Ä–∞—Ü–∏–π
            if self.graph.number_of_nodes() < 20:
                self.pos = nx.spring_layout(self.graph, k=2, iterations=100, seed=42)
            elif self.graph.number_of_nodes() < 50:
                self.pos = nx.spring_layout(self.graph, k=1.5, iterations=50, seed=42)
            else:
                # –î–ª—è –±–æ–ª—å—à–∏—Ö –≥—Ä–∞—Ñ–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–µ –∏—Ç–µ—Ä–∞—Ü–∏–π
                self.pos = nx.spring_layout(self.graph, k=1, iterations=30, seed=42)
        except Exception as e:
            # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π circular layout
            self.pos = nx.circular_layout(self.graph)
        
        # –¶–≤–µ—Ç–∞ –Ω–æ–¥ –ø–æ —Ç–∏–ø—É
        type_colors = {
            'Module': '#FF6B6B',      # –ö—Ä–∞—Å–Ω—ã–π
            'Epic': '#4ECDC4',        # –ë–∏—Ä—é–∑–æ–≤—ã–π
            'Feature': '#45B7D1',     # –ì–æ–ª—É–±–æ–π
            'Story': '#96CEB4',       # –ó–µ–ª—ë–Ω—ã–π
            'Page': '#FFEAA7',        # –ñ—ë–ª—Ç—ã–π
            'Element': '#DFE6E9',     # –°–µ—Ä—ã–π
            'Service': '#A29BFE'      # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        }
        
        self.node_colors = []
        self.node_sizes = []
        
        for node in self.graph.nodes():
            node_data = self.graph.nodes[node]
            node_type = node_data.get('type', 'Feature')
            is_crit = node_data.get('is_crit', False)
            is_focus = node_data.get('is_focus', False)
            
            # –¶–≤–µ—Ç
            color = type_colors.get(node_type, '#95A5A6')
            self.node_colors.append(color)
            
            # –†–∞–∑–º–µ—Ä (–∫—Ä–∏—Ç–∏—á–Ω—ã–µ –±–æ–ª—å—à–µ)
            size = 3000 if is_crit else (2500 if is_focus else 2000)
            self.node_sizes.append(size)
        
        # –†–∏—Å—É–µ–º —Ä—ë–±—Ä–∞
        nx.draw_networkx_edges(
            self.graph, self.pos,
            edge_color='#BDC3C7',
            width=2,
            alpha=0.6,
            arrows=True,
            arrowsize=20,
            arrowstyle='->',
            ax=self.ax
        )
        
        # –†–∏—Å—É–µ–º –Ω–æ–¥—ã
        nx.draw_networkx_nodes(
            self.graph, self.pos,
            node_color=self.node_colors,
            node_size=self.node_sizes,
            alpha=0.9,
            linewidths=2,
            edgecolors='white',
            ax=self.ax
        )
        
        # –ü–æ–¥–ø–∏—Å–∏
        labels = {}
        for node in self.graph.nodes():
            node_data = self.graph.nodes[node]
            label = node  # Functional ID
            labels[node] = label
        
        nx.draw_networkx_labels(
            self.graph, self.pos,
            labels=labels,
            font_size=8,
            font_weight='bold',
            font_color='#2C3E50',
            ax=self.ax
        )
        
        # –õ–µ–≥–µ–Ω–¥–∞
        from matplotlib.patches import Patch
        legend_elements = [
            Patch(facecolor=color, edgecolor='white', label=type_name)
            for type_name, color in type_colors.items()
            if any(self.graph.nodes[n].get('type') == type_name for n in self.graph.nodes())
        ]
        self.ax.legend(handles=legend_elements, loc='upper left', fontsize=9)
        
        self.ax.set_title(
            '–ì—Ä–∞—Ñ —Å–≤—è–∑–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n'
            '(–†–∞–∑–º–µ—Ä = –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å, –¶–≤–µ—Ç = —Ç–∏–ø)',
            fontsize=14, fontweight='bold', pad=20
        )
        self.ax.axis('off')
        
        self.figure.tight_layout()
        self.canvas.draw()
        
        self.statusBar().showMessage(
            f'–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–æ–¥: {self.graph.number_of_nodes()}, —Ä—ë–±–µ—Ä: {self.graph.number_of_edges()}'
        )
    
    def update_stats(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        total = self.graph.number_of_nodes()
        edges = self.graph.number_of_edges()
        
        type_counts = {}
        crit_count = 0
        focus_count = 0
        
        for node in self.graph.nodes():
            node_data = self.graph.nodes[node]
            node_type = node_data.get('type', 'Unknown')
            type_counts[node_type] = type_counts.get(node_type, 0) + 1
            
            if node_data.get('is_crit'):
                crit_count += 1
            if node_data.get('is_focus'):
                focus_count += 1
        
        stats_text = f"""<b>–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:</b> {total}
<b>–°–≤—è–∑–µ–π:</b> {edges}

<b>–ü–æ —Ç–∏–ø–∞–º:</b>
"""
        for type_name, count in sorted(type_counts.items()):
            stats_text += f"‚Ä¢ {type_name}: {count}\n"
        
        stats_text += f"""
<b>–ö—Ä–∏—Ç–∏—á–Ω—ã–µ:</b> {crit_count}
<b>–§–æ–∫—É—Å–Ω—ã–µ:</b> {focus_count}
"""
        
        self.stats_label.setText(stats_text)
    
    def on_filter_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Ç–∏–ø–æ–≤
        for type_name, checkbox in self.type_checkboxes.items():
            self.show_types[type_name] = checkbox.isChecked()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –Ω–æ–¥—É
        self.start_from = self.start_combo.currentData()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª—É–±–∏–Ω—É
        self.max_depth = self.depth_spin.value()
        
        # –ü–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥—Ä–∞—Ñ
        self.refresh_graph()
    
    def on_node_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –Ω–æ–¥–µ"""
        if event.inaxes != self.ax:
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é –Ω–æ–¥—É –∫ –∫–ª–∏–∫—É
        click_pos = (event.xdata, event.ydata)
        min_dist = float('inf')
        clicked_node = None
        
        for node, pos in self.pos.items():
            dist = ((pos[0] - click_pos[0])**2 + (pos[1] - click_pos[1])**2)**0.5
            if dist < min_dist:
                min_dist = dist
                clicked_node = node
        
        # –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –±–ª–∏–∑–∫–æ –∫ –Ω–æ–¥–µ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 0.1)
        if min_dist < 0.1:
            self.show_node_info(clicked_node)
    
    def show_node_info(self, node_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–¥–µ"""
        node_data = self.graph.nodes.get(node_id, {})
        item = node_data.get('item')
        
        if not item:
            return
        
        info = f"""<b>Functional ID:</b> {item.functional_id}
<b>Title:</b> {item.title or 'N/A'}
<b>Type:</b> {item.type or 'N/A'}
<b>Module:</b> {item.module or 'N/A'}
<b>Epic:</b> {item.epic or 'N/A'}
<b>Feature:</b> {item.feature or 'N/A'}
<b>Critical:</b> {'‚úì' if item.is_crit else '‚Äî'}
<b>Focus:</b> {'‚úì' if item.is_focus else '‚Äî'}
<b>QA:</b> {item.responsible_qa.name if item.responsible_qa else 'N/A'}
<b>Dev:</b> {item.responsible_dev.name if item.responsible_dev else 'N/A'}
"""
        
        msg = QMessageBox(self)
        msg.setWindowTitle(f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {node_id}')
        msg.setText(info)
        msg.setIcon(QMessageBox.Icon.Information)
        
        # –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ"
        open_btn = msg.addButton('üìù –û—Ç–∫—Ä—ã—Ç—å –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ', QMessageBox.ButtonRole.ActionRole)
        msg.addButton('‚ùå –ó–∞–∫—Ä—ã—Ç—å', QMessageBox.ButtonRole.RejectRole)
        
        msg.exec()
        
        if msg.clickedButton() == open_btn:
            self.open_in_editor(item)
    
    def open_in_editor(self, item):
        """–û—Ç–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ (TODO: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≥–ª–∞–≤–Ω—ã–º –æ–∫–Ω–æ–º)"""
        QMessageBox.information(
            self, 'TODO', 
            f'–û—Ç–∫—Ä—ã—Ç–∏–µ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ:\n{item.functional_id}\n\n(–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)'
        )
    
    def refresh_graph(self):
        """–û–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ"""
        self.statusBar().showMessage('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞...')
        self.build_graph()
        self.draw_graph()
        self.statusBar().showMessage('‚úÖ –ì—Ä–∞—Ñ –æ–±–Ω–æ–≤–ª—ë–Ω')
    
    def reset_view(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –≤–∏–¥ –≥—Ä–∞—Ñ–∞"""
        self.toolbar.home()
        self.statusBar().showMessage('‚úÖ –í–∏–¥ —Å–±—Ä–æ—à–µ–Ω')
    
    def export_graph(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∞ –≤ PNG"""
        file_path, _ = QFileDialog.getSaveFileName(
            self, '–≠–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∞', 
            'functional_graph.png',
            'PNG Images (*.png);;All Files (*)'
        )
        
        if file_path:
            try:
                self.figure.savefig(file_path, dpi=300, bbox_inches='tight', facecolor='white')
                QMessageBox.information(self, '–£—Å–ø–µ—Ö', f'‚úÖ –ì—Ä–∞—Ñ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{file_path}')
                self.statusBar().showMessage(f'‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {file_path}')
            except Exception as e:
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:\n{e}')
    
    def closeEvent(self, event):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞"""
        plt.close(self.figure)
        self.session.close()
        event.accept()
