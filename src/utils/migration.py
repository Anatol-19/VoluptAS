"""
Migration utility - –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –≤ –Ω–æ–≤—É—é –º—É–ª—å—Ç–∏–ø—Ä–æ–µ–∫—Ç–Ω—É—é

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –º–∏–≥—Ä–∞—Ü–∏—é –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
"""

import shutil
import logging
from pathlib import Path
from typing import Tuple
from datetime import datetime

logger = logging.getLogger(__name__)


class MigrationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    
    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.data_dir = project_root / 'data'
        self.old_db_path = self.data_dir / 'voluptas.db'
        self.config_dir = self.data_dir / 'config'
        self.projects_dir = self.data_dir / 'projects'
    
    def needs_migration(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
        
        Returns:
            True –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –Ω–µ—Ç –Ω–æ–≤–æ–π
        """
        # –ï—Å—Ç—å —Å—Ç–∞—Ä–∞—è –ë–î –∏ –Ω–µ—Ç –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        has_old_db = self.old_db_path.exists()
        has_new_config = self.config_dir.exists() and (self.config_dir / 'projects.json').exists()
        
        return has_old_db and not has_new_config
    
    def perform_migration(self) -> Tuple[bool, str]:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é
        
        Returns:
            Tuple[success, message]
        """
        try:
            logger.info("üîÑ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
            
            # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            self.config_dir.mkdir(exist_ok=True, parents=True)
            default_project_dir = self.projects_dir / 'default'
            default_project_dir.mkdir(exist_ok=True, parents=True)
            
            # –°–æ–∑–¥–∞—ë–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
            (default_project_dir / 'bdd_features').mkdir(exist_ok=True)
            (default_project_dir / 'reports').mkdir(exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ä—É—é –ë–î –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            new_db_path = default_project_dir / 'voluptas.db'
            
            if new_db_path.exists():
                # –°–æ–∑–¥–∞—ë–º –±—ç–∫–∞–ø
                backup_path = default_project_dir / f'voluptas_backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.db'
                shutil.copy2(new_db_path, backup_path)
                logger.info(f"–°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_path}")
            
            shutil.copy2(self.old_db_path, new_db_path)
            logger.info(f"‚úÖ –ë–î —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: {self.old_db_path} ‚Üí {new_db_path}")
            
            # –°–æ–∑–¥–∞—ë–º default –ø—Ä–æ–µ–∫—Ç –≤ ProjectManager
            from src.models.project_config import ProjectManager, ProjectConfig
            
            pm = ProjectManager(self.config_dir)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ default –ø—Ä–æ–µ–∫—Ç
            if 'default' not in pm.projects:
                default_project = ProjectConfig(
                    id='default',
                    name='Default Project',
                    description='–ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã',
                    database_path=new_db_path,
                    bdd_features_dir=default_project_dir / 'bdd_features',
                    reports_dir=default_project_dir / 'reports',
                    settings_profile='production',
                    created_at=datetime.now().isoformat(),
                    is_active=True,
                    tags=['migrated']
                )
                
                pm.projects['default'] = default_project
                pm.current_project_id = 'default'
                pm.save()
                
                logger.info("‚úÖ –°–æ–∑–¥–∞–Ω default –ø—Ä–æ–µ–∫—Ç")
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –ë–î –≤ .old
            old_db_backup = self.old_db_path.with_suffix('.db.old')
            self.old_db_path.rename(old_db_backup)
            logger.info(f"‚úÖ –°—Ç–∞—Ä–∞—è –ë–î –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞: {old_db_backup}")
            
            success_msg = (
                f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                f"–í–∞—à–∞ –ë–î –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤:\n{new_db_path}\n\n"
                f"–°—Ç–∞—Ä–∞—è –ë–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫:\n{old_db_backup}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é '–§–∞–π–ª ‚Üí –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç'"
            )
            
            logger.info(success_msg)
            return True, success_msg
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}"
            logger.error(error_msg, exc_info=True)
            return False, error_msg
    
    def rollback_migration(self):
        """–û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ .old)"""
        try:
            old_db_backup = self.old_db_path.with_suffix('.db.old')
            if old_db_backup.exists():
                shutil.copy2(old_db_backup, self.old_db_path)
                logger.info(f"‚úÖ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏: –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ {self.old_db_path}")
                return True
            else:
                logger.warning("–§–∞–π–ª –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞: {e}")
            return False


def check_and_migrate(project_root: Path, show_dialog_func=None) -> Tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –¥–∏–∞–ª–æ–≥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    
    Args:
        project_root: –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
        show_dialog_func: –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                         –°–∏–≥–Ω–∞—Ç—É—Ä–∞: func(message: str) -> bool
    
    Returns:
        Tuple[migration_performed, message]
    """
    mm = MigrationManager(project_root)
    
    if not mm.needs_migration():
        return False, "–ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
    
    logger.info("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î")
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if show_dialog_func:
        message = (
            "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n\n"
            "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é.\n\n"
            "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø—Ä–æ–µ–∫—Ç–µ 'Default Project'.\n"
            "–°—Ç–∞—Ä–∞—è –ë–î –±—É–¥–µ—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ .old\n\n"
            "–í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é?"
        )
        
        if not show_dialog_func(message):
            logger.info("–ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False, "–ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    return mm.perform_migration()
