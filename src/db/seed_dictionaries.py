"""
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ (seed data)

–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É dictionaries –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
"""

from src.db import SessionLocal
from src.models import Dictionary


def seed_dictionaries():
    """–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
    
    session = SessionLocal()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
    existing_count = session.query(Dictionary).count()
    if existing_count > 0:
        print(f"‚ö†Ô∏è –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ({existing_count} –∑–∞–ø–∏—Å–µ–π). –ü—Ä–æ–ø—É—Å–∫–∞–µ–º seed.")
        session.close()
        return
    
    print("üå± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...")
    
    # === TYPES (—Ç–∏–ø—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤) ===
    types = [
        ("Module", 1, "–ú–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã"),
        ("Epic", 2, "–≠–ø–∏–∫"),
        ("Feature", 3, "–§–∏—á–∞/—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"),
        ("Story", 4, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è"),
        ("Page", 5, "–°—Ç—Ä–∞–Ω–∏—Ü–∞ UI"),
        ("Element", 6, "–≠–ª–µ–º–µ–Ω—Ç UI (–¥–ª—è POM)"),
        ("Service", 7, "–°–µ—Ä–≤–∏—Å/–º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å"),
    ]
    
    for value, order, desc in types:
        d = Dictionary(
            dict_type='type',
            value=value,
            display_order=order,
            is_active=True,
            description=desc
        )
        session.add(d)
    
    # === SEGMENTS (—Å–µ–≥–º–µ–Ω—Ç—ã) ===
    segments = [
        ("UI", 1, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"),
        ("UX/CX", 2, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç"),
        ("API", 3, "–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"),
        ("Backend", 4, "–°–µ—Ä–≤–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞"),
        ("Database", 5, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"),
        ("Integration", 6, "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏"),
        ("Security", 7, "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"),
        ("Performance", 8, "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"),
    ]
    
    for value, order, desc in segments:
        d = Dictionary(
            dict_type='segment',
            value=value,
            display_order=order,
            is_active=True,
            description=desc
        )
        session.add(d)
    
    # === AUTOMATION_STATUSES ===
    automation_statuses = [
        ("Not Started", 1, "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞—á–∞—Ç–∞"),
        ("In Progress", 2, "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"),
        ("Automated", 3, "–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"),
        ("Partially Automated", 4, "–ß–∞—Å—Ç–∏—á–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"),
        ("Not Applicable", 5, "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–∞"),
    ]
    
    for value, order, desc in automation_statuses:
        d = Dictionary(
            dict_type='automation_status',
            value=value,
            display_order=order,
            is_active=True,
            description=desc
        )
        session.add(d)
    
    # === MATURITY_LEVELS ===
    maturity_levels = [
        ("Draft", 1, "–ß–µ—Ä–Ω–æ–≤–∏–∫"),
        ("In Review", 2, "–ù–∞ —Ä–µ–≤—å—é"),
        ("Approved", 3, "–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ"),
        ("Deprecated", 4, "–£—Å—Ç–∞—Ä–µ–≤—à–µ–µ"),
    ]
    
    for value, order, desc in maturity_levels:
        d = Dictionary(
            dict_type='maturity',
            value=value,
            display_order=order,
            is_active=True,
            description=desc
        )
        session.add(d)
    
    # === POSITIONS (–¥–æ–ª–∂–Ω–æ—Å—Ç–∏) ===
    positions = [
        # QA
        ("QA Engineer", 1, "QA —Ä–æ–ª—å"),
        ("QA Team Lead", 2, "QA —Ä–æ–ª—å"),
        ("QA Tech Lead", 3, "QA —Ä–æ–ª—å"),
        ("QA Lead", 4, "QA —Ä–æ–ª—å"),
        ("QA", 5, "QA —Ä–æ–ª—å"),
        
        # Dev
        ("Frontend Developer", 10, "Dev —Ä–æ–ª—å"),
        ("Frontend Lead", 11, "Dev —Ä–æ–ª—å"),
        ("Backend Developer", 12, "Dev —Ä–æ–ª—å"),
        ("Backend Tech Developer", 13, "Dev —Ä–æ–ª—å"),
        ("Backend Tech Lead", 14, "Dev —Ä–æ–ª—å"),
        ("DevOps Engineer", 15, "Dev —Ä–æ–ª—å"),
        
        # Management
        ("Project Manager", 20, "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç"),
        ("Product Owner", 21, "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç"),
        
        # Other
        ("Business Analyst", 30, "–î—Ä—É–≥–æ–µ"),
        ("Designer", 31, "–î—Ä—É–≥–æ–µ"),
        ("Content Manager", 32, "–î—Ä—É–≥–æ–µ"),
        ("Other", 99, "–î—Ä—É–≥–æ–µ"),
    ]
    
    for value, order, desc in positions:
        d = Dictionary(
            dict_type='position',
            value=value,
            display_order=order,
            is_active=True,
            description=desc
        )
        session.add(d)
    
    try:
        session.commit()
        count = session.query(Dictionary).count()
        print(f"‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {count} –∑–∞–ø–∏—Å–µ–π")
    except Exception as e:
        session.rollback()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: {e}")
        raise
    finally:
        session.close()


if __name__ == "__main__":
    seed_dictionaries()
