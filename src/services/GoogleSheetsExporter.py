"""
Google Sheets Exporter Service

–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö VoluptAS –≤ Google Sheets:
- –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ë–î –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º –ª–∏—Å—Ç–∞–º
- –ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ–∫—Ä—ã—Ç–∏—è —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
- RACI –º–∞—Ç—Ä–∏—Ü–∞
- –¢–µ—Å—Ç-–ø–ª–∞–Ω—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
"""

from typing import Optional, List, Dict, Any
from datetime import datetime
from sqlalchemy.orm import Session
from src.models import FunctionalItem, User, Relation
from src.integrations.google import GoogleSheetsClient
import logging

logger = logging.getLogger(__name__)


class GoogleSheetsExporter:
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö VoluptAS –≤ Google Sheets"""
    
    def __init__(self, credentials_path: str, session: Session):
        """
        Args:
            credentials_path: –ü—É—Ç—å –∫ service_account.json
            session: SQLAlchemy session
        """
        self.credentials_path = credentials_path
        self.session = session
        self.client = None
    
    def export_all_tables(self, spreadsheet_id: str, filters: Optional[Dict] = None):
        """
        –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –ë–î –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã
        
        Args:
            spreadsheet_id: ID Google Spreadsheet
            filters: –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        """
        logger.info(f"üöÄ –ù–∞—á–∞–ª–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ spreadsheet {spreadsheet_id}")
        
        stats = {
            'functional_items': 0,
            'users': 0,
            'relations': 0,
            'errors': []
        }
        
        try:
            # 1. –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            stats['functional_items'] = self._export_functional_items(
                spreadsheet_id, 
                "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª", 
                filters
            )
            
            # 2. –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            stats['users'] = self._export_users(spreadsheet_id, "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
            
            # 3. –≠–∫—Å–ø–æ—Ä—Ç —Å–≤—è–∑–µ–π
            stats['relations'] = self._export_relations(spreadsheet_id, "–°–≤—è–∑–∏")
            
            logger.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: {stats}")
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            stats['errors'].append(str(e))
            raise
    
    def _export_functional_items(
        self, 
        spreadsheet_id: str, 
        sheet_name: str,
        filters: Optional[Dict] = None
    ) -> int:
        """–≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        logger.info(f"üìä –≠–∫—Å–ø–æ—Ä—Ç functional_items –≤ –ª–∏—Å—Ç '{sheet_name}'")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        self.client = GoogleSheetsClient(
            credentials_path=self.credentials_path,
            spreadsheet_id=spreadsheet_id,
            worksheet_name=sheet_name
        )
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
        query = self.session.query(FunctionalItem)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if filters:
            if filters.get('type'):
                query = query.filter(FunctionalItem.type.in_(filters['type']))
            if filters.get('is_crit'):
                query = query.filter(FunctionalItem.is_crit == True)
            if filters.get('is_focus'):
                query = query.filter(FunctionalItem.is_focus == True)
            if filters.get('responsible_qa_id'):
                query = query.filter(FunctionalItem.responsible_qa_id.in_(filters['responsible_qa_id']))
        
        items = query.all()
        logger.info(f"   –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items)}")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        for item in items:
            row_data = {
                'FuncID': item.functional_id or '',
                'Alias': item.alias_tag or '',
                'Title': item.title or '',
                'Type': item.type or '',
                'Segment': item.segment or '',
                'Module': item.module or '',
                'Epic': item.epic or '',
                'Feature': item.feature or '',
                'isCrit': '–î–∞' if item.is_crit else '',
                'isFocus': '–î–∞' if item.is_focus else '',
                'QA': item.responsible_qa.name if item.responsible_qa else '',
                'Dev': item.responsible_dev.name if item.responsible_dev else '',
                'Accountable': item.accountable.name if item.accountable else '',
                'Test Cases': item.test_cases_linked or '',
                'Automation': item.automation_status or '',
                'Documentation': item.documentation_links or '',
                'Status': item.status or '',
                'Maturity': item.maturity or '',
            }
            self.client.append_result(row_data)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self.client.flush()
        logger.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        return len(items)
    
    def _export_users(self, spreadsheet_id: str, sheet_name: str) -> int:
        """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info(f"üë• –≠–∫—Å–ø–æ—Ä—Ç users –≤ –ª–∏—Å—Ç '{sheet_name}'")
        
        self.client = GoogleSheetsClient(
            credentials_path=self.credentials_path,
            spreadsheet_id=spreadsheet_id,
            worksheet_name=sheet_name
        )
        
        users = self.session.query(User).filter(User.is_active == True).all()
        logger.info(f"   –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
        
        for user in users:
            row_data = {
                'ID': user.id,
                'Name': user.name or '',
                'Position': user.position or '',
                'Email': user.email or '',
                'Zoho ID': user.zoho_id or '',
                'GitHub': user.github_username or '',
                'Active': '–î–∞' if user.is_active else '–ù–µ—Ç',
            }
            self.client.append_result(row_data)
        
        self.client.flush()
        logger.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        return len(users)
    
    def _export_relations(self, spreadsheet_id: str, sheet_name: str) -> int:
        """–≠–∫—Å–ø–æ—Ä—Ç —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏"""
        logger.info(f"üîó –≠–∫—Å–ø–æ—Ä—Ç relations –≤ –ª–∏—Å—Ç '{sheet_name}'")
        
        self.client = GoogleSheetsClient(
            credentials_path=self.credentials_path,
            spreadsheet_id=spreadsheet_id,
            worksheet_name=sheet_name
        )
        
        relations = self.session.query(Relation).all()
        logger.info(f"   –ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–µ–π: {len(relations)}")
        
        for rel in relations:
            # –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π
            source = self.session.query(FunctionalItem).get(rel.source_id)
            target = self.session.query(FunctionalItem).get(rel.target_id)
            
            row_data = {
                'Source ID': rel.source_id,
                'Source FuncID': source.functional_id if source else '',
                'Source Title': source.title if source else '',
                'Target ID': rel.target_id,
                'Target FuncID': target.functional_id if target else '',
                'Target Title': target.title if target else '',
                'Type': rel.type or 'hierarchy',
                'Description': rel.description or '',
            }
            self.client.append_result(row_data)
        
        self.client.flush()
        logger.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(relations)} —Å–≤—è–∑–µ–π")
        
        return len(relations)
    
    def export_coverage_matrix(self, spreadsheet_id: str, sheet_name: str = "Coverage Matrix"):
        """
        –≠–∫—Å–ø–æ—Ä—Ç –º–∞—Ç—Ä–∏—Ü—ã –ø–æ–∫—Ä—ã—Ç–∏—è —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        
        –°—Ç—Ä–æ–∫–∏: —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        –ö–æ–ª–æ–Ω–∫–∏: TC, –∞–≤—Ç–æ—Ç–µ—Å—Ç—ã, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        """
        logger.info(f"üìã –≠–∫—Å–ø–æ—Ä—Ç coverage matrix –≤ –ª–∏—Å—Ç '{sheet_name}'")
        
        self.client = GoogleSheetsClient(
            credentials_path=self.credentials_path,
            spreadsheet_id=spreadsheet_id,
            worksheet_name=sheet_name
        )
        
        items = self.session.query(FunctionalItem).filter(
            FunctionalItem.type.in_(['Feature', 'Story', 'Page', 'Element'])
        ).all()
        
        logger.info(f"   –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã: {len(items)}")
        
        for item in items:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ
            has_tc = bool(item.test_cases_linked and item.test_cases_linked.strip())
            has_automation = item.automation_status not in [None, '', 'Not Started']
            has_docs = bool(item.documentation_links and item.documentation_links.strip())
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è
            coverage_score = sum([has_tc, has_automation, has_docs])
            coverage_pct = int((coverage_score / 3) * 100)
            
            row_data = {
                'FuncID': item.functional_id or '',
                'Title': item.title or '',
                'Type': item.type or '',
                'Crit': '–î–∞' if item.is_crit else '',
                'Test Cases': '–î–∞' if has_tc else '–ù–µ—Ç',
                'Automation': item.automation_status or 'Not Started',
                'Documentation': '–î–∞' if has_docs else '–ù–µ—Ç',
                'Coverage %': f'{coverage_pct}%',
                'QA': item.responsible_qa.name if item.responsible_qa else '',
            }
            self.client.append_result(row_data)
        
        self.client.flush()
        logger.info(f"‚úÖ –ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ–∫—Ä—ã—Ç–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        # TODO: –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ü–≤–µ—Ç–∞) —á–µ—Ä–µ–∑ Google Sheets API
        # –ó–µ–ª—ë–Ω—ã–π: –ø–æ–∫—Ä—ã—Ç–∏–µ 100%, –ñ—ë–ª—Ç—ã–π: 50-99%, –ö—Ä–∞—Å–Ω—ã–π: 0-49%
        
        return len(items)
    
    def export_raci_matrix(self, spreadsheet_id: str, sheet_name: str = "RACI Matrix"):
        """
        –≠–∫—Å–ø–æ—Ä—Ç RACI –º–∞—Ç—Ä–∏—Ü—ã
        
        –°—Ç—Ä–æ–∫–∏: —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        –ö–æ–ª–æ–Ω–∫–∏: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
        –ó–Ω–∞—á–µ–Ω–∏—è: R/A/C/I
        """
        logger.info(f"üë• –≠–∫—Å–ø–æ—Ä—Ç RACI matrix –≤ –ª–∏—Å—Ç '{sheet_name}'")
        
        self.client = GoogleSheetsClient(
            credentials_path=self.credentials_path,
            spreadsheet_id=spreadsheet_id,
            worksheet_name=sheet_name
        )
        
        items = self.session.query(FunctionalItem).all()
        users = self.session.query(User).filter(User.is_active == True).all()
        
        logger.info(f"   –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items)}, –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {len(users)}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Ç—Ä–∏—Ü—É
        for item in items:
            row_data = {
                'FuncID': item.functional_id or '',
                'Title': item.title or '',
                'Type': item.type or '',
            }
            
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å
            for user in users:
                role = []
                if item.responsible_qa_id == user.id:
                    role.append('R(QA)')
                if item.responsible_dev_id == user.id:
                    role.append('R(Dev)')
                if item.accountable_id == user.id:
                    role.append('A')
                # TODO: –î–æ–±–∞–≤–∏—Ç—å C –∏ I –∏–∑ JSON –ø–æ–ª–µ–π
                
                row_data[user.name] = ', '.join(role) if role else ''
            
            self.client.append_result(row_data)
        
        self.client.flush()
        logger.info(f"‚úÖ RACI –º–∞—Ç—Ä–∏—Ü–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        return len(items)
    
    def export_test_plan(
        self, 
        spreadsheet_id: str, 
        sheet_name: str,
        filters: Dict[str, Any]
    ):
        """
        –≠–∫—Å–ø–æ—Ä—Ç —Ç–µ—Å—Ç-–ø–ª–∞–Ω–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        
        Args:
            filters: –§–∏–ª—å—Ç—Ä—ã (is_crit, is_focus, responsible_qa_id, type)
        """
        logger.info(f"üìù –≠–∫—Å–ø–æ—Ä—Ç test plan –≤ –ª–∏—Å—Ç '{sheet_name}'")
        
        self.client = GoogleSheetsClient(
            credentials_path=self.credentials_path,
            spreadsheet_id=spreadsheet_id,
            worksheet_name=sheet_name
        )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        query = self.session.query(FunctionalItem)
        
        if filters.get('is_crit'):
            query = query.filter(FunctionalItem.is_crit == True)
        if filters.get('is_focus'):
            query = query.filter(FunctionalItem.is_focus == True)
        if filters.get('type'):
            query = query.filter(FunctionalItem.type.in_(filters['type']))
        if filters.get('responsible_qa_id'):
            query = query.filter(FunctionalItem.responsible_qa_id.in_(filters['responsible_qa_id']))
        
        items = query.all()
        logger.info(f"   –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ç–µ—Å—Ç-–ø–ª–∞–Ω–µ: {len(items)}")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ—Å—Ç-–ø–ª–∞–Ω–∞
        for item in items:
            row_data = {
                'FuncID': item.functional_id or '',
                'Title': item.title or '',
                'Description': item.description or '',
                'Type': item.type or '',
                'Segment': item.segment or '',
                'Priority': '–ö—Ä–∏—Ç–∏—á–Ω–æ' if item.is_crit else ('–§–æ–∫—É—Å' if item.is_focus else '–û–±—ã—á–Ω—ã–π'),
                'QA': item.responsible_qa.name if item.responsible_qa else '',
                'Test Cases': item.test_cases_linked or '–ù–µ—Ç',
                'Automation': item.automation_status or 'Not Started',
                'Status': item.status or 'Open',
                'Notes': '',  # –î–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            }
            self.client.append_result(row_data)
        
        self.client.flush()
        logger.info(f"‚úÖ –¢–µ—Å—Ç-–ø–ª–∞–Ω —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        return len(items)
