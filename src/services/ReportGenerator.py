"""
Report Generator Service

–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–æ–≤ –∏–∑ markdown —à–∞–±–ª–æ–Ω–æ–≤ —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
"""

from typing import Dict, List, Optional, Any
from datetime import datetime
from sqlalchemy.orm import Session
from src.models import FunctionalItem, User, ZohoTask, ReportTemplate
import re
import logging

logger = logging.getLogger(__name__)


class ReportGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á—ë—Ç–æ–≤ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤"""
    
    def __init__(self, session: Session):
        self.session = session
    
    def generate_report(
        self, 
        template_id: int,
        context: Optional[Dict[str, Any]] = None,
        filters: Optional[Dict] = None
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞
        
        Args:
            template_id: ID —à–∞–±–ª–æ–Ω–∞
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∞–≤—Ç–æ–¥–∞–Ω–Ω—ã–µ)
            filters: –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π markdown –æ—Ç—á—ë—Ç
        """
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω
        template = self.session.query(ReportTemplate).get(template_id)
        if not template:
            raise ValueError(f"–®–∞–±–ª–æ–Ω —Å ID {template_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        logger.info(f"üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –ø–æ —à–∞–±–ª–æ–Ω—É: {template.name}")
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data_context = self._build_context(filters or {})
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        if context:
            data_context.update(context)
        
        # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
        report_content = self._render_template(template.content, data_context)
        
        logger.info(f"‚úÖ –û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {len(report_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return report_content
    
    def _build_context(self, filters: Dict) -> Dict[str, Any]:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î"""
        context = {}
        
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        context['date'] = datetime.now().strftime('%Y-%m-%d')
        context['datetime'] = datetime.now().strftime('%Y-%m-%d %H:%M')
        
        # –î–∞–Ω–Ω—ã–µ –∏–∑ functional_items
        query = self.session.query(FunctionalItem)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if filters.get('milestone_name'):
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω milestone - –±–µ—Ä—ë–º –∑–∞–¥–∞—á–∏ –∏–∑ zoho_tasks
            zoho_tasks = self.session.query(ZohoTask).filter(
                ZohoTask.milestone_name == filters['milestone_name']
            ).all()
            context['milestone_name'] = filters['milestone_name']
            context['task_count'] = len(zoho_tasks)
            context['task_table'] = self._format_zoho_tasks_table(zoho_tasks)
            context['task_list'] = self._format_zoho_tasks_list(zoho_tasks)
        
        if filters.get('is_crit'):
            query = query.filter(FunctionalItem.is_crit == True)
        
        if filters.get('is_focus'):
            query = query.filter(FunctionalItem.is_focus == True)
        
        if filters.get('type'):
            if isinstance(filters['type'], list):
                query = query.filter(FunctionalItem.type.in_(filters['type']))
            else:
                query = query.filter(FunctionalItem.type == filters['type'])
        
        if filters.get('responsible_qa_id'):
            query = query.filter(FunctionalItem.responsible_qa_id == filters['responsible_qa_id'])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        items = query.all()
        
        context['item_count'] = len(items)
        context['feature_list'] = self._format_functional_items_list(items)
        context['feature_table'] = self._format_functional_items_table(items)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–∫—Ä—ã—Ç–∏—é
        coverage_stats = self._calculate_coverage(items)
        context.update(coverage_stats)
        
        # QA –∫–æ–º–∞–Ω–¥–∞
        qa_users = self.session.query(User).filter(
            User.is_active == True,
            User.role.like('%QA%')
        ).all()
        context['qa_team'] = ', '.join([u.name for u in qa_users])
        if qa_users:
            context['qa_lead'] = qa_users[0].name  # –ü–µ—Ä–≤—ã–π QA –∫–∞–∫ –ª–∏–¥
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π QA
        if filters.get('responsible_qa_id'):
            qa = self.session.query(User).get(filters['responsible_qa_id'])
            if qa:
                context['qa_name'] = qa.name
        
        return context
    
    def _render_template(self, template: str, context: Dict[str, Any]) -> str:
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞ —Å –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        result = template
        
        # –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö placeholder'–æ–≤ {{key}}
        for key, value in context.items():
            placeholder = f'{{{{{key}}}}}'
            if placeholder in result:
                result = result.replace(placeholder, str(value))
        
        return result
    
    def _format_functional_items_list(self, items: List[FunctionalItem]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        if not items:
            return "- –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        lines = []
        for item in items[:20]:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 20 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            crit = 'üî¥' if item.is_crit else ''
            focus = 'üéØ' if item.is_focus else ''
            lines.append(f"- {crit}{focus} **{item.functional_id}**: {item.title}")
        
        if len(items) > 20:
            lines.append(f"- ... –∏ –µ—â—ë {len(items) - 20} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        return '\n'.join(lines)
    
    def _format_functional_items_table(self, items: List[FunctionalItem]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        if not items:
            return "| - | - | - | - |\n| –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö | | | |"
        
        lines = []
        for item in items[:30]:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 30 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            qa = item.responsible_qa.name if item.responsible_qa else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
            dev = item.responsible_dev.name if item.responsible_dev else '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
            crit = '‚úì' if item.is_crit else ''
            
            lines.append(
                f"| {item.functional_id} | {item.title[:50]} | {item.type} | {qa} | {crit} |"
            )
        
        if len(items) > 30:
            lines.append(f"| ... | –∏ –µ—â—ë {len(items) - 30} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ | | | |")
        
        return '\n'.join(lines)
    
    def _format_zoho_tasks_table(self, tasks: List[ZohoTask]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–¥–∞—á Zoho"""
        if not tasks:
            return "| - | - | - | - | - |\n| –ù–µ—Ç –∑–∞–¥–∞—á | | | | |"
        
        lines = []
        for task in tasks[:50]:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 50 –∑–∞–¥–∞—á
            lines.append(
                f"| {task.zoho_task_id} | {task.name[:40]} | {task.priority or '-'} | "
                f"{task.owner_name or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'} | {task.status} |"
            )
        
        if len(tasks) > 50:
            lines.append(f"| ... | –∏ –µ—â—ë {len(tasks) - 50} –∑–∞–¥–∞—á | | | |")
        
        return '\n'.join(lines)
    
    def _format_zoho_tasks_list(self, tasks: List[ZohoTask]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á Zoho"""
        if not tasks:
            return "- –ù–µ—Ç –∑–∞–¥–∞—á"
        
        lines = []
        for task in tasks[:20]:
            status_icon = '‚úÖ' if task.status in ['Completed', 'RELEASED'] else 'üîÑ'
            lines.append(f"- {status_icon} **{task.zoho_task_id}**: {task.name}")
        
        if len(tasks) > 20:
            lines.append(f"- ... –∏ –µ—â—ë {len(tasks) - 20} –∑–∞–¥–∞—á")
        
        return '\n'.join(lines)
    
    def _calculate_coverage(self, items: List[FunctionalItem]) -> Dict[str, Any]:
        """–†–∞—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∫—Ä—ã—Ç–∏—è"""
        total = len(items)
        if total == 0:
            return {
                'coverage': 0,
                'with_tests': 0,
                'automated': 0,
                'documented': 0
            }
        
        with_tests = sum(1 for item in items if item.test_cases_linked)
        automated = sum(
            1 for item in items 
            if item.automation_status in ['Automated', 'Partially Automated']
        )
        documented = sum(1 for item in items if item.documentation_links)
        
        # –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è
        coverage = int(((with_tests + automated + documented) / (total * 3)) * 100)
        
        return {
            'coverage': coverage,
            'with_tests': with_tests,
            'with_tests_pct': int((with_tests / total) * 100),
            'automated': automated,
            'automated_pct': int((automated / total) * 100),
            'documented': documented,
            'documented_pct': int((documented / total) * 100),
        }
    
    def get_available_placeholders(self) -> List[str]:
        """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö placeholder'–æ–≤"""
        return [
            '{{date}}',
            '{{datetime}}',
            '{{milestone_name}}',
            '{{task_count}}',
            '{{task_table}}',
            '{{task_list}}',
            '{{item_count}}',
            '{{feature_list}}',
            '{{feature_table}}',
            '{{coverage}}',
            '{{with_tests}}',
            '{{automated}}',
            '{{documented}}',
            '{{qa_team}}',
            '{{qa_lead}}',
            '{{qa_name}}',
        ]
