"""
Google Sheets Importer Service

–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets –≤ –ë–î VoluptAS:
- –ò–º–ø–æ—Ä—Ç functional_items
- –ò–º–ø–æ—Ä—Ç users
- –ò–º–ø–æ—Ä—Ç relations
- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π (update vs insert)
"""

from typing import Optional, List, Dict, Any
from sqlalchemy.orm import Session
from src.models import FunctionalItem, User, Relation
from src.integrations.google import GoogleSheetsClient
import logging

logger = logging.getLogger(__name__)


class GoogleSheetsImporter:
    """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets –≤ –ë–î"""
    
    def __init__(self, credentials_path: str, session: Session):
        """
        Args:
            credentials_path: –ü—É—Ç—å –∫ service_account.json
            session: SQLAlchemy session
        """
        self.credentials_path = credentials_path
        self.session = session
    
    def import_all_tables(self, spreadsheet_id: str) -> Dict[str, int]:
        """
        –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∏–∑ Google Sheets
        
        Args:
            spreadsheet_id: ID Google Spreadsheet
        
        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
        """
        logger.info(f"üöÄ –ù–∞—á–∞–ª–æ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ spreadsheet {spreadsheet_id}")
        
        stats = {
            'functional_items': 0,
            'users': 0,
            'relations': 0,
            'errors': []
        }
        
        try:
            # 1. –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å–Ω–∞—á–∞–ª–∞, —Ç.–∫. –Ω–∞ –Ω–∏—Ö —Å—Å—ã–ª–∫–∏)
            stats['users'] = self._import_users(spreadsheet_id, "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
            
            # 2. –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            stats['functional_items'] = self._import_functional_items(
                spreadsheet_id, 
                "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"
            )
            
            # 3. –ò–º–ø–æ—Ä—Ç —Å–≤—è–∑–µ–π
            stats['relations'] = self._import_relations(spreadsheet_id, "–°–≤—è–∑–∏")
            
            logger.info(f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: {stats}")
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            stats['errors'].append(str(e))
            raise
    
    def _import_users(self, spreadsheet_id: str, sheet_name: str) -> int:
        """–ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        logger.info(f"üë• –ò–º–ø–æ—Ä—Ç users –∏–∑ –ª–∏—Å—Ç–∞ '{sheet_name}'")
        
        client = GoogleSheetsClient(
            credentials_path=self.credentials_path,
            spreadsheet_id=spreadsheet_id,
            worksheet_name=sheet_name,
            clear_on_open=False  # –ù–ï –æ—á–∏—â–∞—Ç—å –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ!
        )
        
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        all_data = client.sheet.get_all_records()
        logger.info(f"   –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(all_data)}")
        
        imported_count = 0
        updated_count = 0
        
        for row in all_data:
            try:
                # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = self.session.query(User).filter(
                    User.name == row.get('Name', '')
                ).first()
                
                if user:
                    # –û–±–Ω–æ–≤–ª—è–µ–º
                    user.position = row.get('Position', '') or None
                    user.email = row.get('Email', '') or None
                    user.zoho_id = row.get('Zoho ID', '') or None
                    user.github_username = row.get('GitHub', '') or None
                    user.is_active = 1 if row.get('Active') == '–î–∞' else 0
                    updated_count += 1
                else:
                    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ
                    user = User(
                        name=row.get('Name', ''),
                        position=row.get('Position', '') or None,
                        email=row.get('Email', '') or None,
                        zoho_id=row.get('Zoho ID', '') or None,
                        github_username=row.get('GitHub', '') or None,
                        is_active=1 if row.get('Active') == '–î–∞' else 0
                    )
                    self.session.add(user)
                    imported_count += 1
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {row.get('Name')}: {e}")
        
        self.session.commit()
        logger.info(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {imported_count}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
        
        return imported_count + updated_count
    
    def _import_functional_items(self, spreadsheet_id: str, sheet_name: str) -> int:
        """–ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        logger.info(f"üìä –ò–º–ø–æ—Ä—Ç functional_items –∏–∑ –ª–∏—Å—Ç–∞ '{sheet_name}'")
        
        client = GoogleSheetsClient(
            credentials_path=self.credentials_path,
            spreadsheet_id=spreadsheet_id,
            worksheet_name=sheet_name,
            clear_on_open=False  # –ù–ï –æ—á–∏—â–∞—Ç—å –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ!
        )
        
        all_data = client.sheet.get_all_records()
        logger.info(f"   –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(all_data)}")
        
        imported_count = 0
        updated_count = 0
        
        for row in all_data:
            try:
                func_id = row.get('FuncID', '').strip()
                if not func_id:
                    continue
                
                # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
                item = self.session.query(FunctionalItem).filter(
                    FunctionalItem.functional_id == func_id
                ).first()
                
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏
                qa_user = self.session.query(User).filter(
                    User.name == row.get('QA', '')
                ).first() if row.get('QA') else None
                
                dev_user = self.session.query(User).filter(
                    User.name == row.get('Dev', '')
                ).first() if row.get('Dev') else None
                
                accountable_user = self.session.query(User).filter(
                    User.name == row.get('Accountable', '')
                ).first() if row.get('Accountable') else None
                
                data = {
                    'functional_id': func_id,
                    'alias_tag': row.get('Alias', '') or None,
                    'title': row.get('Title', '') or None,
                    'type': row.get('Type', '') or None,
                    'segment': row.get('Segment', '') or None,
                    'module': row.get('Module', '') or None,
                    'epic': row.get('Epic', '') or None,
                    'feature': row.get('Feature', '') or None,
                    'is_crit': row.get('isCrit') == '–î–∞',
                    'is_focus': row.get('isFocus') == '–î–∞',
                    'responsible_qa_id': qa_user.id if qa_user else None,
                    'responsible_dev_id': dev_user.id if dev_user else None,
                    'accountable_id': accountable_user.id if accountable_user else None,
                    'test_cases_linked': row.get('Test Cases', '') or None,
                    'automation_status': row.get('Automation', '') or None,
                    'documentation_links': row.get('Documentation', '') or None,
                    'status': row.get('Status', '') or None,
                    'maturity': row.get('Maturity', '') or None,
                }
                
                if item:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
                    for key, value in data.items():
                        setattr(item, key, value)
                    updated_count += 1
                else:
                    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
                    item = FunctionalItem(**data)
                    self.session.add(item)
                    imported_count += 1
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ {row.get('FuncID')}: {e}")
        
        self.session.commit()
        logger.info(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {imported_count}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
        
        return imported_count + updated_count
    
    def _import_relations(self, spreadsheet_id: str, sheet_name: str) -> int:
        """–ò–º–ø–æ—Ä—Ç —Å–≤—è–∑–µ–π"""
        logger.info(f"üîó –ò–º–ø–æ—Ä—Ç relations –∏–∑ –ª–∏—Å—Ç–∞ '{sheet_name}'")
        
        try:
            client = GoogleSheetsClient(
                credentials_path=self.credentials_path,
                spreadsheet_id=spreadsheet_id,
                worksheet_name=sheet_name,
                clear_on_open=False  # –ù–ï –æ—á–∏—â–∞—Ç—å –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ!
            )
        except Exception as e:
            logger.warning(f"–õ–∏—Å—Ç '{sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {e}")
            return 0
        
        all_data = client.sheet.get_all_records()
        logger.info(f"   –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(all_data)}")
        
        imported_count = 0
        
        for row in all_data:
            try:
                source_id = row.get('Source ID')
                target_id = row.get('Target ID')
                
                if not source_id or not target_id:
                    continue
                
                # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–≤—è–∑—å
                rel = self.session.query(Relation).filter(
                    Relation.source_id == source_id,
                    Relation.target_id == target_id,
                    Relation.type == row.get('Type', 'hierarchy')
                ).first()
                
                if not rel:
                    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–≤—è–∑—å
                    rel = Relation(
                        source_id=int(source_id),
                        target_id=int(target_id),
                        type=row.get('Type', 'hierarchy'),
                        weight=float(row.get('Weight', 1.0)),
                        directed=row.get('Directed') == '–î–∞',
                        active=row.get('Active', '–î–∞') == '–î–∞'
                    )
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º notes –≤ metadata
                    notes = row.get('Notes', '')
                    if notes:
                        rel.set_metadata({'notes': notes})
                    
                    self.session.add(rel)
                    imported_count += 1
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–≤—è–∑–∏ {row.get('Source ID')}->{row.get('Target ID')}: {e}")
        
        self.session.commit()
        logger.info(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–≤—è–∑–µ–π: {imported_count}")
        
        return imported_count
