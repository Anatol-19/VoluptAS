"""
Zoho Sync Service

–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á –∏–∑ Zoho Projects –≤ VoluptAS:
- –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ Zoho Projects (–ø–æ milestone, tasklist, —Ñ–∏–ª—å—Ç—Ä–∞–º)
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î (zoho_tasks)
- –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å functional_items
- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö QA
"""

from typing import List, Dict, Optional
from datetime import datetime
from sqlalchemy.orm import Session
from src.integrations.zoho.Zoho_api_client import ZohoAPI
from src.models import ZohoTask, FunctionalItem, User
import logging

logger = logging.getLogger(__name__)


class ZohoSyncService:
    """–°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á Zoho —Å VoluptAS"""
    
    def __init__(self, session: Session):
        """
        Args:
            session: SQLAlchemy session
        """
        self.session = session
        self.zoho_client = None
    
    def init_zoho_client(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Zoho API –∫–ª–∏–µ–Ω—Ç–∞
        
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        try:
            self.zoho_client = ZohoAPI()
            logger.info("‚úÖ Zoho API –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Zoho API: {e}")
            return False
    
    def sync_tasks_by_milestone(self, milestone_name: str) -> Dict[str, int]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –∏–∑ Zoho –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é milestone
        
        Args:
            milestone_name: –ù–∞–∑–≤–∞–Ω–∏–µ milestone –≤ Zoho
            
        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        if not self.zoho_client:
            if not self.init_zoho_client():
                return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Zoho API'}
        
        logger.info(f"üìã –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –∏–∑ milestone: {milestone_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º ID milestone
        milestone_id = self.zoho_client.get_milestone_id_by_name(milestone_name)
        if not milestone_id:
            logger.warning(f"‚ö†Ô∏è Milestone '{milestone_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {'error': f'Milestone "{milestone_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω'}
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏
        tasks_data = self.zoho_client.get_tasks_by_milestone(milestone_id)
        logger.info(f"   –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks_data)}")
        
        return self._process_tasks(tasks_data, milestone_id, milestone_name)
    
    def sync_tasks_by_tasklist(self, tasklist_name: str) -> Dict[str, int]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –∏–∑ Zoho –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é tasklist
        
        Args:
            tasklist_name: –ù–∞–∑–≤–∞–Ω–∏–µ tasklist –≤ Zoho
            
        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        if not self.zoho_client:
            if not self.init_zoho_client():
                return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Zoho API'}
        
        logger.info(f"üìã –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –∏–∑ tasklist: {tasklist_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º ID tasklist
        tasklist_id = self.zoho_client.get_tasklist_id_by_name(tasklist_name)
        if not tasklist_id:
            logger.warning(f"‚ö†Ô∏è Tasklist '{tasklist_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {'error': f'Tasklist "{tasklist_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω'}
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏
        tasks_data = self.zoho_client.get_tasks_by_tasklist(tasklist_id)
        logger.info(f"   –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks_data)}")
        
        return self._process_tasks(tasks_data, tasklist_id=tasklist_id, tasklist_name=tasklist_name)
    
    def sync_tasks_by_filter(
        self, 
        created_after: Optional[str] = None,
        created_before: Optional[str] = None,
        owner_id: Optional[str] = None,
        milestone_id: Optional[str] = None
    ) -> Dict[str, int]:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
        
        Args:
            created_after: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (YYYY-MM-DD)
            created_before: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD)
            owner_id: ID –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ
            milestone_id: ID milestone
            
        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        if not self.zoho_client:
            if not self.init_zoho_client():
                return {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Zoho API'}
        
        logger.info(f"üìã –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏
        tasks_data = self.zoho_client.get_entities_by_filter(
            entity_type='tasks',
            created_after=created_after,
            created_before=created_before,
            owner_id=owner_id,
            milestone_id=milestone_id
        )
        logger.info(f"   –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks_data)}")
        
        return self._process_tasks(tasks_data)
    
    def _process_tasks(
        self, 
        tasks_data: List[Dict], 
        milestone_id: Optional[str] = None,
        milestone_name: Optional[str] = None,
        tasklist_id: Optional[str] = None,
        tasklist_name: Optional[str] = None
    ) -> Dict[str, int]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –ë–î
        
        Args:
            tasks_data: –î–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á –∏–∑ Zoho API
            milestone_id: ID milestone (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            milestone_name: –ù–∞–∑–≤–∞–Ω–∏–µ milestone (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            tasklist_id: ID tasklist (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            tasklist_name: –ù–∞–∑–≤–∞–Ω–∏–µ tasklist (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (new, updated, skipped)
        """
        stats = {'new': 0, 'updated': 0, 'skipped': 0, 'errors': 0}
        
        for task in tasks_data:
            try:
                zoho_task_id = str(task.get('id'))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–¥–∞—á–∞
                existing_task = self.session.query(ZohoTask).filter_by(
                    zoho_task_id=zoho_task_id
                ).first()
                
                if existing_task:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
                    self._update_task(existing_task, task, milestone_name, tasklist_name)
                    stats['updated'] += 1
                else:
                    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
                    self._create_task(task, milestone_id, milestone_name, tasklist_id, tasklist_name)
                    stats['new'] += 1
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ {task.get('id')}: {e}")
                stats['errors'] += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        try:
            self.session.commit()
            logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {stats}")
        except Exception as e:
            self.session.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
            stats['errors'] += 1
        
        return stats
    
    def _create_task(
        self, 
        task_data: Dict, 
        milestone_id: Optional[str] = None,
        milestone_name: Optional[str] = None,
        tasklist_id: Optional[str] = None,
        tasklist_name: Optional[str] = None
    ):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –≤ –ë–î"""
        zoho_task = ZohoTask(
            zoho_task_id=str(task_data.get('id')),
            zoho_project_id=str(task_data.get('project_id', '')),
            name=task_data.get('name', ''),
            description=task_data.get('description', ''),
            status=task_data.get('status', {}).get('name', ''),
            priority=task_data.get('priority', ''),
            created_time=self._parse_zoho_date(task_data.get('created_time')),
            start_date=self._parse_zoho_date(task_data.get('start_date')),
            end_date=self._parse_zoho_date(task_data.get('end_date')),
            owner_id=str(task_data.get('details', {}).get('owners', [{}])[0].get('id', '')),
            owner_name=task_data.get('details', {}).get('owners', [{}])[0].get('name', ''),
            milestone_id=milestone_id or str(task_data.get('milestone', {}).get('id', '')),
            milestone_name=milestone_name or task_data.get('milestone', {}).get('name', ''),
            tasklist_id=tasklist_id or str(task_data.get('tasklist', {}).get('id', '')),
            tasklist_name=tasklist_name or task_data.get('tasklist', {}).get('name', ''),
            tags=task_data.get('tags', []),
            custom_fields=task_data.get('custom_fields', {}),
        )
        self.session.add(zoho_task)
        logger.debug(f"   + –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {zoho_task.name}")
    
    def _update_task(
        self, 
        zoho_task: ZohoTask, 
        task_data: Dict,
        milestone_name: Optional[str] = None,
        tasklist_name: Optional[str] = None
    ):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏"""
        zoho_task.name = task_data.get('name', zoho_task.name)
        zoho_task.description = task_data.get('description', zoho_task.description)
        zoho_task.status = task_data.get('status', {}).get('name', zoho_task.status)
        zoho_task.priority = task_data.get('priority', zoho_task.priority)
        zoho_task.start_date = self._parse_zoho_date(task_data.get('start_date')) or zoho_task.start_date
        zoho_task.end_date = self._parse_zoho_date(task_data.get('end_date')) or zoho_task.end_date
        zoho_task.owner_name = task_data.get('details', {}).get('owners', [{}])[0].get('name', zoho_task.owner_name)
        
        if milestone_name:
            zoho_task.milestone_name = milestone_name
        if tasklist_name:
            zoho_task.tasklist_name = tasklist_name
        
        zoho_task.synced_at = datetime.utcnow()
        logger.debug(f"   ‚Üª –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {zoho_task.name}")
    
    @staticmethod
    def _parse_zoho_date(date_str: Optional[str]) -> Optional[datetime]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ Zoho (—Ñ–æ—Ä–º–∞—Ç: MM-DD-YYYY –∏–ª–∏ ISO)"""
        if not date_str:
            return None
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        formats = ['%m-%d-%Y', '%Y-%m-%d', '%Y-%m-%dT%H:%M:%S']
        for fmt in formats:
            try:
                return datetime.strptime(date_str, fmt)
            except ValueError:
                continue
        
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: {date_str}")
        return None
    
    def get_zoho_tasks(self, filters: Optional[Dict] = None) -> List[ZohoTask]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á Zoho –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
        
        Args:
            filters: –§–∏–ª—å—Ç—Ä—ã (is_synced, milestone_name, status)
            
        Returns:
            List[ZohoTask]: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        """
        query = self.session.query(ZohoTask)
        
        if filters:
            if 'is_synced' in filters:
                query = query.filter(ZohoTask.is_synced == filters['is_synced'])
            if 'milestone_name' in filters:
                query = query.filter(ZohoTask.milestone_name == filters['milestone_name'])
            if 'status' in filters:
                query = query.filter(ZohoTask.status == filters['status'])
        
        return query.order_by(ZohoTask.created_time.desc()).all()
