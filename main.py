import sys
import logging
from logging.handlers import RotatingFileHandler
from pathlib import Path
project_root = Path(__file__).resolve().parent
sys.path.insert(0, str(project_root))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
log_dir = project_root / 'logs'
log_dir.mkdir(exist_ok=True)
log_file = log_dir / 'voluptas.log'

# –†–æ—Ç–∞—Ü–∏—è: –º–∞–∫—Å–∏–º—É–º 10 MB –Ω–∞ —Ñ–∞–π–ª, 5 backup —Ñ–∞–π–ª–æ–≤
file_handler = RotatingFileHandler(
    log_file, 
    maxBytes=10*1024*1024,  # 10 MB
    backupCount=5,
    encoding='utf-8'
)
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(logging.Formatter(
    '%(asctime)s [%(levelname)-8s] %(name)s:%(lineno)d - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
))

console_handler = logging.StreamHandler(sys.stdout)
console_handler.setLevel(logging.INFO)
console_handler.setFormatter(logging.Formatter(
    '%(asctime)s [%(levelname)-8s] %(message)s',
    datefmt='%H:%M:%S'
))

logging.basicConfig(
    level=logging.DEBUG,
    handlers=[file_handler, console_handler]
)

logger = logging.getLogger(__name__)
logger.info("="*60)
logger.info(f"VoluptAS starting... Working directory: {project_root}")
logger.info(f"Log file: {log_file}")

from PyQt6.QtWidgets import *
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QAction
from src.db import SessionLocal
from src.models import FunctionalItem, User
from src.utils.role_filter import RoleFilter
from src.utils.version import get_version_banner


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def get_field_config_for_type(item_type):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–ª–µ–π –¥–ª—è —Ç–∏–ø–∞ —Å—É—â–Ω–æ—Å—Ç–∏"""
    base_fields = ['functional_id', 'title', 'description', 'segment', 'is_crit', 'is_focus', 
                   'responsible_qa', 'responsible_dev', 'accountable']
    
    configs = {
        'Module': {
            'show': ['functional_id', 'title', 'description', 'is_crit', 'is_focus', 
                     'responsible_qa', 'responsible_dev', 'accountable', 'documentation_links'],
            'hide': ['module', 'epic', 'feature', 'segment'],
            'has_coverage': False,
            'has_segment': False
        },
        'Epic': {
            'show': base_fields + ['module', 'documentation_links'],
            'hide': ['epic', 'feature', 'segment'],
            'has_coverage': False,
            'has_segment': False
        },
        'Feature': {
            'show': base_fields + ['module', 'epic', 'test_cases_linked', 'automation_status', 'documentation_links'],
            'hide': ['feature'],
            'has_coverage': True,
            'has_segment': True
        },
        'Story': {
            'show': base_fields + ['module', 'epic', 'feature', 'test_cases_linked', 'automation_status', 'documentation_links'],
            'hide': [],
            'has_coverage': True,
            'has_segment': True
        },
        'Page': {
            'show': base_fields + ['module', 'epic', 'test_cases_linked', 'automation_status', 'documentation_links'],
            'hide': ['feature'],
            'has_coverage': True,
            'has_segment': True
        },
        'Element': {
            'show': base_fields + ['test_cases_linked', 'automation_status', 'documentation_links'],
            'hide': ['module', 'epic', 'feature'],
            'has_coverage': True,
            'has_segment': True
        },
        'Service': {
            'show': base_fields + ['module', 'container', 'database', 'test_cases_linked', 'automation_status', 'documentation_links'],
            'hide': ['epic', 'feature'],
            'has_coverage': True,
            'has_segment': True
        }
    }
    return configs.get(item_type, configs['Feature'])


# === –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –î–ò–ê–õ–û–ì –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ===

class DynamicEditDialog(QDialog):
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—è–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å—É—â–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, item, session, parent=None):
        super().__init__(parent)
        self.item = item
        self.session = session
        self.is_new = not hasattr(item, 'id') or item.id is None
        self.setWindowTitle(f'–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {item.functional_id}' if not self.is_new else '–ù–æ–≤–∞—è —Å—É—â–Ω–æ—Å—Ç—å')
        self.setMinimumWidth(700)
        self.setMinimumHeight(600)
        
        # –í–∏–¥–∂–µ—Ç—ã –¥–ª—è –ø–æ–ª–µ–π
        self.field_widgets = {}
        
        self.init_ui()
    
    def init_ui(self):
        main_layout = QVBoxLayout(self)
        
        # –í–∫–ª–∞–¥–∫–∏
        tabs = QTabWidget()
        
        # –í–∫–ª–∞–¥–∫–∞ 1: –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        basic_tab = QWidget()
        basic_layout = QFormLayout(basic_tab)
        
        # Functional ID (FuncID)
        self.functional_id_edit = QLineEdit(self.item.functional_id or '')
        self.functional_id_edit.setReadOnly(not self.is_new)
        basic_layout.addRow('* FuncID:', self.functional_id_edit)
        
        # Alias Tag (–∫–æ—Ä–æ—Ç–∫–∏–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–ª–∏–∞—Å)
        self.alias_tag_edit = QLineEdit(self.item.alias_tag or '')
        self.alias_tag_edit.setPlaceholderText('–ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä.: cookies, Login_Page)')
        alias_hint = QLabel('<i>–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞–ª–∏–∞—Å –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞. –ï—Å–ª–∏ –ø—É—Å—Ç–æ–π ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å FuncID</i>')
        alias_hint.setStyleSheet('color: gray; font-size: 9pt;')
        alias_hint.setWordWrap(True)
        basic_layout.addRow('Alias Tag:', self.alias_tag_edit)
        basic_layout.addRow('', alias_hint)
        
        # Title
        self.title_edit = QLineEdit(self.item.title or '')
        basic_layout.addRow('* Title:', self.title_edit)
        
        # Type
        self.type_combo = QComboBox()
        self.type_combo.addItems(['Module', 'Epic', 'Feature', 'Page', 'Service', 'Element', 'Story'])
        if self.item.type:
            self.type_combo.setCurrentText(self.item.type)
        self.type_combo.currentTextChanged.connect(self.on_type_changed)
        basic_layout.addRow('* Type:', self.type_combo)
        
        # Description
        self.description_edit = QTextEdit(self.item.description or '')
        self.description_edit.setMaximumHeight(100)
        basic_layout.addRow('Description:', self.description_edit)
        
        # Segment
        self.segment_combo = QComboBox()
        self.segment_combo.addItems(['', 'UI', 'UX/CX', 'API', 'Backend', 'Database', 'Integration', 'Security', 'Performance'])
        if self.item.segment:
            self.segment_combo.setCurrentText(self.item.segment)
        basic_layout.addRow('Segment:', self.segment_combo)
        self.field_widgets['segment'] = (basic_layout.labelForField(self.segment_combo), self.segment_combo)
        
        # Module
        self.module_combo = QComboBox()
        self.module_combo.setEditable(True)
        self.populate_combo(self.module_combo, 'module')
        basic_layout.addRow('Module:', self.module_combo)
        self.field_widgets['module'] = (basic_layout.labelForField(self.module_combo), self.module_combo)
        
        # Epic
        self.epic_combo = QComboBox()
        self.epic_combo.setEditable(True)
        self.populate_combo(self.epic_combo, 'epic')
        basic_layout.addRow('Epic:', self.epic_combo)
        self.field_widgets['epic'] = (basic_layout.labelForField(self.epic_combo), self.epic_combo)
        
        # Feature
        self.feature_combo = QComboBox()
        self.feature_combo.setEditable(True)
        self.populate_combo(self.feature_combo, 'feature')
        basic_layout.addRow('Feature:', self.feature_combo)
        self.field_widgets['feature'] = (basic_layout.labelForField(self.feature_combo), self.feature_combo)
        
        # Checkboxes
        self.is_crit_check = QCheckBox()
        self.is_crit_check.setChecked(bool(self.item.is_crit))
        basic_layout.addRow('Is Critical:', self.is_crit_check)
        
        self.is_focus_check = QCheckBox()
        self.is_focus_check.setChecked(bool(self.item.is_focus))
        basic_layout.addRow('Is Focus:', self.is_focus_check)
        
        tabs.addTab(basic_tab, 'üìã –û—Å–Ω–æ–≤–Ω—ã–µ')
        
        # –í–∫–ª–∞–¥–∫–∞ 2: –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ
        responsible_tab = QWidget()
        resp_layout = QFormLayout(responsible_tab)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = self.session.query(User).filter_by(is_active=1).order_by(User.name).all()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–æ–ª—è–º
        qa_users = RoleFilter.filter_users_for_qa(all_users)
        dev_users = RoleFilter.filter_users_for_dev(all_users)
        raci_users = RoleFilter.filter_users_for_raci(all_users)
        
        # Responsible QA - —Ç–æ–ª—å–∫–æ QA —Ä–æ–ª–∏
        self.qa_combo = QComboBox()
        qa_names = [''] + [u.name for u in qa_users]
        self.qa_combo.addItems(qa_names)
        if self.item.responsible_qa:
            self.qa_combo.setCurrentText(self.item.responsible_qa.name)
        resp_layout.addRow('Responsible QA:', self.qa_combo)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è QA
        qa_hint = QLabel('(—Ç–æ–ª—å–∫–æ QA —Ä–æ–ª–∏)')
        qa_hint.setStyleSheet('color: gray; font-size: 9pt; font-style: italic;')
        resp_layout.addRow('', qa_hint)
        
        # Responsible Dev - Dev, PM, DevOps —Ä–æ–ª–∏
        self.dev_combo = QComboBox()
        dev_names = [''] + [u.name for u in dev_users]
        self.dev_combo.addItems(dev_names)
        if self.item.responsible_dev:
            self.dev_combo.setCurrentText(self.item.responsible_dev.name)
        resp_layout.addRow('Responsible Dev:', self.dev_combo)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è Dev
        dev_hint = QLabel('(Dev, PM, DevOps —Ä–æ–ª–∏)')
        dev_hint.setStyleSheet('color: gray; font-size: 9pt; font-style: italic;')
        resp_layout.addRow('', dev_hint)
        
        # Accountable - –≤—Å–µ —Ä–æ–ª–∏
        self.accountable_combo = QComboBox()
        raci_names = [''] + [u.name for u in raci_users]
        self.accountable_combo.addItems(raci_names)
        if self.item.accountable:
            self.accountable_combo.setCurrentText(self.item.accountable.name)
        resp_layout.addRow('Accountable:', self.accountable_combo)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_label = QLabel('Consulted –∏ Informed –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö')
        info_label.setStyleSheet('color: gray; font-style: italic;')
        resp_layout.addRow(info_label)
        
        tabs.addTab(responsible_tab, 'üë• –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ')
        
        # –í–∫–ª–∞–¥–∫–∞ 3: –ü–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏
        coverage_tab = QWidget()
        cov_layout = QFormLayout(coverage_tab)
        
        self.test_cases_edit = QTextEdit(self.item.test_cases_linked or '')
        self.test_cases_edit.setMaximumHeight(80)
        self.test_cases_edit.setPlaceholderText('TC-001, TC-002, TC-003...')
        cov_layout.addRow('Test Cases:', self.test_cases_edit)
        
        self.automation_combo = QComboBox()
        self.automation_combo.addItems(['', 'Not Started', 'In Progress', 'Automated', 'Partially Automated', 'Not Applicable'])
        if self.item.automation_status:
            self.automation_combo.setCurrentText(self.item.automation_status)
        cov_layout.addRow('Automation Status:', self.automation_combo)
        
        self.docs_edit = QTextEdit(self.item.documentation_links or '')
        self.docs_edit.setMaximumHeight(80)
        self.docs_edit.setPlaceholderText('https://confluence..., https://docs...')
        cov_layout.addRow('Documentation Links:', self.docs_edit)
        
        tabs.addTab(coverage_tab, '‚úÖ –ü–æ–∫—Ä—ã—Ç–∏–µ')
        self.coverage_tab = coverage_tab
        
        # –í–∫–ª–∞–¥–∫–∞ 4: BDD Feature
        bdd_tab = QWidget()
        bdd_layout = QVBoxLayout(bdd_tab)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        bdd_buttons = QHBoxLayout()
        generate_btn = QPushButton('üõ†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Feature')
        generate_btn.clicked.connect(self.generate_bdd_feature)
        bdd_buttons.addWidget(generate_btn)
        
        export_btn = QPushButton('üíæ –≠–∫—Å–ø–æ—Ä—Ç .feature')
        export_btn.clicked.connect(self.export_bdd_feature)
        bdd_buttons.addWidget(export_btn)
        
        bdd_buttons.addStretch()
        bdd_layout.addLayout(bdd_buttons)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è Gherkin
        self.bdd_edit = QTextEdit()
        self.bdd_edit.setPlaceholderText('–ù–∞–∂–º–∏—Ç–µ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Feature" –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é...')
        self.bdd_edit.setStyleSheet('font-family: Consolas, monospace; font-size: 10pt;')
        bdd_layout.addWidget(self.bdd_edit)
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        hint_label = QLabel('üí° Gherkin syntax: Feature, Scenario, Given, When, Then, And')
        hint_label.setStyleSheet('color: gray; font-size: 9pt; font-style: italic;')
        bdd_layout.addWidget(hint_label)
        
        tabs.addTab(bdd_tab, 'üßë‚Äçüíª BDD')
        self.bdd_tab = bdd_tab
        
        main_layout.addWidget(tabs)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons = QDialogButtonBox(QDialogButtonBox.StandardButton.Save | QDialogButtonBox.StandardButton.Cancel)
        buttons.accepted.connect(self.save)
        buttons.rejected.connect(self.reject)
        main_layout.addWidget(buttons)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–∏–ø–∞
        self.on_type_changed(self.type_combo.currentText())
    
    def populate_combo(self, combo, field_name):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–±–æ–±–æ–∫—Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ –ë–î"""
        combo.addItem('')
        query = self.session.query(getattr(FunctionalItem, field_name)).filter(
            getattr(FunctionalItem, field_name).isnot(None)
        ).distinct().order_by(getattr(FunctionalItem, field_name))
        
        values = [v[0] for v in query.all()]
        combo.addItems(values)
        
        current_value = getattr(self.item, field_name)
        if current_value:
            combo.setCurrentText(current_value)
    
    def on_type_changed(self, item_type):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç/—Å–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞"""
        config = get_field_config_for_type(item_type)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
        for field in ['module', 'epic', 'feature']:
            if field in self.field_widgets:
                label, widget = self.field_widgets[field]
                visible = field not in config['hide']
                label.setVisible(visible)
                widget.setVisible(visible)
        
        # Segment –æ—Ç–¥–µ–ª—å–Ω–æ - —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–∏–ø–æ–≤ —Å has_segment=True
        if 'segment' in self.field_widgets:
            label, widget = self.field_widgets['segment']
            visible = config.get('has_segment', False)
            label.setVisible(visible)
            widget.setVisible(visible)
            if not visible:
                widget.setCurrentText('')  # –û—á–∏—â–∞–µ–º –µ—Å–ª–∏ —Å–∫—Ä—ã—Ç–æ
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É –ø–æ–∫—Ä—ã—Ç–∏—è
        if hasattr(self, 'coverage_tab'):
            tab_widget = self.coverage_tab.parent()
            if isinstance(tab_widget, QTabWidget):
                index = tab_widget.indexOf(self.coverage_tab)
                tab_widget.setTabVisible(index, config['has_coverage'])
    
    def generate_bdd_feature(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è BDD Feature –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        from src.bdd.feature_generator import FeatureGenerator
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º feature –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ item
        feature_content = FeatureGenerator.generate_feature(self.item)
        self.bdd_edit.setPlainText(feature_content)
        
        QMessageBox.information(self, '–£—Å–ø–µ—Ö', '‚úÖ Feature —Ñ–∞–π–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é.')
    
    def export_bdd_feature(self):
        """–≠–∫—Å–ø–æ—Ä—Ç feature —Ñ–∞–π–ª–∞"""
        content = self.bdd_edit.toPlainText().strip()
        
        if not content:
            QMessageBox.warning(self, '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', 'Feature —Ñ–∞–π–ª –ø—É—Å—Ç.\n–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –µ–≥–æ.')
            return
        
        # –í—ã–±–æ—Ä –ø—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        filename = f"{self.item.functional_id.replace('.', '_')}.feature"
        filepath, _ = QFileDialog.getSaveFileName(
            self, '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å feature —Ñ–∞–π–ª', filename, 'Feature Files (*.feature)'
        )
        
        if filepath:
            try:
                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(content)
                QMessageBox.information(self, '–£—Å–ø–µ—Ö', f'‚úÖ Feature —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω:\n{filepath}')
            except Exception as e:
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:\n{e}')
    
    def save(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not self.functional_id_edit.text().strip():
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', 'Functional ID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
            return
        
        if not self.title_edit.text().strip():
            QMessageBox.warning(self, '–û—à–∏–±–∫–∞', 'Title –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
            return
        
        qa_name = self.qa_combo.currentText().strip()
        dev_name = self.dev_combo.currentText().strip()
        
        # QA –∏ Dev —Ç–µ–ø–µ—Ä—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
        # if not qa_name or not dev_name:
        #     QMessageBox.warning(self, '–û—à–∏–±–∫–∞', 'Responsible QA –∏ Responsible Dev –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã')
        #     return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.item.functional_id = self.functional_id_edit.text().strip()
        self.item.alias_tag = self.alias_tag_edit.text().strip() or None
        self.item.title = self.title_edit.text().strip()
        self.item.type = self.type_combo.currentText()
        self.item.description = self.description_edit.toPlainText().strip() or None
        self.item.segment = self.segment_combo.currentText() or None
        
        # –ò–µ—Ä–∞—Ä—Ö–∏—è
        config = get_field_config_for_type(self.item.type)
        if 'module' not in config['hide']:
            self.item.module = self.module_combo.currentText().strip() or None
        else:
            self.item.module = None
            
        if 'epic' not in config['hide']:
            self.item.epic = self.epic_combo.currentText().strip() or None
        else:
            self.item.epic = None
            
        if 'feature' not in config['hide']:
            self.item.feature = self.feature_combo.currentText().strip() or None
        else:
            self.item.feature = None
        
        self.item.is_crit = 1 if self.is_crit_check.isChecked() else 0
        self.item.is_focus = 1 if self.is_focus_check.isChecked() else 0
        
        # –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ
        qa_user = self.session.query(User).filter_by(name=qa_name).first()
        dev_user = self.session.query(User).filter_by(name=dev_name).first()
        accountable_name = self.accountable_combo.currentText().strip()
        accountable_user = self.session.query(User).filter_by(name=accountable_name).first() if accountable_name else None
        
        self.item.responsible_qa_id = qa_user.id if qa_user else None
        self.item.responsible_dev_id = dev_user.id if dev_user else None
        self.item.accountable_id = accountable_user.id if accountable_user else None
        
        # –ü–æ–∫—Ä—ã—Ç–∏–µ
        if config['has_coverage']:
            self.item.test_cases_linked = self.test_cases_edit.toPlainText().strip() or None
            self.item.automation_status = self.automation_combo.currentText() or None
            self.item.documentation_links = self.docs_edit.toPlainText().strip() or None
        
        self.accept()


# === –†–ï–î–ê–ö–¢–û–† –°–£–©–ù–û–°–¢–ï–ô –ü–û –¢–ò–ü–ê–ú ===

class EntityEditorWindow(QMainWindow):
    """–†–µ–¥–∞–∫—Ç–æ—Ä —Å—É—â–Ω–æ—Å—Ç–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–∏–ø–∞–º"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.session = SessionLocal()
        self.current_items = []
        self.current_filter_type = 'All'
        self.init_ui()
        self.load_data()
    
    def init_ui(self):
        self.setWindowTitle('–†–µ–¥–∞–∫—Ç–æ—Ä —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ —Ç–∏–ø–∞–º')
        self.setGeometry(150, 150, 1200, 700)
        
        # –ú–µ–Ω—é
        menubar = self.menuBar()
        file_menu = menubar.addMenu('–§–∞–π–ª')
        close_action = QAction('–ó–∞–∫—Ä—ã—Ç—å', self)
        close_action.triggered.connect(self.close)
        file_menu.addAction(close_action)
        
        # –¢—É–ª–±–∞—Ä
        toolbar = QToolBar('–¢–∏–ø—ã')
        toolbar.setMovable(False)
        self.addToolBar(toolbar)
        
        # –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —Ç–∏–ø–∞–º
        types = ['All', 'Module', 'Epic', 'Feature', 'Story', 'Page', 'Element', 'Service']
        for t in types:
            action = QAction(f'üì¶ {t}' if t == 'All' else t, self)
            action.triggered.connect(lambda checked, type_name=t: self.filter_by_type(type_name))
            toolbar.addAction(action)
        
        toolbar.addSeparator()
        
        refresh_action = QAction('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', self)
        refresh_action.triggered.connect(self.load_data)
        toolbar.addAction(refresh_action)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        
        # –§–∏–ª—å—Ç—Ä—ã
        filter_layout = QHBoxLayout()
        
        filter_layout.addWidget(QLabel('üîç –ü–æ–∏—Å–∫:'))
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText('Functional ID, Title...')
        self.search_input.textChanged.connect(self.apply_filters)
        filter_layout.addWidget(self.search_input)
        
        filter_layout.addWidget(QLabel('Module:'))
        self.module_filter = QComboBox()
        self.module_filter.currentTextChanged.connect(self.apply_filters)
        filter_layout.addWidget(self.module_filter)
        
        filter_layout.addWidget(QLabel('Epic:'))
        self.epic_filter = QComboBox()
        self.epic_filter.currentTextChanged.connect(self.apply_filters)
        filter_layout.addWidget(self.epic_filter)
        
        layout.addLayout(filter_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞
        self.table = QTableWidget()
        self.table.setColumnCount(7)
        self.table.setHorizontalHeaderLabels(['Functional ID', 'Title', 'Type', 'Module', 'Epic', 'Crit', 'Focus'])
        self.table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)
        self.table.setEditTriggers(QTableWidget.EditTrigger.NoEditTriggers)
        self.table.doubleClicked.connect(self.edit_item)
        layout.addWidget(self.table)
        
        self.statusBar().showMessage('–ì–æ—Ç–æ–≤')
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏"""
        self.current_items = self.session.query(FunctionalItem).order_by(FunctionalItem.type, FunctionalItem.functional_id).all()
        self.populate_filters()
        self.filter_by_type(self.current_filter_type)
        self.statusBar().showMessage(f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(self.current_items)} –∑–∞–ø–∏—Å–µ–π')
    
    def populate_filters(self):
        """–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
        modules = [''] + sorted(set(item.module for item in self.current_items if item.module))
        epics = [''] + sorted(set(item.epic for item in self.current_items if item.epic))
        
        self.module_filter.clear()
        self.module_filter.addItems(modules)
        
        self.epic_filter.clear()
        self.epic_filter.addItems(epics)
    
    def filter_by_type(self, type_name):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É"""
        self.current_filter_type = type_name
        if type_name == 'All':
            filtered = self.current_items
        else:
            filtered = [item for item in self.current_items if item.type == type_name]
        
        self.populate_table(filtered)
        self.statusBar().showMessage(f'üìä {type_name}: {len(filtered)} –∑–∞–ø–∏—Å–µ–π')
    
    def populate_table(self, items):
        """–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É"""
        self.table.setRowCount(len(items))
        for row_idx, item in enumerate(items):
            self.table.setItem(row_idx, 0, QTableWidgetItem(item.functional_id))
            self.table.setItem(row_idx, 1, QTableWidgetItem(item.title or ''))
            self.table.setItem(row_idx, 2, QTableWidgetItem(item.type or ''))
            self.table.setItem(row_idx, 3, QTableWidgetItem(item.module or ''))
            self.table.setItem(row_idx, 4, QTableWidgetItem(item.epic or ''))
            self.table.setItem(row_idx, 5, QTableWidgetItem('‚úì' if item.is_crit else ''))
            self.table.setItem(row_idx, 6, QTableWidgetItem('‚úì' if item.is_focus else ''))
        self.table.resizeColumnsToContents()
    
    def apply_filters(self):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã"""
        search_text = self.search_input.text().lower()
        module_filter = self.module_filter.currentText()
        epic_filter = self.epic_filter.currentText()
        
        for row in range(self.table.rowCount()):
            show = True
            
            # –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
            if search_text:
                match = any(
                    self.table.item(row, col) and search_text in self.table.item(row, col).text().lower()
                    for col in [0, 1]
                )
                show = show and match
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –º–æ–¥—É–ª—é
            if module_filter and show:
                module_cell = self.table.item(row, 3)
                show = show and (module_cell and module_cell.text() == module_filter)
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —ç–ø–∏–∫—É
            if epic_filter and show:
                epic_cell = self.table.item(row, 4)
                show = show and (epic_cell and epic_cell.text() == epic_filter)
            
            self.table.setRowHidden(row, not show)
    
    def edit_item(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å"""
        selected = self.table.currentRow()
        if selected < 0:
            return
        
        functional_id = self.table.item(selected, 0).text()
        item = self.session.query(FunctionalItem).filter_by(functional_id=functional_id).first()
        
        if item:
            dialog = DynamicEditDialog(item, self.session, self)
            if dialog.exec():
                try:
                    self.session.commit()
                    self.load_data()
                    self.statusBar().showMessage(f'‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {item.functional_id}')
                except Exception as e:
                    self.session.rollback()
                    QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:\n{e}')
    
    def closeEvent(self, event):
        self.session.close()
        event.accept()


# === –ì–õ–ê–í–ù–û–ï –û–ö–ù–û ===

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.session = SessionLocal()
        self.current_items = []
        self.current_filter = 'all'  # all, crit, focus
        self.init_ui()
        self.load_data()
    
    def init_ui(self):
        banner = get_version_banner(project_root)
        self.setWindowTitle(f'VoluptAS {banner} - Functional Coverage Management')
        self.setGeometry(100, 100, 1400, 900)
        
        # === –ù–û–í–û–ï –ú–ï–ù–Æ ===
        menubar = self.menuBar()
        
        # –ú–µ–Ω—é "–§–∞–π–ª"
        file_menu = menubar.addMenu('üìÅ –§–∞–π–ª')
        
        save_action = QAction('üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', self)
        save_action.setShortcut('Ctrl+S')
        save_action.triggered.connect(self.save_data)
        file_menu.addAction(save_action)
        
        file_menu.addSeparator()
        
        export_action = QAction('üì§ –≠–∫—Å–ø–æ—Ä—Ç', self)
        export_action.triggered.connect(self.export_data)
        file_menu.addAction(export_action)
        
        import_action = QAction('üì• –ò–º–ø–æ—Ä—Ç', self)
        import_action.triggered.connect(self.import_data)
        file_menu.addAction(import_action)
        
        file_menu.addSeparator()
        
        exit_action = QAction('üö∫ –í—ã—Ö–æ–¥', self)
        exit_action.setShortcut('Alt+F4')
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # –ú–µ–Ω—é "–ü—Ä–∞–≤–∫–∞"
        edit_menu = menubar.addMenu('‚úèÔ∏è –ü—Ä–∞–≤–∫–∞')
        
        refresh_action = QAction('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', self)
        refresh_action.setShortcut('F5')
        refresh_action.triggered.connect(self.load_data)
        edit_menu.addAction(refresh_action)
        
        edit_menu.addSeparator()
        
        add_action = QAction('‚ûï –î–æ–±–∞–≤–∏—Ç—å', self)
        add_action.setShortcut('Ctrl+N')
        add_action.triggered.connect(self.add_item)
        edit_menu.addAction(add_action)
        
        edit_item_action = QAction('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', self)
        edit_item_action.setShortcut('Ctrl+E')
        edit_item_action.triggered.connect(self.edit_item)
        edit_menu.addAction(edit_item_action)
        
        delete_action = QAction('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', self)
        delete_action.setShortcut('Delete')
        delete_action.triggered.connect(self.delete_item)
        edit_menu.addAction(delete_action)
        
        edit_menu.addSeparator()
        
        save_edit_action = QAction('üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', self)
        save_edit_action.setShortcut('Ctrl+S')
        save_edit_action.triggered.connect(self.save_data)
        edit_menu.addAction(save_edit_action)
        
        # –ú–µ–Ω—é "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
        tools_menu = menubar.addMenu('üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã')
        
        # BDD Feature –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        bdd_manager_action = QAction('üßë‚Äçüíª BDD Feature Manager', self)
        bdd_manager_action.triggered.connect(self.open_bdd_manager)
        tools_menu.addAction(bdd_manager_action)
        
        generate_bdd_action = QAction('üõ†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è BDD Features', self)
        generate_bdd_action.setShortcut('Ctrl+B')
        generate_bdd_action.triggered.connect(self.generate_bdd_features)
        tools_menu.addAction(generate_bdd_action)
        
        tools_menu.addSeparator()
        
        # –ì—Ä–∞—Ñ —Å–≤—è–∑–µ–π
        graph_action = QAction('üîó –ì—Ä–∞—Ñ —Å–≤—è–∑–µ–π', self)
        graph_action.setShortcut('Ctrl+G')
        graph_action.triggered.connect(self.open_graph_view)
        tools_menu.addAction(graph_action)
        
        tools_menu.addSeparator()
        
        sync_menu = tools_menu.addMenu('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è')
        
        sync_zoho_action = QAction('Zoho', self)
        sync_zoho_action.triggered.connect(self.sync_zoho)
        sync_menu.addAction(sync_zoho_action)
        
        sync_google_action = QAction('Google', self)
        sync_menu.addAction(sync_google_action)
        
        sync_qase_action = QAction('Qase', self)
        sync_menu.addAction(sync_qase_action)
        
        # –ú–µ–Ω—é "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        settings_menu = menubar.addMenu('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
        
        settings_action = QAction('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', self)
        settings_action.setShortcut('Ctrl+,')
        settings_action.triggered.connect(self.open_zoho_settings)
        settings_menu.addAction(settings_action)
        
        entity_editor_action = QAction('üì¶ –†–µ–¥–∞–∫—Ç–æ—Ä —Å—É—â–Ω–æ—Å—Ç–µ–π', self)
        entity_editor_action.triggered.connect(self.open_entity_editor)
        settings_menu.addAction(entity_editor_action)
        
        user_manager_action = QAction('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', self)
        user_manager_action.triggered.connect(self.open_user_manager)
        settings_menu.addAction(user_manager_action)
        
        dict_manager_action = QAction('üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏', self)
        dict_manager_action.triggered.connect(self.open_dict_manager)
        settings_menu.addAction(dict_manager_action)
        
        # –ú–µ–Ω—é "–ü–æ–º–æ—â—å"
        help_menu = menubar.addMenu('‚ùì –ü–æ–º–æ—â—å')
        
        docs_action = QAction('üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', self)
        help_menu.addAction(docs_action)
        
        help_menu.addSeparator()
        
        about_action = QAction('‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ', self)
        help_menu.addAction(about_action)
        
        # –¢—É–ª–±–∞—Ä —É–¥–∞–ª—ë–Ω (–≤—Å—ë –≤ –º–µ–Ω—é)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        
        # === –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê: –¢–ê–ë–´ ===
        from src.ui.widgets.main_tabs_widget import MainTabsWidget
        
        self.tabs = QTabWidget()
        self.tabs.setDocumentMode(True)
        
        # –¢–∞–± 1: –¢–∞–±–ª–∏—Ü–∞ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
        table_tab = QWidget()
        table_layout = QVBoxLayout(table_tab)
        
        # –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã - –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        search_layout1 = QHBoxLayout()
        search_layout1.addWidget(QLabel('üîç –ü–æ–∏—Å–∫:'))
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText('Functional ID, Alias, Title, Module, Epic...')
        self.search_input.textChanged.connect(self.filter_table)
        search_layout1.addWidget(self.search_input, stretch=2)
        
        search_layout1.addWidget(QLabel('Type:'))
        self.type_filter = QComboBox()
        self.type_filter.currentTextChanged.connect(self.filter_table)
        search_layout1.addWidget(self.type_filter)
        
        search_layout1.addWidget(QLabel('Module:'))
        self.module_filter = QComboBox()
        self.module_filter.currentTextChanged.connect(self.filter_table)
        search_layout1.addWidget(self.module_filter)
        
        search_layout1.addWidget(QLabel('Epic:'))
        self.epic_filter = QComboBox()
        self.epic_filter.currentTextChanged.connect(self.filter_table)
        search_layout1.addWidget(self.epic_filter)
        
        table_layout.addLayout(search_layout1)
        
        # –§–∏–ª—å—Ç—Ä—ã - –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
        search_layout2 = QHBoxLayout()
        
        search_layout2.addWidget(QLabel('Segment:'))
        self.segment_filter = QComboBox()
        self.segment_filter.currentTextChanged.connect(self.filter_table)
        search_layout2.addWidget(self.segment_filter)
        
        search_layout2.addWidget(QLabel('QA:'))
        self.qa_filter = QComboBox()
        self.qa_filter.currentTextChanged.connect(self.filter_table)
        search_layout2.addWidget(self.qa_filter)
        
        search_layout2.addWidget(QLabel('Dev:'))
        self.dev_filter = QComboBox()
        self.dev_filter.currentTextChanged.connect(self.filter_table)
        search_layout2.addWidget(self.dev_filter)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        clear_filters_btn = QPushButton('‚ùå –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã')
        clear_filters_btn.clicked.connect(self.clear_filters)
        search_layout2.addWidget(clear_filters_btn)
        
        search_layout2.addSeparator() if hasattr(search_layout2, 'addSeparator') else None
        
        # –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∏–∑ toolbar)
        all_btn = QPushButton('üìã –í—Å–µ')
        all_btn.clicked.connect(lambda: self.quick_filter('all'))
        search_layout2.addWidget(all_btn)
        
        crit_btn = QPushButton('üî¥ –ö—Ä–∏—Ç–∏—á–Ω–æ–µ')
        crit_btn.clicked.connect(lambda: self.quick_filter('crit'))
        search_layout2.addWidget(crit_btn)
        
        focus_btn = QPushButton('üéØ –§–æ–∫—É—Å–Ω–æ–µ')
        focus_btn.clicked.connect(lambda: self.quick_filter('focus'))
        search_layout2.addWidget(focus_btn)
        
        search_layout2.addStretch()
        
        table_layout.addLayout(search_layout2)
        
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π layout: —Ç–∞–±–ª–∏—Ü–∞ + –º–∏–Ω–∏-–≥—Ä–∞—Ñ
        content_layout = QHBoxLayout()
        
        # –¢–∞–±–ª–∏—Ü–∞
        self.table = QTableWidget()
        self.table.setColumnCount(11)
        self.table.setHorizontalHeaderLabels([
            'FuncID', 'Alias', 'Title', 'Type', 'Module', 'Epic', 'QA', 'Dev', 'Segment', 'Crit', 'Focus'
        ])
        self.table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)
        # –†–∞–∑—Ä–µ—à–∞–µ–º inline-—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ double-click
        self.table.setEditTriggers(QTableWidget.EditTrigger.DoubleClicked)
        self.table.itemChanged.connect(self.on_item_changed)
        self.table.itemSelectionChanged.connect(self.on_selection_changed)
        content_layout.addWidget(self.table, stretch=7)
        
        # –ú–∏–Ω–∏-–≥—Ä–∞—Ñ —Å–ø—Ä–∞–≤–∞
        from src.ui.mini_graph_widget import MiniGraphWidget
        self.mini_graph = MiniGraphWidget(self)
        self.mini_graph.setMinimumWidth(350)
        self.mini_graph.setMaximumWidth(450)
        content_layout.addWidget(self.mini_graph, stretch=3)
        
        table_layout.addLayout(content_layout)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–± —Å —Ç–∞–±–ª–∏—Ü–µ–π
        self.tabs.addTab(table_tab, 'üìä –¢–∞–±–ª–∏—Ü–∞')
        
        # –¢–∞–± 2: –ü–æ–ª–Ω—ã–π –≥—Ä–∞—Ñ
        from src.ui.widgets.full_graph_tab import FullGraphTabWidget
        self.graph_tab = FullGraphTabWidget(self)
        self.tabs.addTab(self.graph_tab, 'üåê –ì—Ä–∞—Ñ')
        
        # –¢–∞–± 3: BDD
        from src.ui.widgets.bdd_tab import BddTabWidget
        self.bdd_tab = BddTabWidget(self)
        self.tabs.addTab(self.bdd_tab, 'üßë‚Äçüíª BDD')
        
        # –¢–∞–± 4: –ú–∞—Ç—Ä–∏—Ü–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–æ–∫
        from src.ui.widgets.coverage_matrix_tab import CoverageMatrixTabWidget
        self.coverage_tab = CoverageMatrixTabWidget(self)
        self.tabs.addTab(self.coverage_tab, 'üìã –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏')
        
        # –¢–∞–± 5: INFRA
        from src.ui.widgets.infra_maturity_tab import InfraMaturityTabWidget
        self.infra_tab = InfraMaturityTabWidget(self)
        self.tabs.addTab(self.infra_tab, 'üèóÔ∏è INFRA')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±—ã –≤ –≥–ª–∞–≤–Ω—ã–π layout
        layout.addWidget(self.tabs)
        
        # Hotkeys –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–æ–≤
        from PyQt6.QtGui import QShortcut, QKeySequence
        QShortcut(QKeySequence('Ctrl+1'), self).activated.connect(lambda: self.tabs.setCurrentIndex(0))
        QShortcut(QKeySequence('Ctrl+2'), self).activated.connect(lambda: self.tabs.setCurrentIndex(1))
        QShortcut(QKeySequence('Ctrl+3'), self).activated.connect(lambda: self.tabs.setCurrentIndex(2))
        QShortcut(QKeySequence('Ctrl+4'), self).activated.connect(lambda: self.tabs.setCurrentIndex(3))
        QShortcut(QKeySequence('Ctrl+5'), self).activated.connect(lambda: self.tabs.setCurrentIndex(4))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ç–∞–±–∞
        self.tabs.currentChanged.connect(self.on_tab_changed)
        
        self.statusBar().showMessage('–ì–æ—Ç–æ–≤')
        # –ü–µ—á–∞—Ç–∞–µ–º –±–∞–Ω–Ω–µ—Ä –∏ –ø—É—Ç—å –∑–∞–ø—É—Å–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print(f"[VoluptAS] {banner} | root={project_root}")
    
    def load_data(self):
        self.current_items = self.session.query(FunctionalItem).order_by(FunctionalItem.functional_id).all()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
        types = sorted(set(item.type for item in self.current_items if item.type))
        modules = sorted(set(item.module for item in self.current_items if item.module))
        epics = sorted(set(item.epic for item in self.current_items if item.epic))
        segments = sorted(set(item.segment for item in self.current_items if item.segment))
        qa_users = sorted(set(item.responsible_qa.name for item in self.current_items if item.responsible_qa))
        dev_users = sorted(set(item.responsible_dev.name for item in self.current_items if item.responsible_dev))
        
        self.type_filter.clear()
        self.type_filter.addItems([''] + types)
        
        self.module_filter.clear()
        self.module_filter.addItems([''] + modules)
        
        self.epic_filter.clear()
        self.epic_filter.addItems([''] + epics)
        
        self.segment_filter.clear()
        self.segment_filter.addItems([''] + segments)
        
        self.qa_filter.clear()
        self.qa_filter.addItems([''] + qa_users)
        
        self.dev_filter.clear()
        self.dev_filter.addItems([''] + dev_users)
        
        self.populate_table(self.current_items)
        self.apply_quick_filter()
        self.statusBar().showMessage(f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(self.current_items)} –∑–∞–ø–∏—Å–µ–π')
    
    def populate_table(self, items):
        # –û—Ç–∫–ª—é—á–∞–µ–º itemChanged –Ω–∞ –≤—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        self.table.itemChanged.disconnect(self.on_item_changed)
        
        self.table.setRowCount(len(items))
        for row_idx, item in enumerate(items):
            # –ï—Å–ª–∏ alias_tag –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å functional_id
            alias_display = item.alias_tag if item.alias_tag else item.functional_id.split('.')[-1]
            
            # –ù–µ—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            funcid_item = QTableWidgetItem(item.functional_id)
            funcid_item.setFlags(funcid_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
            self.table.setItem(row_idx, 0, funcid_item)
            
            self.table.setItem(row_idx, 1, QTableWidgetItem(alias_display))  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π
            self.table.setItem(row_idx, 2, QTableWidgetItem(item.title or ''))  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π
            
            type_item = QTableWidgetItem(item.type or '')
            type_item.setFlags(type_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
            self.table.setItem(row_idx, 3, type_item)
            
            module_item = QTableWidgetItem(item.module or '')
            module_item.setFlags(module_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
            self.table.setItem(row_idx, 4, module_item)
            
            epic_item = QTableWidgetItem(item.epic or '')
            epic_item.setFlags(epic_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
            self.table.setItem(row_idx, 5, epic_item)
            
            qa_item = QTableWidgetItem(item.responsible_qa.name if item.responsible_qa else '')
            qa_item.setFlags(qa_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
            self.table.setItem(row_idx, 6, qa_item)
            
            dev_item = QTableWidgetItem(item.responsible_dev.name if item.responsible_dev else '')
            dev_item.setFlags(dev_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
            self.table.setItem(row_idx, 7, dev_item)
            
            self.table.setItem(row_idx, 8, QTableWidgetItem(item.segment or ''))  # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π
            
            # Crit –∏ Focus - —á–µ–∫–±–æ–∫—Å—ã
            crit_widget = QWidget()
            crit_layout = QHBoxLayout(crit_widget)
            crit_layout.setContentsMargins(0, 0, 0, 0)
            crit_layout.setAlignment(Qt.AlignmentFlag.AlignCenter)
            crit_check = QCheckBox()
            crit_check.setChecked(bool(item.is_crit))
            crit_check.stateChanged.connect(lambda state, r=row_idx, c=9: self.on_checkbox_changed(r, c, state))
            crit_layout.addWidget(crit_check)
            self.table.setCellWidget(row_idx, 9, crit_widget)
            
            focus_widget = QWidget()
            focus_layout = QHBoxLayout(focus_widget)
            focus_layout.setContentsMargins(0, 0, 0, 0)
            focus_layout.setAlignment(Qt.AlignmentFlag.AlignCenter)
            focus_check = QCheckBox()
            focus_check.setChecked(bool(item.is_focus))
            focus_check.stateChanged.connect(lambda state, r=row_idx, c=10: self.on_checkbox_changed(r, c, state))
            focus_layout.addWidget(focus_check)
            self.table.setCellWidget(row_idx, 10, focus_widget)
        
        self.table.resizeColumnsToContents()
        
        # –í–∫–ª—é—á–∞–µ–º itemChanged –æ–±—Ä–∞—Ç–Ω–æ
        self.table.itemChanged.connect(self.on_item_changed)
    
    def quick_filter(self, filter_type):
        """–ë—ã—Å—Ç—Ä–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è (–≤—Å–µ/–∫—Ä–∏—Ç–∏—á–Ω–æ–µ/—Ñ–æ–∫—É—Å–Ω–æ–µ)"""
        self.current_filter = filter_type
        self.apply_quick_filter()
    
    def apply_quick_filter(self):
        """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π —Ñ–∏–ª—å—Ç—Ä"""
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏
        for row in range(self.table.rowCount()):
            self.table.setRowHidden(row, False)
        
        # –ü–æ—Ç–æ–º –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        if self.current_filter != 'all':
            for row in range(self.table.rowCount()):
                show = True
                if self.current_filter == 'crit':
                    crit_item = self.table.item(row, 9)  # –ò–∑–º–µ–Ω–µ–Ω–æ: 8 ‚Üí 9
                    show = crit_item and crit_item.text() == '‚úì'
                elif self.current_filter == 'focus':
                    focus_item = self.table.item(row, 10)  # –ò–∑–º–µ–Ω–µ–Ω–æ: 9 ‚Üí 10
                    show = focus_item and focus_item.text() == '‚úì'
                
                self.table.setRowHidden(row, not show)
        
        self.filter_table()  # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    
    def clear_filters(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã"""
        self.search_input.clear()
        self.type_filter.setCurrentIndex(0)
        self.module_filter.setCurrentIndex(0)
        self.epic_filter.setCurrentIndex(0)
        self.segment_filter.setCurrentIndex(0)
        self.qa_filter.setCurrentIndex(0)
        self.dev_filter.setCurrentIndex(0)
        self.current_filter = 'all'
        self.apply_quick_filter()
    
    def on_checkbox_changed(self, row, col, state):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞"""
        functional_id = self.table.item(row, 0).text()
        db_item = self.session.query(FunctionalItem).filter_by(functional_id=functional_id).first()
        
        if not db_item:
            return
        
        try:
            if col == 9:  # Crit
                db_item.is_crit = 1 if state == Qt.CheckState.Checked.value else 0
            elif col == 10:  # Focus
                db_item.is_focus = 1 if state == Qt.CheckState.Checked.value else 0
            
            self.session.commit()
            self.statusBar().showMessage(f'‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {functional_id}')
        except Exception as e:
            self.session.rollback()
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:\n{e}')
    
    def on_item_changed(self, item):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è—á–µ–π–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        row = item.row()
        col = item.column()
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: Alias(1), Title(2), Segment(8)
        if col not in [1, 2, 8]:
            return
        
        functional_id = self.table.item(row, 0).text()
        db_item = self.session.query(FunctionalItem).filter_by(functional_id=functional_id).first()
        
        if not db_item:
            return
        
        new_value = item.text().strip()
        
        try:
            if col == 1:  # Alias
                db_item.alias_tag = new_value if new_value else None
            elif col == 2:  # Title
                if not new_value:
                    QMessageBox.warning(self, '–û—à–∏–±–∫–∞', 'Title –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
                    item.setText(db_item.title)
                    return
                db_item.title = new_value
            elif col == 8:  # Segment
                db_item.segment = new_value if new_value else None
            
            self.session.commit()
            self.statusBar().showMessage(f'‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {functional_id}')
        except Exception as e:
            self.session.rollback()
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:\n{e}')
    
    def on_selection_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        selected = self.table.currentRow()
        if selected >= 0:
            functional_id = self.table.item(selected, 0).text()
            item = self.session.query(FunctionalItem).filter_by(functional_id=functional_id).first()
            if item:
                self.mini_graph.update_graph(item.id)
        else:
            self.mini_graph.clear_graph()
    
    def filter_table(self):
        search_text = self.search_input.text().lower()
        type_filter = self.type_filter.currentText()
        module_filter = self.module_filter.currentText()
        epic_filter = self.epic_filter.currentText()
        segment_filter = self.segment_filter.currentText()
        qa_filter = self.qa_filter.currentText()
        dev_filter = self.dev_filter.currentText()
        
        for row in range(self.table.rowCount()):
            if self.table.isRowHidden(row):
                continue
            
            show = True
            
            # –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
            if search_text:
                match = any(
                    self.table.item(row, col) and search_text in self.table.item(row, col).text().lower()
                    for col in range(self.table.columnCount())
                )
                show = show and match
            
            # –§–∏–ª—å—Ç—Ä –ø–æ Type
            if type_filter and show:
                type_cell = self.table.item(row, 3)
                show = show and (type_cell and type_cell.text() == type_filter)
            
            # –§–∏–ª—å—Ç—Ä –ø–æ Module
            if module_filter and show:
                module_cell = self.table.item(row, 4)
                show = show and (module_cell and module_cell.text() == module_filter)
            
            # –§–∏–ª—å—Ç—Ä –ø–æ Epic
            if epic_filter and show:
                epic_cell = self.table.item(row, 5)
                show = show and (epic_cell and epic_cell.text() == epic_filter)
            
            # –§–∏–ª—å—Ç—Ä –ø–æ Segment
            if segment_filter and show:
                segment_cell = self.table.item(row, 8)
                show = show and (segment_cell and segment_cell.text() == segment_filter)
            
            # –§–∏–ª—å—Ç—Ä –ø–æ QA
            if qa_filter and show:
                qa_cell = self.table.item(row, 6)
                show = show and (qa_cell and qa_cell.text() == qa_filter)
            
            # –§–∏–ª—å—Ç—Ä –ø–æ Dev
            if dev_filter and show:
                dev_cell = self.table.item(row, 7)
                show = show and (dev_cell and dev_cell.text() == dev_filter)
            
            self.table.setRowHidden(row, not show)
    
    def add_item(self):
        new_item = FunctionalItem(functional_id='new.item', title='–ù–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç', type='Feature')
        dialog = DynamicEditDialog(new_item, self.session, self)
        if dialog.exec():
            try:
                self.session.add(new_item)
                self.session.commit()
                self.load_data()
                self.statusBar().showMessage(f'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {new_item.functional_id}')
            except Exception as e:
                self.session.rollback()
                QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å:\n{e}')
    
    def edit_item(self):
        selected = self.table.currentRow()
        if selected < 0:
            QMessageBox.warning(self, '–í–Ω–∏–º–∞–Ω–∏–µ', '–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç')
            return
        
        functional_id = self.table.item(selected, 0).text()
        item = self.session.query(FunctionalItem).filter_by(functional_id=functional_id).first()
        
        if item:
            dialog = DynamicEditDialog(item, self.session, self)
            if dialog.exec():
                try:
                    self.session.commit()
                    self.load_data()
                    self.statusBar().showMessage(f'‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {item.functional_id}')
                except Exception as e:
                    self.session.rollback()
                    QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:\n{e}')
    
    def delete_item(self):
        selected = self.table.currentRow()
        if selected < 0:
            QMessageBox.warning(self, '–í–Ω–∏–º–∞–Ω–∏–µ', '–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç')
            return
        
        functional_id = self.table.item(selected, 0).text()
        item = self.session.query(FunctionalItem).filter_by(functional_id=functional_id).first()
        
        if item:
            reply = QMessageBox.question(
                self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ',
                f'–£–¥–∞–ª–∏—Ç—å:\n{item.functional_id}?',
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )
            if reply == QMessageBox.StandardButton.Yes:
                try:
                    self.session.delete(item)
                    self.session.commit()
                    self.load_data()
                    self.statusBar().showMessage(f'‚úÖ –£–¥–∞–ª–µ–Ω–æ: {item.functional_id}')
                except Exception as e:
                    self.session.rollback()
                    QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å:\n{e}')
    
    def open_entity_editor(self):
        """–û—Ç–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä —Å—É—â–Ω–æ—Å—Ç–µ–π"""
        editor = EntityEditorWindow(self)
        editor.show()
    
    def open_user_manager(self):
        """–û—Ç–∫—Ä—ã—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        from src.ui.dialogs.user_manager import UserManagerWindow
        manager = UserManagerWindow(self)
        manager.show()
    
    def open_zoho_settings(self):
        """–û—Ç–∫—Ä—ã—Ç—å –µ–¥–∏–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        from src.ui.dialogs.settings_dialog import SettingsDialog
        dialog = SettingsDialog(self)
        dialog.exec()
    
    def open_graph_view(self):
        """–û—Ç–∫—Ä—ã—Ç—å –≥—Ä–∞—Ñ —Å–≤—è–∑–µ–π"""
        from src.ui.graph_view_new import GraphViewWindow
        graph_window = GraphViewWindow(self)
        graph_window.show()
    
    def open_dict_manager(self):
        """–û—Ç–∫—Ä—ã—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏"""
        from src.ui.dialogs.dictionary_manager import DictionaryManagerWindow
        manager = DictionaryManagerWindow(self)
        manager.show()
    
    def open_bdd_manager(self):
        """–û—Ç–∫—Ä—ã—Ç—å BDD Feature Manager"""
        from src.ui.dialogs.bdd_manager import BDDFeatureManager
        manager = BDDFeatureManager(self)
        manager.show()
    
    def generate_bdd_features(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è BDD Feature —Ñ–∞–π–ª–æ–≤"""
        from src.bdd.feature_generator import FeatureGenerator
        from pathlib import Path
        
        # –í—ã–±–æ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        output_dir = QFileDialog.getExistingDirectory(
            self, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è feature —Ñ–∞–π–ª–æ–≤', ''
        )
        
        if not output_dir:
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è Feature/Story?
        reply = QMessageBox.question(
            self, '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Feature —Ñ–∞–π–ª–æ–≤',
            '–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤?\n\n'
            'Yes - –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã\n'
            'No - —Ç–æ–ª—å–∫–æ Feature –∏ Story',
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No | QMessageBox.StandardButton.Cancel
        )
        
        if reply == QMessageBox.StandardButton.Cancel:
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        if reply == QMessageBox.StandardButton.Yes:
            items = self.session.query(FunctionalItem).all()
        else:
            items = self.session.query(FunctionalItem).filter(
                FunctionalItem.type.in_(['Feature', 'Story'])
            ).all()
        
        if not items:
            QMessageBox.information(self, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º
        try:
            saved_files = FeatureGenerator.batch_generate(items, Path(output_dir))
            QMessageBox.information(
                self, '–£—Å–ø–µ—Ö',
                f'‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(saved_files)} feature —Ñ–∞–π–ª–æ–≤\n\n'
                f'–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_dir}'
            )
            self.statusBar().showMessage(f'‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(saved_files)} feature —Ñ–∞–π–ª–æ–≤')
        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:\n{e}')
    
    def on_tab_changed(self, index: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ç–∞–±–∞"""
        tab_names = ['–¢–∞–±–ª–∏—Ü–∞', '–ì—Ä–∞—Ñ', 'BDD', '–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏', 'INFRA']
        if 0 <= index < len(tab_names):
            self.statusBar().showMessage(f'–ê–∫—Ç–∏–≤–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞: {tab_names[index]}')
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"""
        try:
            self.session.commit()
            self.statusBar().showMessage('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
        except Exception as e:
            self.session.rollback()
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å:\n{e}')
    
    def export_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (CSV –∏–ª–∏ Excel)"""
        reply = QMessageBox.question(
            self, '–≠–∫—Å–ø–æ—Ä—Ç',
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:\n\n'
            'Yes - CSV\n'
            'No - Excel',
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No | QMessageBox.StandardButton.Cancel
        )
        
        if reply == QMessageBox.StandardButton.Cancel:
            return
        
        if reply == QMessageBox.StandardButton.Yes:
            self.export_csv()
        else:
            self.export_excel()
    
    def import_data(self):
        """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (CSV)"""
        file_path, _ = QFileDialog.getOpenFileName(
            self, '–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª', '', 'CSV Files (*.csv);;All Files (*)'
        )
        
        if not file_path:
            return
        
        try:
            from scripts.import_csv_full import import_from_csv
            count = import_from_csv(file_path, self.session)
            QMessageBox.information(
                self, '–£—Å–ø–µ—Ö',
                f'‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤'
            )
            self.load_data()
            self.statusBar().showMessage(f'‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤')
        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:\n{e}')
    
    def export_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"""
        file_path, _ = QFileDialog.getSaveFileName(
            self, '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å CSV', 'functional_items.csv', 'CSV Files (*.csv)'
        )
        
        if not file_path:
            return
        
        try:
            import csv
            with open(file_path, 'w', newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
                writer.writerow([
                    'FuncID', 'Alias', 'Title', 'Type', 'Module', 'Epic', 'QA', 'Dev', 'Segment', 'Crit', 'Focus'
                ])
                
                for item in self.current_items:
                    writer.writerow([
                        item.functional_id,
                        item.alias_tag or '',
                        item.title or '',
                        item.type or '',
                        item.module or '',
                        item.epic or '',
                        item.responsible_qa.name if item.responsible_qa else '',
                        item.responsible_dev.name if item.responsible_dev else '',
                        item.segment or '',
                        '1' if item.is_crit else '0',
                        '1' if item.is_focus else '0'
                    ])
            
            QMessageBox.information(self, '–£—Å–ø–µ—Ö', f'‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(self.current_items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤')
            self.statusBar().showMessage(f'‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV: {file_path}')
        except Exception as e:
            QMessageBox.critical(self, '–û—à–∏–±–∫–∞', f'–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:\n{e}')
    
    def export_excel(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"""
        QMessageBox.information(self, 'Excel Export', '–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–∑–∂–µ')
    
    def sync_zoho(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Zoho"""
        QMessageBox.information(self, 'Zoho Sync', '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Zoho –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ')
    
    def closeEvent(self, event):
        self.session.close()
        event.accept()


if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    from src.db.database import init_db, DATABASE_PATH, engine
    from sqlalchemy import inspect
    
    db_needs_init = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ë–î
    if not DATABASE_PATH.exists() or DATABASE_PATH.stat().st_size == 0:
        logger.warning(f'‚ö†Ô∏è  –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞: {DATABASE_PATH}')
        db_needs_init = True
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü
        try:
            inspector = inspect(engine)
            tables = inspector.get_table_names()
            required_tables = ['functional_items', 'users', 'functional_item_relations', 'dictionaries']
            missing_tables = [t for t in required_tables if t not in tables]
            if missing_tables:
                logger.warning(f'‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {missing_tables}')
                db_needs_init = True
        except Exception as e:
            logger.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}')
            db_needs_init = True
    
    if db_needs_init:
        logger.info('‚öôÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –ë–î...')
        init_db()
        logger.info('‚úÖ –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')
    else:
        logger.info(f'‚úÖ –ë–î –≥–æ—Ç–æ–≤–∞: {DATABASE_PATH}')
    
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    window = MainWindow()
    window.show()
    sys.exit(app.exec())
