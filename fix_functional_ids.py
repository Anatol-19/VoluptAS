"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è functional_id –∏ segment –ø–æ –Ω–æ–≤—ã–º –ø—Ä–∞–≤–∏–ª–∞–º
"""
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from src.models.functional_item import FunctionalItem

engine = create_engine('sqlite:///data/voluptas.db')
SessionLocal = sessionmaker(bind=engine)
session = SessionLocal()

items = session.query(FunctionalItem).all()

print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ segment –¥–ª—è Module –∏ Epic...")
print("="*80)

fixed_segments = 0
fixed_funcids = 0

for item in items:
    changed = False
    
    # –£–±–∏—Ä–∞–µ–º segment —É Module –∏ Epic
    if item.type in ['Module', 'Epic'] and item.segment:
        print(f"‚úì –£–±–∏—Ä–∞–µ–º segment '{item.segment}' —É {item.type}: {item.functional_id}")
        item.segment = None
        changed = True
        fixed_segments += 1
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º functional_id –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    parts = item.functional_id.split('.')
    
    # Epic: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Module.Epic
    if item.type == 'Epic' and len(parts) != 2:
        if item.module and item.epic:
            new_funcid = f"{item.module}.{item.epic.replace(' ', '_')}"
            print(f"‚úì –ò—Å–ø—Ä–∞–≤–ª—è–µ–º FuncID –¥–ª—è Epic: {item.functional_id} ‚Üí {new_funcid}")
            item.functional_id = new_funcid
            changed = True
            fixed_funcids += 1
    
    # Feature: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Module.Epic.Feature
    if item.type == 'Feature' and len(parts) < 3:
        if item.module and item.epic and item.feature:
            new_funcid = f"{item.module}.{item.epic.replace(' ', '_')}.{item.feature.replace(' ', '_')}"
            print(f"‚úì –ò—Å–ø—Ä–∞–≤–ª—è–µ–º FuncID –¥–ª—è Feature: {item.functional_id} ‚Üí {new_funcid}")
            item.functional_id = new_funcid
            changed = True
            fixed_funcids += 1
    
    # Module: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º
    if item.type == 'Module' and len(parts) > 1:
        if item.module:
            new_funcid = item.module.replace(' ', '_')
            print(f"‚úì –ò—Å–ø—Ä–∞–≤–ª—è–µ–º FuncID –¥–ª—è Module: {item.functional_id} ‚Üí {new_funcid}")
            item.functional_id = new_funcid
            changed = True
            fixed_funcids += 1
    
    # Service: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Module.Service
    if item.type == 'Service' and len(parts) == 1:
        if item.module:
            service_name = item.functional_id.replace(' ', '_')
            new_funcid = f"{item.module}.{service_name}"
            print(f"‚úì –ò—Å–ø—Ä–∞–≤–ª—è–µ–º FuncID –¥–ª—è Service: {item.functional_id} ‚Üí {new_funcid}")
            item.functional_id = new_funcid
            changed = True
            fixed_funcids += 1

print("="*80)
print(f"\nüìä –ò—Ç–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:")
print(f"  - –£–±—Ä–∞–Ω–æ segment: {fixed_segments}")
print(f"  - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ functional_id: {fixed_funcids}")

if fixed_segments > 0 or fixed_funcids > 0:
    response = input("\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î? (y/n): ")
    if response.lower() == 'y':
        session.commit()
        print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    else:
        session.rollback()
        print("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.")
else:
    print("\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è!")

session.close()
